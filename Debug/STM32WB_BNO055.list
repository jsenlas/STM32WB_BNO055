
STM32WB_BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008944  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08008a88  08008a88  00018a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000004  080090a0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000080  200001ec  08009288  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000026c  08009288  0002026c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   000127f3  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002655  00000000  00000000  00032a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001380  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001268  00000000  00000000  000363e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000229ab  00000000  00000000  00037650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c02a  00000000  00000000  00059ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000d42f4  00000000  00000000  00066025  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0013a319  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006344  00000000  00000000  0013a394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08008a6c 	.word	0x08008a6c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	08008a6c 	.word	0x08008a6c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4619      	mov	r1, r3
 8000c46:	2007      	movs	r0, #7
 8000c48:	f000 fa44 	bl	80010d4 <bno055_writeData>
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4619      	mov	r1, r3
 8000c62:	203d      	movs	r0, #61	; 0x3d
 8000c64:	f000 fa36 	bl	80010d4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000c6e:	2013      	movs	r0, #19
 8000c70:	f000 fa24 	bl	80010bc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000c74:	e002      	b.n	8000c7c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000c76:	2007      	movs	r0, #7
 8000c78:	f000 fa20 	bl	80010bc <bno055_delay>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ffe3 	bl	8000c54 <bno055_setOperationMode>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000c96:	200c      	movs	r0, #12
 8000c98:	f7ff ffdc 	bl	8000c54 <bno055_setOperationMode>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	203f      	movs	r0, #63	; 0x3f
 8000ca8:	f000 fa14 	bl	80010d4 <bno055_writeData>
  bno055_delay(700);
 8000cac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000cb0:	f000 fa04 	bl	80010bc <bno055_delay>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  bno055_reset();
 8000cbe:	f7ff ffef 	bl	8000ca0 <bno055_reset>

  uint8_t id = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 faed 	bl	80012ac <bno055_readData>
  if (id != BNO055_ID) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2ba0      	cmp	r3, #160	; 0xa0
 8000cd6:	d004      	beq.n	8000ce2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <bno055_setup+0x4c>)
 8000cde:	f004 facf 	bl	8005280 <iprintf>
  }
  bno055_setPage(0);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffa8 	bl	8000c38 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	203f      	movs	r0, #63	; 0x3f
 8000cec:	f000 f9f2 	bl	80010d4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000cf0:	f7ff ffc8 	bl	8000c84 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f000 f9e1 	bl	80010bc <bno055_delay>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08008a88 	.word	0x08008a88

08000d08 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	b09f      	sub	sp, #124	; 0x7c
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ff8e 	bl	8000c38 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d20:	2b20      	cmp	r3, #32
 8000d22:	d108      	bne.n	8000d36 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000d24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fabc 	bl	80012ac <bno055_readData>
 8000d34:	e007      	b.n	8000d46 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000d36:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3e:	2206      	movs	r2, #6
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fab3 	bl	80012ac <bno055_readData>

  double scale = 1;
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	4c8b      	ldr	r4, [pc, #556]	; (8000f78 <bno055_getVector+0x270>)
 8000d4c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d54:	2b0e      	cmp	r3, #14
 8000d56:	d109      	bne.n	8000d6c <bno055_getVector+0x64>
    scale = magScale;
 8000d58:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <bno055_getVector+0x274>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fba9 	bl	80004b4 <__aeabi_ui2d>
 8000d62:	4603      	mov	r3, r0
 8000d64:	460c      	mov	r4, r1
 8000d66:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000d6a:	e03e      	b.n	8000dea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d007      	beq.n	8000d84 <bno055_getVector+0x7c>
 8000d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d78:	2b28      	cmp	r3, #40	; 0x28
 8000d7a:	d003      	beq.n	8000d84 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d80:	2b2e      	cmp	r3, #46	; 0x2e
 8000d82:	d109      	bne.n	8000d98 <bno055_getVector+0x90>
    scale = accelScale;
 8000d84:	4b7e      	ldr	r3, [pc, #504]	; (8000f80 <bno055_getVector+0x278>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fb93 	bl	80004b4 <__aeabi_ui2d>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460c      	mov	r4, r1
 8000d92:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000d96:	e028      	b.n	8000dea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9c:	2b14      	cmp	r3, #20
 8000d9e:	d109      	bne.n	8000db4 <bno055_getVector+0xac>
    scale = angularRateScale;
 8000da0:	4b78      	ldr	r3, [pc, #480]	; (8000f84 <bno055_getVector+0x27c>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fb85 	bl	80004b4 <__aeabi_ui2d>
 8000daa:	4603      	mov	r3, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000db2:	e01a      	b.n	8000dea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000db8:	2b1a      	cmp	r3, #26
 8000dba:	d109      	bne.n	8000dd0 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000dbc:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <bno055_getVector+0x280>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb77 	bl	80004b4 <__aeabi_ui2d>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460c      	mov	r4, r1
 8000dca:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000dce:	e00c      	b.n	8000dea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd4:	2b20      	cmp	r3, #32
 8000dd6:	d108      	bne.n	8000dea <bno055_getVector+0xe2>
    scale = quaScale;
 8000dd8:	4b6c      	ldr	r3, [pc, #432]	; (8000f8c <bno055_getVector+0x284>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb69 	bl	80004b4 <__aeabi_ui2d>
 8000de2:	4603      	mov	r3, r0
 8000de4:	460c      	mov	r4, r1
 8000de6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fbfd 	bl	80045f2 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dfc:	2b20      	cmp	r3, #32
 8000dfe:	d150      	bne.n	8000ea2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000e00:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb5e 	bl	80004d4 <__aeabi_i2d>
 8000e18:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000e1c:	f7ff fcee 	bl	80007fc <__aeabi_ddiv>
 8000e20:	4603      	mov	r3, r0
 8000e22:	460c      	mov	r4, r1
 8000e24:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000e28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fb4a 	bl	80004d4 <__aeabi_i2d>
 8000e40:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000e44:	f7ff fcda 	bl	80007fc <__aeabi_ddiv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000e50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb36 	bl	80004d4 <__aeabi_i2d>
 8000e68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000e6c:	f7ff fcc6 	bl	80007fc <__aeabi_ddiv>
 8000e70:	4603      	mov	r3, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb22 	bl	80004d4 <__aeabi_i2d>
 8000e90:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000e94:	f7ff fcb2 	bl	80007fc <__aeabi_ddiv>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8000ea0:	e03b      	b.n	8000f1a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000ea2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fb0d 	bl	80004d4 <__aeabi_i2d>
 8000eba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ebe:	f7ff fc9d 	bl	80007fc <__aeabi_ddiv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000eca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff faf9 	bl	80004d4 <__aeabi_i2d>
 8000ee2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ee6:	f7ff fc89 	bl	80007fc <__aeabi_ddiv>
 8000eea:	4603      	mov	r3, r0
 8000eec:	460c      	mov	r4, r1
 8000eee:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000ef2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fae5 	bl	80004d4 <__aeabi_i2d>
 8000f0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f0e:	f7ff fc75 	bl	80007fc <__aeabi_ddiv>
 8000f12:	4603      	mov	r3, r0
 8000f14:	460c      	mov	r4, r1
 8000f16:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 8000f1a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000f1e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000f32:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000f36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8000f3a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8000f3e:	ec49 8b14 	vmov	d4, r8, r9
 8000f42:	ec46 5b15 	vmov	d5, r5, r6
 8000f46:	ec42 1b16 	vmov	d6, r1, r2
 8000f4a:	ec44 3b17 	vmov	d7, r3, r4
}
 8000f4e:	eeb0 0a44 	vmov.f32	s0, s8
 8000f52:	eef0 0a64 	vmov.f32	s1, s9
 8000f56:	eeb0 1a45 	vmov.f32	s2, s10
 8000f5a:	eef0 1a65 	vmov.f32	s3, s11
 8000f5e:	eeb0 2a46 	vmov.f32	s4, s12
 8000f62:	eef0 2a66 	vmov.f32	s5, s13
 8000f66:	eeb0 3a47 	vmov.f32	s6, s14
 8000f6a:	eef0 3a67 	vmov.f32	s7, s15
 8000f6e:	377c      	adds	r7, #124	; 0x7c
 8000f70:	46bd      	mov	sp, r7
 8000f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f76:	bf00      	nop
 8000f78:	3ff00000 	.word	0x3ff00000
 8000f7c:	2000000a 	.word	0x2000000a
 8000f80:	20000004 	.word	0x20000004
 8000f84:	20000006 	.word	0x20000006
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	2000000c 	.word	0x2000000c

08000f90 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f94:	b091      	sub	sp, #68	; 0x44
 8000f96:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000f98:	201a      	movs	r0, #26
 8000f9a:	f7ff feb5 	bl	8000d08 <bno055_getVector>
 8000f9e:	eeb0 4a40 	vmov.f32	s8, s0
 8000fa2:	eef0 4a60 	vmov.f32	s9, s1
 8000fa6:	eeb0 5a41 	vmov.f32	s10, s2
 8000faa:	eef0 5a61 	vmov.f32	s11, s3
 8000fae:	eeb0 6a42 	vmov.f32	s12, s4
 8000fb2:	eef0 6a62 	vmov.f32	s13, s5
 8000fb6:	eeb0 7a43 	vmov.f32	s14, s6
 8000fba:	eef0 7a63 	vmov.f32	s15, s7
 8000fbe:	ed87 4b08 	vstr	d4, [r7, #32]
 8000fc2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000fc6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000fca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000fce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000fd2:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000fd6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000fda:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000fde:	ec49 8b14 	vmov	d4, r8, r9
 8000fe2:	ec46 5b15 	vmov	d5, r5, r6
 8000fe6:	ec42 1b16 	vmov	d6, r1, r2
 8000fea:	ec44 3b17 	vmov	d7, r3, r4
}
 8000fee:	eeb0 0a44 	vmov.f32	s0, s8
 8000ff2:	eef0 0a64 	vmov.f32	s1, s9
 8000ff6:	eeb0 1a45 	vmov.f32	s2, s10
 8000ffa:	eef0 1a65 	vmov.f32	s3, s11
 8000ffe:	eeb0 2a46 	vmov.f32	s4, s12
 8001002:	eef0 2a66 	vmov.f32	s5, s13
 8001006:	eeb0 3a47 	vmov.f32	s6, s14
 800100a:	eef0 3a67 	vmov.f32	s7, s15
 800100e:	3744      	adds	r7, #68	; 0x44
 8001010:	46bd      	mov	sp, r7
 8001012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001016 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800101a:	b091      	sub	sp, #68	; 0x44
 800101c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800101e:	2020      	movs	r0, #32
 8001020:	f7ff fe72 	bl	8000d08 <bno055_getVector>
 8001024:	eeb0 4a40 	vmov.f32	s8, s0
 8001028:	eef0 4a60 	vmov.f32	s9, s1
 800102c:	eeb0 5a41 	vmov.f32	s10, s2
 8001030:	eef0 5a61 	vmov.f32	s11, s3
 8001034:	eeb0 6a42 	vmov.f32	s12, s4
 8001038:	eef0 6a62 	vmov.f32	s13, s5
 800103c:	eeb0 7a43 	vmov.f32	s14, s6
 8001040:	eef0 7a63 	vmov.f32	s15, s7
 8001044:	ed87 4b08 	vstr	d4, [r7, #32]
 8001048:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800104c:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001050:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001058:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800105c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001060:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001064:	ec49 8b14 	vmov	d4, r8, r9
 8001068:	ec46 5b15 	vmov	d5, r5, r6
 800106c:	ec42 1b16 	vmov	d6, r1, r2
 8001070:	ec44 3b17 	vmov	d7, r3, r4
}
 8001074:	eeb0 0a44 	vmov.f32	s0, s8
 8001078:	eef0 0a64 	vmov.f32	s1, s9
 800107c:	eeb0 1a45 	vmov.f32	s2, s10
 8001080:	eef0 1a65 	vmov.f32	s3, s11
 8001084:	eeb0 2a46 	vmov.f32	s4, s12
 8001088:	eef0 2a66 	vmov.f32	s5, s13
 800108c:	eeb0 3a47 	vmov.f32	s6, s14
 8001090:	eef0 3a67 	vmov.f32	s7, s15
 8001094:	3744      	adds	r7, #68	; 0x44
 8001096:	46bd      	mov	sp, r7
 8001098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800109c <bno055_assignI2C>:
 *  Created on: Mar 10, 2021
 *      Author: jakub
 */
#include "bno055_stm32.h"

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <bno055_assignI2C+0x1c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000214 	.word	0x20000214

080010bc <bno055_delay>:


void bno055_delay(int time) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd06 	bl	8001ad8 <HAL_Delay>
#endif
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	733b      	strb	r3, [r7, #12]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80010ec:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <bno055_writeData+0x184>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f107 020c 	add.w	r2, r7, #12
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	2150      	movs	r1, #80	; 0x50
 80010fc:	f001 f824 	bl	8002148 <HAL_I2C_Master_Transmit>
 8001100:	4603      	mov	r3, r0
 8001102:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80a0 	beq.w	800124c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d103      	bne.n	800111a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001112:	4852      	ldr	r0, [pc, #328]	; (800125c <bno055_writeData+0x188>)
 8001114:	f004 f928 	bl	8005368 <puts>
 8001118:	e012      	b.n	8001140 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d103      	bne.n	8001128 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001120:	484f      	ldr	r0, [pc, #316]	; (8001260 <bno055_writeData+0x18c>)
 8001122:	f004 f921 	bl	8005368 <puts>
 8001126:	e00b      	b.n	8001140 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d103      	bne.n	8001136 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800112e:	484d      	ldr	r0, [pc, #308]	; (8001264 <bno055_writeData+0x190>)
 8001130:	f004 f91a 	bl	8005368 <puts>
 8001134:	e004      	b.n	8001140 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	4619      	mov	r1, r3
 800113a:	484b      	ldr	r0, [pc, #300]	; (8001268 <bno055_writeData+0x194>)
 800113c:	f004 f8a0 	bl	8005280 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <bno055_writeData+0x184>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f001 f9f7 	bl	8002538 <HAL_I2C_GetError>
 800114a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d07e      	beq.n	8001250 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d103      	bne.n	8001160 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001158:	4844      	ldr	r0, [pc, #272]	; (800126c <bno055_writeData+0x198>)
 800115a:	f004 f905 	bl	8005368 <puts>
 800115e:	e021      	b.n	80011a4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d103      	bne.n	800116e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001166:	4842      	ldr	r0, [pc, #264]	; (8001270 <bno055_writeData+0x19c>)
 8001168:	f004 f8fe 	bl	8005368 <puts>
 800116c:	e01a      	b.n	80011a4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d103      	bne.n	800117c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001174:	483f      	ldr	r0, [pc, #252]	; (8001274 <bno055_writeData+0x1a0>)
 8001176:	f004 f8f7 	bl	8005368 <puts>
 800117a:	e013      	b.n	80011a4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b08      	cmp	r3, #8
 8001180:	d103      	bne.n	800118a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001182:	483d      	ldr	r0, [pc, #244]	; (8001278 <bno055_writeData+0x1a4>)
 8001184:	f004 f8f0 	bl	8005368 <puts>
 8001188:	e00c      	b.n	80011a4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	2b10      	cmp	r3, #16
 800118e:	d103      	bne.n	8001198 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001190:	483a      	ldr	r0, [pc, #232]	; (800127c <bno055_writeData+0x1a8>)
 8001192:	f004 f8e9 	bl	8005368 <puts>
 8001196:	e005      	b.n	80011a4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b20      	cmp	r3, #32
 800119c:	d102      	bne.n	80011a4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800119e:	4838      	ldr	r0, [pc, #224]	; (8001280 <bno055_writeData+0x1ac>)
 80011a0:	f004 f8e2 	bl	8005368 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <bno055_writeData+0x184>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f9b7 	bl	800251c <HAL_I2C_GetState>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80011b8:	4832      	ldr	r0, [pc, #200]	; (8001284 <bno055_writeData+0x1b0>)
 80011ba:	f004 f8d5 	bl	8005368 <puts>
 80011be:	e048      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d103      	bne.n	80011ce <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80011c6:	482f      	ldr	r0, [pc, #188]	; (8001284 <bno055_writeData+0x1b0>)
 80011c8:	f004 f8ce 	bl	8005368 <puts>
 80011cc:	e041      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b24      	cmp	r3, #36	; 0x24
 80011d2:	d103      	bne.n	80011dc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80011d4:	482c      	ldr	r0, [pc, #176]	; (8001288 <bno055_writeData+0x1b4>)
 80011d6:	f004 f8c7 	bl	8005368 <puts>
 80011da:	e03a      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b21      	cmp	r3, #33	; 0x21
 80011e0:	d103      	bne.n	80011ea <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80011e2:	482a      	ldr	r0, [pc, #168]	; (800128c <bno055_writeData+0x1b8>)
 80011e4:	f004 f8c0 	bl	8005368 <puts>
 80011e8:	e033      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b22      	cmp	r3, #34	; 0x22
 80011ee:	d103      	bne.n	80011f8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80011f0:	4827      	ldr	r0, [pc, #156]	; (8001290 <bno055_writeData+0x1bc>)
 80011f2:	f004 f8b9 	bl	8005368 <puts>
 80011f6:	e02c      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b28      	cmp	r3, #40	; 0x28
 80011fc:	d103      	bne.n	8001206 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80011fe:	4825      	ldr	r0, [pc, #148]	; (8001294 <bno055_writeData+0x1c0>)
 8001200:	f004 f8b2 	bl	8005368 <puts>
 8001204:	e025      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b29      	cmp	r3, #41	; 0x29
 800120a:	d103      	bne.n	8001214 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <bno055_writeData+0x1c4>)
 800120e:	f004 f8ab 	bl	8005368 <puts>
 8001212:	e01e      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b2a      	cmp	r3, #42	; 0x2a
 8001218:	d103      	bne.n	8001222 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <bno055_writeData+0x1c8>)
 800121c:	f004 f8a4 	bl	8005368 <puts>
 8001220:	e017      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b60      	cmp	r3, #96	; 0x60
 8001226:	d103      	bne.n	8001230 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001228:	481d      	ldr	r0, [pc, #116]	; (80012a0 <bno055_writeData+0x1cc>)
 800122a:	f004 f89d 	bl	8005368 <puts>
 800122e:	e010      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2ba0      	cmp	r3, #160	; 0xa0
 8001234:	d103      	bne.n	800123e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001236:	481b      	ldr	r0, [pc, #108]	; (80012a4 <bno055_writeData+0x1d0>)
 8001238:	f004 f896 	bl	8005368 <puts>
 800123c:	e009      	b.n	8001252 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2be0      	cmp	r3, #224	; 0xe0
 8001242:	d106      	bne.n	8001252 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <bno055_writeData+0x1d4>)
 8001246:	f004 f88f 	bl	8005368 <puts>
 800124a:	e002      	b.n	8001252 <bno055_writeData+0x17e>
    return;
 800124c:	bf00      	nop
 800124e:	e000      	b.n	8001252 <bno055_writeData+0x17e>
    return;
 8001250:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000214 	.word	0x20000214
 800125c:	08008ac4 	.word	0x08008ac4
 8001260:	08008ae8 	.word	0x08008ae8
 8001264:	08008b10 	.word	0x08008b10
 8001268:	08008b34 	.word	0x08008b34
 800126c:	08008b4c 	.word	0x08008b4c
 8001270:	08008b60 	.word	0x08008b60
 8001274:	08008b74 	.word	0x08008b74
 8001278:	08008b88 	.word	0x08008b88
 800127c:	08008b9c 	.word	0x08008b9c
 8001280:	08008bb0 	.word	0x08008bb0
 8001284:	08008bc8 	.word	0x08008bc8
 8001288:	08008be0 	.word	0x08008be0
 800128c:	08008bf4 	.word	0x08008bf4
 8001290:	08008c0c 	.word	0x08008c0c
 8001294:	08008c24 	.word	0x08008c24
 8001298:	08008c3c 	.word	0x08008c3c
 800129c:	08008c5c 	.word	0x08008c5c
 80012a0:	08008c7c 	.word	0x08008c7c
 80012a4:	08008c94 	.word	0x08008c94
 80012a8:	08008cac 	.word	0x08008cac

080012ac <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <bno055_readData+0x40>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	1dfa      	adds	r2, r7, #7
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	2150      	movs	r1, #80	; 0x50
 80012ca:	f000 ff3d 	bl	8002148 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <bno055_readData+0x40>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4613      	mov	r3, r2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	2150      	movs	r1, #80	; 0x50
 80012e0:	f001 f826 	bl	8002330 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000214 	.word	0x20000214

080012f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001308:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800130c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001310:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001318:	e000      	b.n	800131c <ITM_SendChar+0x2c>
    {
      __NOP();
 800131a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800131c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f9      	beq.n	800131a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001326:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800134c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4313      	orrs	r3, r2
 8001354:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4013      	ands	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f000 fb29 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 f867 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f000 f915 	bl	80015ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001382:	f000 f8d5 	bl	8001530 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8001386:	482e      	ldr	r0, [pc, #184]	; (8001440 <main+0xd0>)
 8001388:	f7ff fe88 	bl	800109c <bno055_assignI2C>
  bno055_setup();
 800138c:	f7ff fc94 	bl	8000cb8 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001390:	f7ff fc7f 	bl	8000c92 <bno055_setOperationModeNDOF>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int x = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	    bno055_vector_t v = bno055_getVectorEuler();
 8001398:	f7ff fdfa 	bl	8000f90 <bno055_getVectorEuler>
 800139c:	eeb0 4a40 	vmov.f32	s8, s0
 80013a0:	eef0 4a60 	vmov.f32	s9, s1
 80013a4:	eeb0 5a41 	vmov.f32	s10, s2
 80013a8:	eef0 5a61 	vmov.f32	s11, s3
 80013ac:	eeb0 6a42 	vmov.f32	s12, s4
 80013b0:	eef0 6a62 	vmov.f32	s13, s5
 80013b4:	eeb0 7a43 	vmov.f32	s14, s6
 80013b8:	eef0 7a63 	vmov.f32	s15, s7
 80013bc:	ed87 4b00 	vstr	d4, [r7]
 80013c0:	ed87 5b02 	vstr	d5, [r7, #8]
 80013c4:	ed87 6b04 	vstr	d6, [r7, #16]
 80013c8:	ed87 7b06 	vstr	d7, [r7, #24]
	    v=v;
	    //printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
	    v = bno055_getVectorQuaternion();
 80013cc:	f7ff fe23 	bl	8001016 <bno055_getVectorQuaternion>
 80013d0:	eeb0 4a40 	vmov.f32	s8, s0
 80013d4:	eef0 4a60 	vmov.f32	s9, s1
 80013d8:	eeb0 5a41 	vmov.f32	s10, s2
 80013dc:	eef0 5a61 	vmov.f32	s11, s3
 80013e0:	eeb0 6a42 	vmov.f32	s12, s4
 80013e4:	eef0 6a62 	vmov.f32	s13, s5
 80013e8:	eeb0 7a43 	vmov.f32	s14, s6
 80013ec:	eef0 7a63 	vmov.f32	s15, s7
 80013f0:	ed87 4b00 	vstr	d4, [r7]
 80013f4:	ed87 5b02 	vstr	d5, [r7, #8]
 80013f8:	ed87 6b04 	vstr	d6, [r7, #16]
 80013fc:	ed87 7b06 	vstr	d7, [r7, #24]
	    //printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
	    printf("Bubu\n");
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <main+0xd4>)
 8001402:	f003 ffb1 	bl	8005368 <puts>
	   /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (x < 10){
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	2b09      	cmp	r3, #9
 800140a:	dc07      	bgt.n	800141c <main+0xac>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800140c:	2120      	movs	r1, #32
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <main+0xd8>)
 8001410:	f000 fdf0 	bl	8001ff4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001414:	20c8      	movs	r0, #200	; 0xc8
 8001416:	f000 fb5f 	bl	8001ad8 <HAL_Delay>
 800141a:	e007      	b.n	800142c <main+0xbc>

	}
	else{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800141c:	2120      	movs	r1, #32
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <main+0xd8>)
 8001420:	f000 fde8 	bl	8001ff4 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001428:	f000 fb56 	bl	8001ad8 <HAL_Delay>
	}
	if (x == 50){
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	2b32      	cmp	r3, #50	; 0x32
 8001430:	d101      	bne.n	8001436 <main+0xc6>
		x = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
	}
	x++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  {
 800143c:	e7ac      	b.n	8001398 <main+0x28>
 800143e:	bf00      	nop
 8001440:	20000218 	.word	0x20000218
 8001444:	08008cc4 	.word	0x08008cc4
 8001448:	48000400 	.word	0x48000400

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0ae      	sub	sp, #184	; 0xb8
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001456:	2248      	movs	r2, #72	; 0x48
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f003 f8c9 	bl	80045f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2250      	movs	r2, #80	; 0x50
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f8b9 	bl	80045f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <SystemClock_Config+0xe0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <SystemClock_Config+0xe0>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <SystemClock_Config+0xe0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800149c:	2303      	movs	r3, #3
 800149e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ac:	2340      	movs	r3, #64	; 0x40
 80014ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fe3b 	bl	8003138 <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014c8:	f000 f8b5 	bl	8001636 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80014cc:	236f      	movs	r3, #111	; 0x6f
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014d0:	2302      	movs	r3, #2
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f9ae 	bl	8003850 <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80014fa:	f000 f89c 	bl	8001636 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_I2C1;
 80014fe:	f242 0304 	movw	r3, #8196	; 0x2004
 8001502:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001504:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800150a:	2300      	movs	r3, #0
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800150e:	2310      	movs	r3, #16
 8001510:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fdb0 	bl	800407a <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001520:	f000 f889 	bl	8001636 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001524:	bf00      	nop
 8001526:	37b8      	adds	r7, #184	; 0xb8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58000400 	.word	0x58000400

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_I2C1_Init+0x78>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_I2C1_Init+0x74>)
 800153c:	f240 220b 	movw	r2, #523	; 0x20b
 8001540:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_I2C1_Init+0x74>)
 800154a:	2201      	movs	r2, #1
 800154c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_I2C1_Init+0x74>)
 800156e:	f000 fd5b 	bl	8002028 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 f85d 	bl	8001636 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001580:	f001 f9c6 	bl	8002910 <HAL_I2CEx_ConfigAnalogFilter>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800158a:	f000 f854 	bl	8001636 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001592:	f001 fa08 	bl	80029a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800159c:	f000 f84b 	bl	8001636 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000218 	.word	0x20000218
 80015a8:	40005400 	.word	0x40005400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff febc 	bl	800133e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2002      	movs	r0, #2
 80015c8:	f7ff feb9 	bl	800133e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff feb6 	bl	800133e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2121      	movs	r1, #33	; 0x21
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <MX_GPIO_Init+0x68>)
 80015d8:	f000 fcf4 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 80015dc:	2310      	movs	r3, #16
 80015de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <MX_GPIO_Init+0x6c>)
 80015ee:	f000 fb79 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80015f2:	2321      	movs	r3, #33	; 0x21
 80015f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_GPIO_Init+0x68>)
 8001608:	f000 fb6c 	bl	8001ce4 <HAL_GPIO_Init>

}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800

0800161c <__io_putchar>:

/* USER CODE BEGIN 4 */
// Overwrite of __io_putchar
int __io_putchar(int ch) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe62 	bl	80012f0 <ITM_SendChar>
    return ch;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x6>

0800163e <LL_AHB2_GRP1_EnableClock>:
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800164c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4013      	ands	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800167e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_I2C_MspInit+0x5c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d117      	bne.n	8001702 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2002      	movs	r0, #2
 80016d4:	f7ff ffb3 	bl	800163e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016de:	2312      	movs	r3, #18
 80016e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ea:	2304      	movs	r3, #4
 80016ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4619      	mov	r1, r3
 80016f4:	4806      	ldr	r0, [pc, #24]	; (8001710 <HAL_I2C_MspInit+0x60>)
 80016f6:	f000 faf5 	bl	8001ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016fe:	f7ff ffb7 	bl	8001670 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40005400 	.word	0x40005400
 8001710:	48000400 	.word	0x48000400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f98e 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e00a      	b.n	8001790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800177a:	f3af 8000 	nop.w
 800177e:	4601      	mov	r1, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60ba      	str	r2, [r7, #8]
 8001786:	b2ca      	uxtb	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf0      	blt.n	800177a <_read+0x12>
	}

return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e009      	b.n	80017c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff2d 	bl	800161c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf1      	blt.n	80017b4 <_write+0x12>
	}
	return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_close>:

int _close(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	return -1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001802:	605a      	str	r2, [r3, #4]
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_isatty>:

int _isatty(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	return 1;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f002 fe88 	bl	8004588 <__errno>
 8001878:	4602      	mov	r2, r0
 800187a:	230c      	movs	r3, #12
 800187c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20030000 	.word	0x20030000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000208 	.word	0x20000208
 80018ac:	20000270 	.word	0x20000270

080018b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <SystemInit+0xa0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <SystemInit+0xa0>)
 80018bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <SystemInit+0xa0>)
 80018c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018e2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <SystemInit+0xa4>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001900:	f023 0305 	bic.w	r3, r3, #5
 8001904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <SystemInit+0xa8>)
 8001922:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <SystemInit+0xa8>)
 800192a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00
 8001954:	faf6fefb 	.word	0xfaf6fefb
 8001958:	22041000 	.word	0x22041000

0800195c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800195c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001960:	3304      	adds	r3, #4

08001962 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001962:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001964:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001966:	d3f9      	bcc.n	800195c <CopyDataInit>
  bx lr
 8001968:	4770      	bx	lr

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800196a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800196c:	3004      	adds	r0, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800196e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>
  bx lr
 8001972:	4770      	bx	lr

08001974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001976:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001978:	f7ff ff9a 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <LoopForever+0x8>)
 800197e:	490c      	ldr	r1, [pc, #48]	; (80019b0 <LoopForever+0xc>)
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <LoopForever+0x10>)
 8001982:	2300      	movs	r3, #0
 8001984:	f7ff ffed 	bl	8001962 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <LoopForever+0x14>)
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <LoopForever+0x18>)
 800198c:	2300      	movs	r3, #0
 800198e:	f7ff ffee 	bl	800196e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopForever+0x1c>)
 8001994:	490b      	ldr	r1, [pc, #44]	; (80019c4 <LoopForever+0x20>)
 8001996:	2300      	movs	r3, #0
 8001998:	f7ff ffe9 	bl	800196e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800199c:	f002 fdfa 	bl	8004594 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80019a0:	f7ff fce6 	bl	8001370 <main>

080019a4 <LoopForever>:

LoopForever:
  b LoopForever
 80019a4:	e7fe      	b.n	80019a4 <LoopForever>
 80019a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80019a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019ac:	20000004 	.word	0x20000004
 80019b0:	200001ec 	.word	0x200001ec
 80019b4:	080090a0 	.word	0x080090a0
  INIT_BSS _sbss, _ebss
 80019b8:	200001ec 	.word	0x200001ec
 80019bc:	2000026c 	.word	0x2000026c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80019c0:	20030000 	.word	0x20030000
 80019c4:	20030000 	.word	0x20030000

080019c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_Init+0x3c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_Init+0x3c>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f000 f94c 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f80f 	bl	8001a0c <HAL_InitTick>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	e001      	b.n	80019fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fa:	f7ff fe52 	bl	80016a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58004000 	.word	0x58004000

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_InitTick+0x6c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d024      	beq.n	8001a6a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a20:	f002 f8c2 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_InitTick+0x6c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f946 	bl	8001cca <HAL_SYSTICK_Config>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10f      	bne.n	8001a64 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	d809      	bhi.n	8001a5e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a52:	f000 f920 	bl	8001c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_InitTick+0x70>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e004      	b.n	8001a6e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000018 	.word	0x20000018
 8001a7c:	20000014 	.word	0x20000014

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000018 	.word	0x20000018
 8001aa4:	20000264 	.word	0x20000264

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000264 	.word	0x20000264

08001ac0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTickPrio+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000014 	.word	0x20000014

08001ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff ffe2 	bl	8001aa8 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af0:	d005      	beq.n	8001afe <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_Delay+0x40>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001afe:	bf00      	nop
 8001b00:	f7ff ffd2 	bl	8001aa8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8f7      	bhi.n	8001b00 <HAL_Delay+0x28>
    {
    }
  }
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000018 	.word	0x20000018

08001b1c <__NVIC_SetPriorityGrouping>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_SetPriority>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff47 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff5e 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff90 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5f 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffb2 	bl	8001c3c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e14c      	b.n	8001f8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 813e 	beq.w	8001f88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d00b      	beq.n	8001d2c <HAL_GPIO_Init+0x48>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d007      	beq.n	8001d2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b12      	cmp	r3, #18
 8001d2a:	d130      	bne.n	8001d8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d62:	2201      	movs	r2, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 0201 	and.w	r2, r3, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0xea>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b12      	cmp	r3, #18
 8001dcc:	d123      	bne.n	8001e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8098 	beq.w	8001f88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e58:	4a54      	ldr	r2, [pc, #336]	; (8001fac <HAL_GPIO_Init+0x2c8>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e82:	d019      	beq.n	8001eb8 <HAL_GPIO_Init+0x1d4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_GPIO_Init+0x1d0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00d      	beq.n	8001eb0 <HAL_GPIO_Init+0x1cc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2d4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <HAL_GPIO_Init+0x1c8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_GPIO_Init+0x2d8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_GPIO_Init+0x1c4>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e008      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	e006      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eac:	2303      	movs	r3, #3
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eca:	4938      	ldr	r1, [pc, #224]	; (8001fac <HAL_GPIO_Init+0x2c8>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efe:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f2c:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f47f aeab 	bne.w	8001cf4 <HAL_GPIO_Init+0x10>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	48000c00 	.word	0x48000c00
 8001fbc:	48001000 	.word	0x48001000
 8001fc0:	58000800 	.word	0x58000800

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43d9      	mvns	r1, r3
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	400b      	ands	r3, r1
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e081      	b.n	800213e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fb2e 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	; 0x24
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002078:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002088:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	e006      	b.n	80020b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d104      	bne.n	80020c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	ea42 0103 	orr.w	r1, r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69d9      	ldr	r1, [r3, #28]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	460b      	mov	r3, r1
 8002156:	817b      	strh	r3, [r7, #10]
 8002158:	4613      	mov	r3, r2
 800215a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	f040 80da 	bne.w	800231e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2C_Master_Transmit+0x30>
 8002174:	2302      	movs	r3, #2
 8002176:	e0d3      	b.n	8002320 <HAL_I2C_Master_Transmit+0x1d8>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002180:	f7ff fc92 	bl	8001aa8 <HAL_GetTick>
 8002184:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2319      	movs	r3, #25
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fa00 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0be      	b.n	8002320 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2221      	movs	r2, #33	; 0x21
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2210      	movs	r2, #16
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	893a      	ldrh	r2, [r7, #8]
 80021c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	d90e      	bls.n	80021f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <HAL_I2C_Master_Transmit+0x1e0>)
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fb62 	bl	80028b4 <I2C_TransferConfig>
 80021f0:	e06c      	b.n	80022cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	b2da      	uxtb	r2, r3
 8002202:	8979      	ldrh	r1, [r7, #10]
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_I2C_Master_Transmit+0x1e0>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fb51 	bl	80028b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002212:	e05b      	b.n	80022cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	6a39      	ldr	r1, [r7, #32]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f9fd 	bl	8002618 <I2C_WaitOnTXISFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e07b      	b.n	8002320 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d034      	beq.n	80022cc <HAL_I2C_Master_Transmit+0x184>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d130      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f98f 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e04d      	b.n	8002320 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d90e      	bls.n	80022ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	22ff      	movs	r2, #255	; 0xff
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	b2da      	uxtb	r2, r3
 800229a:	8979      	ldrh	r1, [r7, #10]
 800229c:	2300      	movs	r3, #0
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fb05 	bl	80028b4 <I2C_TransferConfig>
 80022aa:	e00f      	b.n	80022cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	2300      	movs	r3, #0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 faf4 	bl	80028b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d19e      	bne.n	8002214 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f9dc 	bl	8002698 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e01a      	b.n	8002320 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_I2C_Master_Transmit+0x1e4>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	80002000 	.word	0x80002000
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	f040 80db 	bne.w	8002508 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_I2C_Master_Receive+0x30>
 800235c:	2302      	movs	r3, #2
 800235e:	e0d4      	b.n	800250a <HAL_I2C_Master_Receive+0x1da>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002368:	f7ff fb9e 	bl	8001aa8 <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2319      	movs	r3, #25
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f90c 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0bf      	b.n	800250a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2222      	movs	r2, #34	; 0x22
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2210      	movs	r2, #16
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	893a      	ldrh	r2, [r7, #8]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d90e      	bls.n	80023da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	4b52      	ldr	r3, [pc, #328]	; (8002514 <HAL_I2C_Master_Receive+0x1e4>)
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa6e 	bl	80028b4 <I2C_TransferConfig>
 80023d8:	e06d      	b.n	80024b6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_I2C_Master_Receive+0x1e4>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fa5d 	bl	80028b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80023fa:	e05c      	b.n	80024b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f985 	bl	8002710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e07c      	b.n	800250a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d034      	beq.n	80024b6 <HAL_I2C_Master_Receive+0x186>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d130      	bne.n	80024b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2200      	movs	r2, #0
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f89a 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e04d      	b.n	800250a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	d90e      	bls.n	8002496 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	b2da      	uxtb	r2, r3
 8002484:	8979      	ldrh	r1, [r7, #10]
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fa10 	bl	80028b4 <I2C_TransferConfig>
 8002494:	e00f      	b.n	80024b6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f9ff 	bl	80028b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d19d      	bne.n	80023fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	6a39      	ldr	r1, [r7, #32]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f8e7 	bl	8002698 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e01a      	b.n	800250a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2220      	movs	r2, #32
 80024da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_I2C_Master_Receive+0x1e8>)
 80024e8:	400b      	ands	r3, r1
 80024ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	80002400 	.word	0x80002400
 8002518:	fe00e800 	.word	0xfe00e800

0800251c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252a:	b2db      	uxtb	r3, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d103      	bne.n	800256e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d007      	beq.n	800258c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	619a      	str	r2, [r3, #24]
  }
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a8:	e022      	b.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b0:	d01e      	beq.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff fa79 	bl	8001aa8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d113      	bne.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e00f      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d0cd      	beq.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002624:	e02c      	b.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f8dc 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e02a      	b.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002640:	d01e      	beq.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002642:	f7ff fa31 	bl	8001aa8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d113      	bne.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d1cb      	bne.n	8002626 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a4:	e028      	b.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f89c 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e026      	b.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f9f5 	bl	8001aa8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d113      	bne.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b20      	cmp	r3, #32
 8002704:	d1cf      	bne.n	80026a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800271c:	e055      	b.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f860 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e053      	b.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d129      	bne.n	8002794 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b04      	cmp	r3, #4
 800274c:	d105      	bne.n	800275a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e03f      	b.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2220      	movs	r2, #32
 8002760:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800276e:	400b      	ands	r3, r1
 8002770:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e022      	b.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7ff f988 	bl	8001aa8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e007      	b.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d1a2      	bne.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d151      	bne.n	80028a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002802:	e022      	b.n	800284a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280a:	d01e      	beq.n	800284a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7ff f94c 	bl	8001aa8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <I2C_IsAcknowledgeFailed+0x3a>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e02e      	b.n	80028a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	d1d5      	bne.n	8002804 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2220      	movs	r2, #32
 8002866:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fe71 	bl	8002550 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800287a:	400b      	ands	r3, r1
 800287c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	fe00e800 	.word	0xfe00e800

080028b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	817b      	strh	r3, [r7, #10]
 80028c2:	4613      	mov	r3, r2
 80028c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	0d5b      	lsrs	r3, r3, #21
 80028d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <I2C_TransferConfig+0x58>)
 80028d6:	430b      	orrs	r3, r1
 80028d8:	43db      	mvns	r3, r3
 80028da:	ea02 0103 	and.w	r1, r2, r3
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028e4:	7a7b      	ldrb	r3, [r7, #9]
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	03ff63ff 	.word	0x03ff63ff

08002910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b20      	cmp	r3, #32
 8002924:	d138      	bne.n	8002998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002930:	2302      	movs	r3, #2
 8002932:	e032      	b.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	; 0x24
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d139      	bne.n	8002a30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e033      	b.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2224      	movs	r2, #36	; 0x24
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	58000400 	.word	0x58000400

08002a60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	58000400 	.word	0x58000400

08002a7c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8e:	d101      	bne.n	8002a94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aee:	d101      	bne.n	8002af4 <LL_RCC_HSE_IsReady+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_RCC_HSE_IsReady+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d101      	bne.n	8002b54 <LL_RCC_HSI_IsReady+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_RCC_HSI_IsReady+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d101      	bne.n	8002be6 <LL_RCC_HSI48_IsReady+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_RCC_HSI48_IsReady+0x1a>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d101      	bne.n	8002c92 <LL_RCC_LSE_IsReady+0x18>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_RCC_LSE_IsReady+0x1a>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d101      	bne.n	8002cfa <LL_RCC_LSI1_IsReady+0x18>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_RCC_LSI1_IsReady+0x1a>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d101      	bne.n	8002d62 <LL_RCC_LSI2_IsReady+0x18>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_RCC_LSI2_IsReady+0x1a>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6013      	str	r3, [r2, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d101      	bne.n	8002dee <LL_RCC_MSI_IsReady+0x16>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_RCC_MSI_IsReady+0x18>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2bb0      	cmp	r3, #176	; 0xb0
 8002e38:	d901      	bls.n	8002e3e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e3a:	23b0      	movs	r3, #176	; 0xb0
 8002e3c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e3e:	687b      	ldr	r3, [r7, #4]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 0203 	bic.w	r2, r3, #3
 8002e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800300a:	d101      	bne.n	8003010 <LL_RCC_PLL_IsReady+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_RCC_PLL_IsReady+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d101      	bne.n	8003096 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b6:	d101      	bne.n	80030bc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d101      	bne.n	80030e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003100:	d101      	bne.n	8003106 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003124:	d101      	bne.n	800312a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b08d      	sub	sp, #52	; 0x34
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e37e      	b.n	8003848 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8092 	beq.w	800327c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003158:	f7ff fea1 	bl	8002e9e <LL_RCC_GetSysClkSource>
 800315c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315e:	f7ff ff82 	bl	8003066 <LL_RCC_PLL_GetMainSource>
 8003162:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x3e>
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d14c      	bne.n	800320a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	2b01      	cmp	r3, #1
 8003174:	d149      	bne.n	800320a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003176:	f7ff fe2f 	bl	8002dd8 <LL_RCC_MSI_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_OscConfig+0x54>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e35d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003190:	f7ff fe47 	bl	8002e22 <LL_RCC_MSI_GetRange>
 8003194:	4603      	mov	r3, r0
 8003196:	429c      	cmp	r4, r3
 8003198:	d914      	bls.n	80031c4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fd16 	bl	8003bd0 <RCC_SetFlashLatencyFromMSIRange>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e34c      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fe21 	bl	8002dfa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fe45 	bl	8002e4c <LL_RCC_MSI_SetCalibTrimming>
 80031c2:	e013      	b.n	80031ec <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fe16 	bl	8002dfa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fe3a 	bl	8002e4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fcf7 	bl	8003bd0 <RCC_SetFlashLatencyFromMSIRange>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e32d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031ec:	f000 fcdc 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4bb3      	ldr	r3, [pc, #716]	; (80034c0 <HAL_RCC_OscConfig+0x388>)
 80031f4:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031f6:	4bb3      	ldr	r3, [pc, #716]	; (80034c4 <HAL_RCC_OscConfig+0x38c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fc06 	bl	8001a0c <HAL_InitTick>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d039      	beq.n	800327a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e31e      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01e      	beq.n	8003250 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003212:	f7ff fdc3 	bl	8002d9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003216:	f7fe fc47 	bl	8001aa8 <HAL_GetTick>
 800321a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321e:	f7fe fc43 	bl	8001aa8 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e30b      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003230:	f7ff fdd2 	bl	8002dd8 <LL_RCC_MSI_IsReady>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f1      	beq.n	800321e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fddb 	bl	8002dfa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fdff 	bl	8002e4c <LL_RCC_MSI_SetCalibTrimming>
 800324e:	e015      	b.n	800327c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003250:	f7ff fdb3 	bl	8002dba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003254:	f7fe fc28 	bl	8001aa8 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325c:	f7fe fc24 	bl	8001aa8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e2ec      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800326e:	f7ff fdb3 	bl	8002dd8 <LL_RCC_MSI_IsReady>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f1      	bne.n	800325c <HAL_RCC_OscConfig+0x124>
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d04e      	beq.n	8003326 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003288:	f7ff fe09 	bl	8002e9e <LL_RCC_GetSysClkSource>
 800328c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328e:	f7ff feea 	bl	8003066 <LL_RCC_PLL_GetMainSource>
 8003292:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x16e>
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d10d      	bne.n	80032bc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d10a      	bne.n	80032bc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a6:	f7ff fc19 	bl	8002adc <LL_RCC_HSE_IsReady>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d039      	beq.n	8003324 <HAL_RCC_OscConfig+0x1ec>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d135      	bne.n	8003324 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e2c5      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_OscConfig+0x194>
 80032c6:	f7ff fbeb 	bl	8002aa0 <LL_RCC_HSE_Enable>
 80032ca:	e001      	b.n	80032d0 <HAL_RCC_OscConfig+0x198>
 80032cc:	f7ff fbf7 	bl	8002abe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fbe6 	bl	8001aa8 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fe fbe2 	bl	8001aa8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e2aa      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80032f2:	f7ff fbf3 	bl	8002adc <LL_RCC_HSE_IsReady>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f1      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1a8>
 80032fc:	e013      	b.n	8003326 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fbd3 	bl	8001aa8 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003306:	f7fe fbcf 	bl	8001aa8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e297      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003318:	f7ff fbe0 	bl	8002adc <LL_RCC_HSE_IsReady>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f1      	bne.n	8003306 <HAL_RCC_OscConfig+0x1ce>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d051      	beq.n	80033d6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	f7ff fdb4 	bl	8002e9e <LL_RCC_GetSysClkSource>
 8003336:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003338:	f7ff fe95 	bl	8003066 <LL_RCC_PLL_GetMainSource>
 800333c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x218>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d113      	bne.n	8003372 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d110      	bne.n	8003372 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	f7ff fbf4 	bl	8002b3c <LL_RCC_HSI_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x22e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e270      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fbf8 	bl	8002b60 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	e031      	b.n	80033d6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d019      	beq.n	80033ae <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337a:	f7ff fbc1 	bl	8002b00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe fb93 	bl	8001aa8 <HAL_GetTick>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003386:	f7fe fb8f 	bl	8001aa8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e257      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003398:	f7ff fbd0 	bl	8002b3c <LL_RCC_HSI_IsReady>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f1      	beq.n	8003386 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fbda 	bl	8002b60 <LL_RCC_HSI_SetCalibTrimming>
 80033ac:	e013      	b.n	80033d6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	f7ff fbb6 	bl	8002b1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe fb79 	bl	8001aa8 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fb75 	bl	8001aa8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e23d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80033cc:	f7ff fbb6 	bl	8002b3c <LL_RCC_HSI_IsReady>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f1      	bne.n	80033ba <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a3 	beq.w	8003536 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d076      	beq.n	80034e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d046      	beq.n	8003492 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003404:	f7ff fc6d 	bl	8002ce2 <LL_RCC_LSI1_IsReady>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d113      	bne.n	8003436 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800340e:	f7ff fc46 	bl	8002c9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003412:	f7fe fb49 	bl	8001aa8 <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800341a:	f7fe fb45 	bl	8001aa8 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e20d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800342c:	f7ff fc59 	bl	8002ce2 <LL_RCC_LSI1_IsReady>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f1      	beq.n	800341a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003436:	f7ff fc66 	bl	8002d06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe fb35 	bl	8001aa8 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003442:	f7fe fb31 	bl	8001aa8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1f9      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003454:	f7ff fc79 	bl	8002d4a <LL_RCC_LSI2_IsReady>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f1      	beq.n	8003442 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fc83 	bl	8002d6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003468:	f7ff fc2a 	bl	8002cc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fb1c 	bl	8001aa8 <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003474:	f7fe fb18 	bl	8001aa8 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1e0      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003486:	f7ff fc2c 	bl	8002ce2 <LL_RCC_LSI1_IsReady>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f1      	bne.n	8003474 <HAL_RCC_OscConfig+0x33c>
 8003490:	e051      	b.n	8003536 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003492:	f7ff fc04 	bl	8002c9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fb07 	bl	8001aa8 <HAL_GetTick>
 800349a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800349e:	f7fe fb03 	bl	8001aa8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1cb      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034b0:	f7ff fc17 	bl	8002ce2 <LL_RCC_LSI1_IsReady>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f1      	beq.n	800349e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80034ba:	f7ff fc35 	bl	8002d28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034be:	e00c      	b.n	80034da <HAL_RCC_OscConfig+0x3a2>
 80034c0:	20000010 	.word	0x20000010
 80034c4:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034c8:	f7fe faee 	bl	8001aa8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1b6      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034da:	f7ff fc36 	bl	8002d4a <LL_RCC_LSI2_IsReady>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f1      	bne.n	80034c8 <HAL_RCC_OscConfig+0x390>
 80034e4:	e027      	b.n	8003536 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80034e6:	f7ff fc1f 	bl	8002d28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe fadd 	bl	8001aa8 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034f2:	f7fe fad9 	bl	8001aa8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a1      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003504:	f7ff fc21 	bl	8002d4a <LL_RCC_LSI2_IsReady>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f1      	bne.n	80034f2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800350e:	f7ff fbd7 	bl	8002cc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fe fac9 	bl	8001aa8 <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800351a:	f7fe fac5 	bl	8001aa8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e18d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800352c:	f7ff fbd9 	bl	8002ce2 <LL_RCC_LSI1_IsReady>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f1      	bne.n	800351a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d05b      	beq.n	80035fa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003542:	4bb5      	ldr	r3, [pc, #724]	; (8003818 <HAL_RCC_OscConfig+0x6e0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d114      	bne.n	8003578 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800354e:	f7ff fa77 	bl	8002a40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe faa9 	bl	8001aa8 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe faa5 	bl	8001aa8 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e16d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4baa      	ldr	r3, [pc, #680]	; (8003818 <HAL_RCC_OscConfig+0x6e0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_RCC_OscConfig+0x44e>
 8003580:	f7ff fb37 	bl	8002bf2 <LL_RCC_LSE_Enable>
 8003584:	e00c      	b.n	80035a0 <HAL_RCC_OscConfig+0x468>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d104      	bne.n	8003598 <HAL_RCC_OscConfig+0x460>
 800358e:	f7ff fb52 	bl	8002c36 <LL_RCC_LSE_EnableBypass>
 8003592:	f7ff fb2e 	bl	8002bf2 <LL_RCC_LSE_Enable>
 8003596:	e003      	b.n	80035a0 <HAL_RCC_OscConfig+0x468>
 8003598:	f7ff fb3c 	bl	8002c14 <LL_RCC_LSE_Disable>
 800359c:	f7ff fb5c 	bl	8002c58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d014      	beq.n	80035d2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fe fa7e 	bl	8001aa8 <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fe fa7a 	bl	8001aa8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e140      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80035c6:	f7ff fb58 	bl	8002c7a <LL_RCC_LSE_IsReady>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ef      	beq.n	80035b0 <HAL_RCC_OscConfig+0x478>
 80035d0:	e013      	b.n	80035fa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fe fa69 	bl	8001aa8 <HAL_GetTick>
 80035d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fe fa65 	bl	8001aa8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e12b      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035f0:	f7ff fb43 	bl	8002c7a <LL_RCC_LSE_IsReady>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ef      	bne.n	80035da <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02c      	beq.n	8003660 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d014      	beq.n	8003638 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800360e:	f7ff fabc 	bl	8002b8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fe fa49 	bl	8001aa8 <HAL_GetTick>
 8003616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361a:	f7fe fa45 	bl	8001aa8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e10d      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800362c:	f7ff facf 	bl	8002bce <LL_RCC_HSI48_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f1      	beq.n	800361a <HAL_RCC_OscConfig+0x4e2>
 8003636:	e013      	b.n	8003660 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003638:	f7ff fab8 	bl	8002bac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fa34 	bl	8001aa8 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003644:	f7fe fa30 	bl	8001aa8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0f8      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003656:	f7ff faba 	bl	8002bce <LL_RCC_HSI48_IsReady>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f1      	bne.n	8003644 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80ee 	beq.w	8003846 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366a:	f7ff fc18 	bl	8002e9e <LL_RCC_GetSysClkSource>
 800366e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	2b02      	cmp	r3, #2
 800367e:	f040 80af 	bne.w	80037e0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0203 	and.w	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	429a      	cmp	r2, r3
 800368e:	d123      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d114      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d05d      	beq.n	8003794 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d058      	beq.n	8003790 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0ab      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036f0:	f7ff fc73 	bl	8002fda <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f4:	f7fe f9d8 	bl	8001aa8 <HAL_GetTick>
 80036f8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe f9d4 	bl	8001aa8 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e09c      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ef      	bne.n	80036fc <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCC_OscConfig+0x6e4>)
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003734:	0212      	lsls	r2, r2, #8
 8003736:	4311      	orrs	r1, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003748:	430a      	orrs	r2, r1
 800374a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374e:	4313      	orrs	r3, r2
 8003750:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003752:	f7ff fc33 	bl	8002fbc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003766:	f7fe f99f 	bl	8001aa8 <HAL_GetTick>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe f99b 	bl	8001aa8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e063      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ef      	beq.n	800376e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378e:	e05a      	b.n	8003846 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e059      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d151      	bne.n	8003846 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037a2:	f7ff fc0b 	bl	8002fbc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037b6:	f7fe f977 	bl	8001aa8 <HAL_GetTick>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe f973 	bl	8001aa8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e03b      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ef      	beq.n	80037be <HAL_RCC_OscConfig+0x686>
 80037de:	e032      	b.n	8003846 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d02d      	beq.n	8003842 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	f7ff fbf8 	bl	8002fda <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f4:	f023 0303 	bic.w	r3, r3, #3
 80037f8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003804:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe f94b 	bl	8001aa8 <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	e00d      	b.n	8003832 <HAL_RCC_OscConfig+0x6fa>
 8003816:	bf00      	nop
 8003818:	58000400 	.word	0x58000400
 800381c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fe f942 	bl	8001aa8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ef      	bne.n	8003820 <HAL_RCC_OscConfig+0x6e8>
 8003840:	e001      	b.n	8003846 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3734      	adds	r7, #52	; 0x34
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e12d      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b98      	ldr	r3, [pc, #608]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d91b      	bls.n	80038aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b95      	ldr	r3, [pc, #596]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4993      	ldr	r1, [pc, #588]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003882:	f7fe f911 	bl	8001aa8 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003888:	e008      	b.n	800389c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800388a:	f7fe f90d 	bl	8001aa8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e111      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389c:	4b8a      	ldr	r3, [pc, #552]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d1ef      	bne.n	800388a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fafb 	bl	8002eb6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038c0:	f7fe f8f2 	bl	8001aa8 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038c8:	f7fe f8ee 	bl	8001aa8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0f2      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038da:	f7ff fbd0 	bl	800307e <LL_RCC_IsActiveFlag_HPRE>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f1      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d016      	beq.n	800391e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff faf2 	bl	8002ede <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038fa:	f7fe f8d5 	bl	8001aa8 <HAL_GetTick>
 80038fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003902:	f7fe f8d1 	bl	8001aa8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0d5      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003914:	f7ff fbc5 	bl	80030a2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f1      	beq.n	8003902 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff faeb 	bl	8002f0a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003934:	f7fe f8b8 	bl	8001aa8 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800393c:	f7fe f8b4 	bl	8001aa8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0b8      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800394e:	f7ff fbbb 	bl	80030c8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f1      	beq.n	800393c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d016      	beq.n	8003992 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fae5 	bl	8002f38 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800396e:	f7fe f89b 	bl	8001aa8 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003976:	f7fe f897 	bl	8001aa8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e09b      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003988:	f7ff fbb1 	bl	80030ee <LL_RCC_IsActiveFlag_PPRE1>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f1      	beq.n	8003976 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fadb 	bl	8002f60 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039aa:	f7fe f87d 	bl	8001aa8 <HAL_GetTick>
 80039ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039b2:	f7fe f879 	bl	8001aa8 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e07d      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039c4:	f7ff fba5 	bl	8003112 <LL_RCC_IsActiveFlag_PPRE2>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f1      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d043      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80039e2:	f7ff f87b 	bl	8002adc <LL_RCC_HSE_IsReady>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11e      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e067      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80039f8:	f7ff fafe 	bl	8002ff8 <LL_RCC_PLL_IsReady>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e05c      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a0e:	f7ff f9e3 	bl	8002dd8 <LL_RCC_MSI_IsReady>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d108      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e051      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a1c:	f7ff f88e 	bl	8002b3c <LL_RCC_HSI_IsReady>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e04a      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fa21 	bl	8002e76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fe f838 	bl	8001aa8 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fe f834 	bl	8001aa8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e036      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	f7ff fa24 	bl	8002e9e <LL_RCC_GetSysClkSource>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d1ec      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d21b      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a70:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 0207 	bic.w	r2, r3, #7
 8003a78:	4913      	ldr	r1, [pc, #76]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fe f812 	bl	8001aa8 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a88:	f7fe f80e 	bl	8001aa8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e012      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_ClockConfig+0x278>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1ef      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003aa8:	f000 f87e 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <HAL_RCC_ClockConfig+0x27c>)
 8003ab0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003ab2:	f7fe f805 	bl	8001ac0 <HAL_GetTickPrio>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd ffa7 	bl	8001a0c <HAL_InitTick>
 8003abe:	4603      	mov	r3, r0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	58004000 	.word	0x58004000
 8003acc:	20000010 	.word	0x20000010

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	f7ff f9e2 	bl	8002e9e <LL_RCC_GetSysClkSource>
 8003ada:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ae2:	f7ff f99e 	bl	8002e22 <LL_RCC_MSI_GetRange>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e04a      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003afe:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e044      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d10a      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b0a:	f7fe ffb7 	bl	8002a7c <LL_RCC_HSE_IsEnabledDiv2>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b14:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e039      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e036      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b20:	f7ff faa1 	bl	8003066 <LL_RCC_PLL_GetMainSource>
 8003b24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d002      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x62>
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d003      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x68>
 8003b30:	e00d      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b34:	60bb      	str	r3, [r7, #8]
        break;
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b38:	f7fe ffa0 	bl	8002a7c <LL_RCC_HSE_IsEnabledDiv2>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b44:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b46:	e00d      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b4a:	60bb      	str	r3, [r7, #8]
        break;
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b4e:	f7ff f968 	bl	8002e22 <LL_RCC_MSI_GetRange>
 8003b52:	4603      	mov	r3, r0
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b60:	60bb      	str	r3, [r7, #8]
        break;
 8003b62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003b64:	f7ff fa5a 	bl	800301c <LL_RCC_PLL_GetN>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	fb03 f402 	mul.w	r4, r3, r2
 8003b70:	f7ff fa6d 	bl	800304e <LL_RCC_PLL_GetDivider>
 8003b74:	4603      	mov	r3, r0
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	3301      	adds	r3, #1
 8003b7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b7e:	f7ff fa5a 	bl	8003036 <LL_RCC_PLL_GetR>
 8003b82:	4603      	mov	r3, r0
 8003b84:	0f5b      	lsrs	r3, r3, #29
 8003b86:	3301      	adds	r3, #1
 8003b88:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	08008d38 	.word	0x08008d38
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	003d0900 	.word	0x003d0900
 8003ba4:	007a1200 	.word	0x007a1200

08003ba8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b598      	push	{r3, r4, r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003bac:	f7ff ff90 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	f7ff f9e9 	bl	8002f88 <LL_RCC_GetAHBPrescaler>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a03      	ldr	r2, [pc, #12]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x24>)
 8003bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd98      	pop	{r3, r4, r7, pc}
 8003bcc:	08008cf8 	.word	0x08008cf8

08003bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2bb0      	cmp	r3, #176	; 0xb0
 8003bdc:	d903      	bls.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e007      	b.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003bf6:	f7ff f9d3 	bl	8002fa0 <LL_RCC_GetAHB4Prescaler>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	0c9c      	lsrs	r4, r3, #18
 8003c1a:	f7fe ff21 	bl	8002a60 <HAL_PWREx_GetVoltageRange>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4619      	mov	r1, r3
 8003c22:	4620      	mov	r0, r4
 8003c24:	f000 f80c 	bl	8003c40 <RCC_SetFlashLatency>
 8003c28:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	bf00      	nop
 8003c34:	08008d38 	.word	0x08008d38
 8003c38:	08008cf8 	.word	0x08008cf8
 8003c3c:	431bde83 	.word	0x431bde83

08003c40 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b093      	sub	sp, #76	; 0x4c
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <RCC_SetFlashLatency+0xf0>)
 8003c4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003c56:	4a37      	ldr	r2, [pc, #220]	; (8003d34 <RCC_SetFlashLatency+0xf4>)
 8003c58:	f107 031c 	add.w	r3, r7, #28
 8003c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c62:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <RCC_SetFlashLatency+0xf8>)
 8003c64:	f107 040c 	add.w	r4, r7, #12
 8003c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c6e:	2300      	movs	r3, #0
 8003c70:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d11c      	bne.n	8003cb4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7e:	e015      	b.n	8003cac <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c88:	4413      	add	r3, r2
 8003c8a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d808      	bhi.n	8003ca6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ca2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ca4:	e022      	b.n	8003cec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	3301      	adds	r3, #1
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
 8003cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d9e6      	bls.n	8003c80 <RCC_SetFlashLatency+0x40>
 8003cb2:	e01b      	b.n	8003cec <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb8:	e015      	b.n	8003ce6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d808      	bhi.n	8003ce0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003cde:	e005      	b.n	8003cec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d9e6      	bls.n	8003cba <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <RCC_SetFlashLatency+0xfc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	4911      	ldr	r1, [pc, #68]	; (8003d3c <RCC_SetFlashLatency+0xfc>)
 8003cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cfc:	f7fd fed4 	bl	8001aa8 <HAL_GetTick>
 8003d00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d02:	e008      	b.n	8003d16 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d04:	f7fd fed0 	bl	8001aa8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e007      	b.n	8003d26 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <RCC_SetFlashLatency+0xfc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1ef      	bne.n	8003d04 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	374c      	adds	r7, #76	; 0x4c
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd90      	pop	{r4, r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	08008ccc 	.word	0x08008ccc
 8003d34:	08008cdc 	.word	0x08008cdc
 8003d38:	08008ce8 	.word	0x08008ce8
 8003d3c:	58004000 	.word	0x58004000

08003d40 <LL_RCC_LSE_IsEnabled>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <LL_RCC_LSE_IsEnabled+0x18>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <LL_RCC_LSE_IsEnabled+0x1a>
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_LSE_IsReady>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d101      	bne.n	8003d7c <LL_RCC_LSE_IsReady+0x18>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <LL_RCC_LSE_IsReady+0x1a>
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_SetRFWKPClockSource>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_SetSMPSClockSource>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_SetSMPSPrescaler>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_RCC_SetUSARTClockSource>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 0203 	bic.w	r2, r3, #3
 8003e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_RCC_SetLPUARTClockSource>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_SetI2CClockSource>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e74:	43db      	mvns	r3, r3
 8003e76:	401a      	ands	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_SetLPTIMClockSource>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	43db      	mvns	r3, r3
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_RCC_SetSAIClockSource>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_RCC_SetRNGClockSource>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_SetCLK48ClockSource>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_SetUSBClockSource>:
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffe3 	bl	8003f22 <LL_RCC_SetCLK48ClockSource>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <LL_RCC_SetADCClockSource>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_SetRTCClockSource>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_GetRTCClockSource>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_ForceBackupDomainReset>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_RCC_PLLSAI1_Enable>:
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_RCC_PLLSAI1_Disable>:
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <LL_RCC_PLLSAI1_IsReady>:
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004068:	d101      	bne.n	800406e <LL_RCC_PLLSAI1_IsReady+0x18>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b088      	sub	sp, #32
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004082:	2300      	movs	r3, #0
 8004084:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004086:	2300      	movs	r3, #0
 8004088:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d033      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409e:	d00c      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40>
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d802      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x32>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040aa:	e017      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b0:	d017      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80040b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b6:	d016      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80040b8:	e010      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80040ca:	e00d      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f947 	bl	8004364 <RCCEx_PLLSAI1_ConfigNP>
 80040d6:	4603      	mov	r3, r0
 80040d8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040da:	e005      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	77fb      	strb	r3, [r7, #31]
        break;
 80040e0:	e002      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80040e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e8:	7ffb      	ldrb	r3, [r7, #31]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fee9 	bl	8003eca <LL_RCC_SetSAIClockSource>
 80040f8:	e001      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	2b00      	cmp	r3, #0
 8004108:	d046      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800410a:	f7ff ff57 	bl	8003fbc <LL_RCC_GetRTCClockSource>
 800410e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d03c      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800411a:	f7fe fc91 	bl	8002a40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff31 	bl	8003f90 <LL_RCC_SetRTCClockSource>
 800412e:	e02e      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800413a:	f7ff ff4c 	bl	8003fd6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800413e:	f7ff ff5b 	bl	8003ff8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800415a:	f7ff fdf1 	bl	8003d40 <LL_RCC_LSE_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d114      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004164:	f7fd fca0 	bl	8001aa8 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800416a:	e00b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fd fc9c 	bl	8001aa8 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d902      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	77fb      	strb	r3, [r7, #31]
              break;
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004184:	f7ff fdee 	bl	8003d64 <LL_RCC_LSE_IsReady>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d1ee      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800418e:	7ffb      	ldrb	r3, [r7, #31]
 8004190:	77bb      	strb	r3, [r7, #30]
 8004192:	e001      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fe2b 	bl	8003e04 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fe36 	bl	8003e30 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fe5e 	bl	8003e96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fe53 	bl	8003e96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fe2b 	bl	8003e5c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fe20 	bl	8003e5c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d022      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe8e 	bl	8003f4e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d107      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004254:	d10b      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f8dd 	bl	800441a <RCCEx_PLLSAI1_ConfigNQ>
 8004260:	4603      	mov	r3, r0
 8004262:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004264:	7ffb      	ldrb	r3, [r7, #31]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800426a:	7ffb      	ldrb	r3, [r7, #31]
 800426c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02b      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d008      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800428c:	d003      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	2b00      	cmp	r3, #0
 8004294:	d105      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fe2b 	bl	8003ef6 <LL_RCC_SetRNGClockSource>
 80042a0:	e00a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7ff fe22 	bl	8003ef6 <LL_RCC_SetRNGClockSource>
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fe35 	bl	8003f22 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80042c0:	d107      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d022      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe3e 	bl	8003f64 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f0:	d107      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004300:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800430a:	d10b      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f8dd 	bl	80044d0 <RCCEx_PLLSAI1_ConfigNR>
 8004316:	4603      	mov	r3, r0
 8004318:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800431a:	7ffb      	ldrb	r3, [r7, #31]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004320:	7ffb      	ldrb	r3, [r7, #31]
 8004322:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fd27 	bl	8003d88 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fd46 	bl	8003ddc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fd2d 	bl	8003db4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800435a:	7fbb      	ldrb	r3, [r7, #30]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004370:	f7ff fe62 	bl	8004038 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004374:	f7fd fb98 	bl	8001aa8 <HAL_GetTick>
 8004378:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800437a:	e009      	b.n	8004390 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800437c:	f7fd fb94 	bl	8001aa8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d902      	bls.n	8004390 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	73fb      	strb	r3, [r7, #15]
      break;
 800438e:	e004      	b.n	800439a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004390:	f7ff fe61 	bl	8004056 <LL_RCC_PLLSAI1_IsReady>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d137      	bne.n	8004410 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b4:	4313      	orrs	r3, r2
 80043b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80043b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ca:	4313      	orrs	r3, r2
 80043cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043ce:	f7ff fe24 	bl	800401a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d2:	f7fd fb69 	bl	8001aa8 <HAL_GetTick>
 80043d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043d8:	e009      	b.n	80043ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043da:	f7fd fb65 	bl	8001aa8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d902      	bls.n	80043ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	73fb      	strb	r3, [r7, #15]
        break;
 80043ec:	e004      	b.n	80043f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043ee:	f7ff fe32 	bl	8004056 <LL_RCC_PLLSAI1_IsReady>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d1f0      	bne.n	80043da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800440c:	4313      	orrs	r3, r2
 800440e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004426:	f7ff fe07 	bl	8004038 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800442a:	f7fd fb3d 	bl	8001aa8 <HAL_GetTick>
 800442e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004430:	e009      	b.n	8004446 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004432:	f7fd fb39 	bl	8001aa8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d902      	bls.n	8004446 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e004      	b.n	8004450 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004446:	f7ff fe06 	bl	8004056 <LL_RCC_PLLSAI1_IsReady>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d137      	bne.n	80044c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800446a:	4313      	orrs	r3, r2
 800446c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800446e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004480:	4313      	orrs	r3, r2
 8004482:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004484:	f7ff fdc9 	bl	800401a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004488:	f7fd fb0e 	bl	8001aa8 <HAL_GetTick>
 800448c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800448e:	e009      	b.n	80044a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004490:	f7fd fb0a 	bl	8001aa8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d902      	bls.n	80044a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	73fb      	strb	r3, [r7, #15]
        break;
 80044a2:	e004      	b.n	80044ae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044a4:	f7ff fdd7 	bl	8004056 <LL_RCC_PLLSAI1_IsReady>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d1f0      	bne.n	8004490 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d108      	bne.n	80044c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044c2:	4313      	orrs	r3, r2
 80044c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044dc:	f7ff fdac 	bl	8004038 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044e0:	f7fd fae2 	bl	8001aa8 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e8:	f7fd fade 	bl	8001aa8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
      break;
 80044fa:	e004      	b.n	8004506 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044fc:	f7ff fdab 	bl	8004056 <LL_RCC_PLLSAI1_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d137      	bne.n	800457c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800450c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004520:	4313      	orrs	r3, r2
 8004522:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800453a:	f7ff fd6e 	bl	800401a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453e:	f7fd fab3 	bl	8001aa8 <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004544:	e009      	b.n	800455a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004546:	f7fd faaf 	bl	8001aa8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d902      	bls.n	800455a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	73fb      	strb	r3, [r7, #15]
        break;
 8004558:	e004      	b.n	8004564 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800455a:	f7ff fd7c 	bl	8004056 <LL_RCC_PLLSAI1_IsReady>
 800455e:	4603      	mov	r3, r0
 8004560:	2b01      	cmp	r3, #1
 8004562:	d1f0      	bne.n	8004546 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004578:	4313      	orrs	r3, r2
 800457a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <__errno>:
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <__errno+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	2000001c 	.word	0x2000001c

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4e0d      	ldr	r6, [pc, #52]	; (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	; (80045d0 <__libc_init_array+0x3c>)
 800459a:	1ba4      	subs	r4, r4, r6
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2500      	movs	r5, #0
 80045a0:	42a5      	cmp	r5, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4e0b      	ldr	r6, [pc, #44]	; (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	; (80045d8 <__libc_init_array+0x44>)
 80045a8:	f004 fa60 	bl	8008a6c <_init>
 80045ac:	1ba4      	subs	r4, r4, r6
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2500      	movs	r5, #0
 80045b2:	42a5      	cmp	r5, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045bc:	4798      	blx	r3
 80045be:	3501      	adds	r5, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c6:	4798      	blx	r3
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	08009098 	.word	0x08009098
 80045d0:	08009098 	.word	0x08009098
 80045d4:	08009098 	.word	0x08009098
 80045d8:	0800909c 	.word	0x0800909c

080045dc <memcpy>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	1e43      	subs	r3, r0, #1
 80045e0:	440a      	add	r2, r1
 80045e2:	4291      	cmp	r1, r2
 80045e4:	d100      	bne.n	80045e8 <memcpy+0xc>
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f0:	e7f7      	b.n	80045e2 <memcpy+0x6>

080045f2 <memset>:
 80045f2:	4402      	add	r2, r0
 80045f4:	4603      	mov	r3, r0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d100      	bne.n	80045fc <memset+0xa>
 80045fa:	4770      	bx	lr
 80045fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004600:	e7f9      	b.n	80045f6 <memset+0x4>

08004602 <__cvt>:
 8004602:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004606:	ec55 4b10 	vmov	r4, r5, d0
 800460a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800460c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004610:	2d00      	cmp	r5, #0
 8004612:	460e      	mov	r6, r1
 8004614:	4691      	mov	r9, r2
 8004616:	4619      	mov	r1, r3
 8004618:	bfb8      	it	lt
 800461a:	4622      	movlt	r2, r4
 800461c:	462b      	mov	r3, r5
 800461e:	f027 0720 	bic.w	r7, r7, #32
 8004622:	bfbb      	ittet	lt
 8004624:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004628:	461d      	movlt	r5, r3
 800462a:	2300      	movge	r3, #0
 800462c:	232d      	movlt	r3, #45	; 0x2d
 800462e:	bfb8      	it	lt
 8004630:	4614      	movlt	r4, r2
 8004632:	2f46      	cmp	r7, #70	; 0x46
 8004634:	700b      	strb	r3, [r1, #0]
 8004636:	d004      	beq.n	8004642 <__cvt+0x40>
 8004638:	2f45      	cmp	r7, #69	; 0x45
 800463a:	d100      	bne.n	800463e <__cvt+0x3c>
 800463c:	3601      	adds	r6, #1
 800463e:	2102      	movs	r1, #2
 8004640:	e000      	b.n	8004644 <__cvt+0x42>
 8004642:	2103      	movs	r1, #3
 8004644:	ab03      	add	r3, sp, #12
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	ab02      	add	r3, sp, #8
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4632      	mov	r2, r6
 800464e:	4653      	mov	r3, sl
 8004650:	ec45 4b10 	vmov	d0, r4, r5
 8004654:	f001 feb4 	bl	80063c0 <_dtoa_r>
 8004658:	2f47      	cmp	r7, #71	; 0x47
 800465a:	4680      	mov	r8, r0
 800465c:	d102      	bne.n	8004664 <__cvt+0x62>
 800465e:	f019 0f01 	tst.w	r9, #1
 8004662:	d026      	beq.n	80046b2 <__cvt+0xb0>
 8004664:	2f46      	cmp	r7, #70	; 0x46
 8004666:	eb08 0906 	add.w	r9, r8, r6
 800466a:	d111      	bne.n	8004690 <__cvt+0x8e>
 800466c:	f898 3000 	ldrb.w	r3, [r8]
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d10a      	bne.n	800468a <__cvt+0x88>
 8004674:	2200      	movs	r2, #0
 8004676:	2300      	movs	r3, #0
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	f7fc f9fc 	bl	8000a78 <__aeabi_dcmpeq>
 8004680:	b918      	cbnz	r0, 800468a <__cvt+0x88>
 8004682:	f1c6 0601 	rsb	r6, r6, #1
 8004686:	f8ca 6000 	str.w	r6, [sl]
 800468a:	f8da 3000 	ldr.w	r3, [sl]
 800468e:	4499      	add	r9, r3
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	4620      	mov	r0, r4
 8004696:	4629      	mov	r1, r5
 8004698:	f7fc f9ee 	bl	8000a78 <__aeabi_dcmpeq>
 800469c:	b938      	cbnz	r0, 80046ae <__cvt+0xac>
 800469e:	2230      	movs	r2, #48	; 0x30
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	454b      	cmp	r3, r9
 80046a4:	d205      	bcs.n	80046b2 <__cvt+0xb0>
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	9103      	str	r1, [sp, #12]
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e7f8      	b.n	80046a0 <__cvt+0x9e>
 80046ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046b6:	eba3 0308 	sub.w	r3, r3, r8
 80046ba:	4640      	mov	r0, r8
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	b004      	add	sp, #16
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046c4 <__exponent>:
 80046c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c6:	2900      	cmp	r1, #0
 80046c8:	4604      	mov	r4, r0
 80046ca:	bfba      	itte	lt
 80046cc:	4249      	neglt	r1, r1
 80046ce:	232d      	movlt	r3, #45	; 0x2d
 80046d0:	232b      	movge	r3, #43	; 0x2b
 80046d2:	2909      	cmp	r1, #9
 80046d4:	f804 2b02 	strb.w	r2, [r4], #2
 80046d8:	7043      	strb	r3, [r0, #1]
 80046da:	dd20      	ble.n	800471e <__exponent+0x5a>
 80046dc:	f10d 0307 	add.w	r3, sp, #7
 80046e0:	461f      	mov	r7, r3
 80046e2:	260a      	movs	r6, #10
 80046e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80046e8:	fb06 1115 	mls	r1, r6, r5, r1
 80046ec:	3130      	adds	r1, #48	; 0x30
 80046ee:	2d09      	cmp	r5, #9
 80046f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046f4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80046f8:	4629      	mov	r1, r5
 80046fa:	dc09      	bgt.n	8004710 <__exponent+0x4c>
 80046fc:	3130      	adds	r1, #48	; 0x30
 80046fe:	3b02      	subs	r3, #2
 8004700:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004704:	42bb      	cmp	r3, r7
 8004706:	4622      	mov	r2, r4
 8004708:	d304      	bcc.n	8004714 <__exponent+0x50>
 800470a:	1a10      	subs	r0, r2, r0
 800470c:	b003      	add	sp, #12
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	4613      	mov	r3, r2
 8004712:	e7e7      	b.n	80046e4 <__exponent+0x20>
 8004714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004718:	f804 2b01 	strb.w	r2, [r4], #1
 800471c:	e7f2      	b.n	8004704 <__exponent+0x40>
 800471e:	2330      	movs	r3, #48	; 0x30
 8004720:	4419      	add	r1, r3
 8004722:	7083      	strb	r3, [r0, #2]
 8004724:	1d02      	adds	r2, r0, #4
 8004726:	70c1      	strb	r1, [r0, #3]
 8004728:	e7ef      	b.n	800470a <__exponent+0x46>
	...

0800472c <_printf_float>:
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	b08d      	sub	sp, #52	; 0x34
 8004732:	460c      	mov	r4, r1
 8004734:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004738:	4616      	mov	r6, r2
 800473a:	461f      	mov	r7, r3
 800473c:	4605      	mov	r5, r0
 800473e:	f003 f89d 	bl	800787c <_localeconv_r>
 8004742:	6803      	ldr	r3, [r0, #0]
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fb fd1a 	bl	8000180 <strlen>
 800474c:	2300      	movs	r3, #0
 800474e:	930a      	str	r3, [sp, #40]	; 0x28
 8004750:	f8d8 3000 	ldr.w	r3, [r8]
 8004754:	9005      	str	r0, [sp, #20]
 8004756:	3307      	adds	r3, #7
 8004758:	f023 0307 	bic.w	r3, r3, #7
 800475c:	f103 0208 	add.w	r2, r3, #8
 8004760:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004764:	f8d4 b000 	ldr.w	fp, [r4]
 8004768:	f8c8 2000 	str.w	r2, [r8]
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004774:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004778:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800477c:	9307      	str	r3, [sp, #28]
 800477e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004786:	4ba7      	ldr	r3, [pc, #668]	; (8004a24 <_printf_float+0x2f8>)
 8004788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800478c:	f7fc f9a6 	bl	8000adc <__aeabi_dcmpun>
 8004790:	bb70      	cbnz	r0, 80047f0 <_printf_float+0xc4>
 8004792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004796:	4ba3      	ldr	r3, [pc, #652]	; (8004a24 <_printf_float+0x2f8>)
 8004798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800479c:	f7fc f980 	bl	8000aa0 <__aeabi_dcmple>
 80047a0:	bb30      	cbnz	r0, 80047f0 <_printf_float+0xc4>
 80047a2:	2200      	movs	r2, #0
 80047a4:	2300      	movs	r3, #0
 80047a6:	4640      	mov	r0, r8
 80047a8:	4649      	mov	r1, r9
 80047aa:	f7fc f96f 	bl	8000a8c <__aeabi_dcmplt>
 80047ae:	b110      	cbz	r0, 80047b6 <_printf_float+0x8a>
 80047b0:	232d      	movs	r3, #45	; 0x2d
 80047b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b6:	4a9c      	ldr	r2, [pc, #624]	; (8004a28 <_printf_float+0x2fc>)
 80047b8:	4b9c      	ldr	r3, [pc, #624]	; (8004a2c <_printf_float+0x300>)
 80047ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047be:	bf8c      	ite	hi
 80047c0:	4690      	movhi	r8, r2
 80047c2:	4698      	movls	r8, r3
 80047c4:	2303      	movs	r3, #3
 80047c6:	f02b 0204 	bic.w	r2, fp, #4
 80047ca:	6123      	str	r3, [r4, #16]
 80047cc:	6022      	str	r2, [r4, #0]
 80047ce:	f04f 0900 	mov.w	r9, #0
 80047d2:	9700      	str	r7, [sp, #0]
 80047d4:	4633      	mov	r3, r6
 80047d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 f9e6 	bl	8004bac <_printf_common>
 80047e0:	3001      	adds	r0, #1
 80047e2:	f040 808d 	bne.w	8004900 <_printf_float+0x1d4>
 80047e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ea:	b00d      	add	sp, #52	; 0x34
 80047ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	4640      	mov	r0, r8
 80047f6:	4649      	mov	r1, r9
 80047f8:	f7fc f970 	bl	8000adc <__aeabi_dcmpun>
 80047fc:	b110      	cbz	r0, 8004804 <_printf_float+0xd8>
 80047fe:	4a8c      	ldr	r2, [pc, #560]	; (8004a30 <_printf_float+0x304>)
 8004800:	4b8c      	ldr	r3, [pc, #560]	; (8004a34 <_printf_float+0x308>)
 8004802:	e7da      	b.n	80047ba <_printf_float+0x8e>
 8004804:	6861      	ldr	r1, [r4, #4]
 8004806:	1c4b      	adds	r3, r1, #1
 8004808:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800480c:	a80a      	add	r0, sp, #40	; 0x28
 800480e:	d13e      	bne.n	800488e <_printf_float+0x162>
 8004810:	2306      	movs	r3, #6
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	2300      	movs	r3, #0
 8004816:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800481a:	ab09      	add	r3, sp, #36	; 0x24
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	ec49 8b10 	vmov	d0, r8, r9
 8004822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004826:	6022      	str	r2, [r4, #0]
 8004828:	f8cd a004 	str.w	sl, [sp, #4]
 800482c:	6861      	ldr	r1, [r4, #4]
 800482e:	4628      	mov	r0, r5
 8004830:	f7ff fee7 	bl	8004602 <__cvt>
 8004834:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004838:	2b47      	cmp	r3, #71	; 0x47
 800483a:	4680      	mov	r8, r0
 800483c:	d109      	bne.n	8004852 <_printf_float+0x126>
 800483e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004840:	1cd8      	adds	r0, r3, #3
 8004842:	db02      	blt.n	800484a <_printf_float+0x11e>
 8004844:	6862      	ldr	r2, [r4, #4]
 8004846:	4293      	cmp	r3, r2
 8004848:	dd47      	ble.n	80048da <_printf_float+0x1ae>
 800484a:	f1aa 0a02 	sub.w	sl, sl, #2
 800484e:	fa5f fa8a 	uxtb.w	sl, sl
 8004852:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004856:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004858:	d824      	bhi.n	80048a4 <_printf_float+0x178>
 800485a:	3901      	subs	r1, #1
 800485c:	4652      	mov	r2, sl
 800485e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004862:	9109      	str	r1, [sp, #36]	; 0x24
 8004864:	f7ff ff2e 	bl	80046c4 <__exponent>
 8004868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800486a:	1813      	adds	r3, r2, r0
 800486c:	2a01      	cmp	r2, #1
 800486e:	4681      	mov	r9, r0
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	dc02      	bgt.n	800487a <_printf_float+0x14e>
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	07d1      	lsls	r1, r2, #31
 8004878:	d501      	bpl.n	800487e <_printf_float+0x152>
 800487a:	3301      	adds	r3, #1
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0a5      	beq.n	80047d2 <_printf_float+0xa6>
 8004886:	232d      	movs	r3, #45	; 0x2d
 8004888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488c:	e7a1      	b.n	80047d2 <_printf_float+0xa6>
 800488e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004892:	f000 8177 	beq.w	8004b84 <_printf_float+0x458>
 8004896:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800489a:	d1bb      	bne.n	8004814 <_printf_float+0xe8>
 800489c:	2900      	cmp	r1, #0
 800489e:	d1b9      	bne.n	8004814 <_printf_float+0xe8>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e7b6      	b.n	8004812 <_printf_float+0xe6>
 80048a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80048a8:	d119      	bne.n	80048de <_printf_float+0x1b2>
 80048aa:	2900      	cmp	r1, #0
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	dd0c      	ble.n	80048ca <_printf_float+0x19e>
 80048b0:	6121      	str	r1, [r4, #16]
 80048b2:	b913      	cbnz	r3, 80048ba <_printf_float+0x18e>
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	07d2      	lsls	r2, r2, #31
 80048b8:	d502      	bpl.n	80048c0 <_printf_float+0x194>
 80048ba:	3301      	adds	r3, #1
 80048bc:	440b      	add	r3, r1
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80048c4:	f04f 0900 	mov.w	r9, #0
 80048c8:	e7d9      	b.n	800487e <_printf_float+0x152>
 80048ca:	b913      	cbnz	r3, 80048d2 <_printf_float+0x1a6>
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	07d0      	lsls	r0, r2, #31
 80048d0:	d501      	bpl.n	80048d6 <_printf_float+0x1aa>
 80048d2:	3302      	adds	r3, #2
 80048d4:	e7f3      	b.n	80048be <_printf_float+0x192>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e7f1      	b.n	80048be <_printf_float+0x192>
 80048da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80048de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80048e2:	4293      	cmp	r3, r2
 80048e4:	db05      	blt.n	80048f2 <_printf_float+0x1c6>
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	07d1      	lsls	r1, r2, #31
 80048ec:	d5e8      	bpl.n	80048c0 <_printf_float+0x194>
 80048ee:	3301      	adds	r3, #1
 80048f0:	e7e5      	b.n	80048be <_printf_float+0x192>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfd4      	ite	le
 80048f6:	f1c3 0302 	rsble	r3, r3, #2
 80048fa:	2301      	movgt	r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	e7de      	b.n	80048be <_printf_float+0x192>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	055a      	lsls	r2, r3, #21
 8004904:	d407      	bmi.n	8004916 <_printf_float+0x1ea>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	4642      	mov	r2, r8
 800490a:	4631      	mov	r1, r6
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	d12b      	bne.n	800496c <_printf_float+0x240>
 8004914:	e767      	b.n	80047e6 <_printf_float+0xba>
 8004916:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800491a:	f240 80dc 	bls.w	8004ad6 <_printf_float+0x3aa>
 800491e:	2200      	movs	r2, #0
 8004920:	2300      	movs	r3, #0
 8004922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004926:	f7fc f8a7 	bl	8000a78 <__aeabi_dcmpeq>
 800492a:	2800      	cmp	r0, #0
 800492c:	d033      	beq.n	8004996 <_printf_float+0x26a>
 800492e:	2301      	movs	r3, #1
 8004930:	4a41      	ldr	r2, [pc, #260]	; (8004a38 <_printf_float+0x30c>)
 8004932:	4631      	mov	r1, r6
 8004934:	4628      	mov	r0, r5
 8004936:	47b8      	blx	r7
 8004938:	3001      	adds	r0, #1
 800493a:	f43f af54 	beq.w	80047e6 <_printf_float+0xba>
 800493e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004942:	429a      	cmp	r2, r3
 8004944:	db02      	blt.n	800494c <_printf_float+0x220>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	07d8      	lsls	r0, r3, #31
 800494a:	d50f      	bpl.n	800496c <_printf_float+0x240>
 800494c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f af45 	beq.w	80047e6 <_printf_float+0xba>
 800495c:	f04f 0800 	mov.w	r8, #0
 8004960:	f104 091a 	add.w	r9, r4, #26
 8004964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	4543      	cmp	r3, r8
 800496a:	dc09      	bgt.n	8004980 <_printf_float+0x254>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	079b      	lsls	r3, r3, #30
 8004970:	f100 8103 	bmi.w	8004b7a <_printf_float+0x44e>
 8004974:	68e0      	ldr	r0, [r4, #12]
 8004976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004978:	4298      	cmp	r0, r3
 800497a:	bfb8      	it	lt
 800497c:	4618      	movlt	r0, r3
 800497e:	e734      	b.n	80047ea <_printf_float+0xbe>
 8004980:	2301      	movs	r3, #1
 8004982:	464a      	mov	r2, r9
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	f43f af2b 	beq.w	80047e6 <_printf_float+0xba>
 8004990:	f108 0801 	add.w	r8, r8, #1
 8004994:	e7e6      	b.n	8004964 <_printf_float+0x238>
 8004996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	dc2b      	bgt.n	80049f4 <_printf_float+0x2c8>
 800499c:	2301      	movs	r3, #1
 800499e:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <_printf_float+0x30c>)
 80049a0:	4631      	mov	r1, r6
 80049a2:	4628      	mov	r0, r5
 80049a4:	47b8      	blx	r7
 80049a6:	3001      	adds	r0, #1
 80049a8:	f43f af1d 	beq.w	80047e6 <_printf_float+0xba>
 80049ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ae:	b923      	cbnz	r3, 80049ba <_printf_float+0x28e>
 80049b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b2:	b913      	cbnz	r3, 80049ba <_printf_float+0x28e>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	07d9      	lsls	r1, r3, #31
 80049b8:	d5d8      	bpl.n	800496c <_printf_float+0x240>
 80049ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	f43f af0e 	beq.w	80047e6 <_printf_float+0xba>
 80049ca:	f04f 0900 	mov.w	r9, #0
 80049ce:	f104 0a1a 	add.w	sl, r4, #26
 80049d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d4:	425b      	negs	r3, r3
 80049d6:	454b      	cmp	r3, r9
 80049d8:	dc01      	bgt.n	80049de <_printf_float+0x2b2>
 80049da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049dc:	e794      	b.n	8004908 <_printf_float+0x1dc>
 80049de:	2301      	movs	r3, #1
 80049e0:	4652      	mov	r2, sl
 80049e2:	4631      	mov	r1, r6
 80049e4:	4628      	mov	r0, r5
 80049e6:	47b8      	blx	r7
 80049e8:	3001      	adds	r0, #1
 80049ea:	f43f aefc 	beq.w	80047e6 <_printf_float+0xba>
 80049ee:	f109 0901 	add.w	r9, r9, #1
 80049f2:	e7ee      	b.n	80049d2 <_printf_float+0x2a6>
 80049f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049f8:	429a      	cmp	r2, r3
 80049fa:	bfa8      	it	ge
 80049fc:	461a      	movge	r2, r3
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	4691      	mov	r9, r2
 8004a02:	dd07      	ble.n	8004a14 <_printf_float+0x2e8>
 8004a04:	4613      	mov	r3, r2
 8004a06:	4631      	mov	r1, r6
 8004a08:	4642      	mov	r2, r8
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b8      	blx	r7
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f43f aee9 	beq.w	80047e6 <_printf_float+0xba>
 8004a14:	f104 031a 	add.w	r3, r4, #26
 8004a18:	f04f 0b00 	mov.w	fp, #0
 8004a1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a20:	9306      	str	r3, [sp, #24]
 8004a22:	e015      	b.n	8004a50 <_printf_float+0x324>
 8004a24:	7fefffff 	.word	0x7fefffff
 8004a28:	08008d80 	.word	0x08008d80
 8004a2c:	08008d7c 	.word	0x08008d7c
 8004a30:	08008d88 	.word	0x08008d88
 8004a34:	08008d84 	.word	0x08008d84
 8004a38:	08008d8c 	.word	0x08008d8c
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	9a06      	ldr	r2, [sp, #24]
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	f43f aecd 	beq.w	80047e6 <_printf_float+0xba>
 8004a4c:	f10b 0b01 	add.w	fp, fp, #1
 8004a50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a54:	ebaa 0309 	sub.w	r3, sl, r9
 8004a58:	455b      	cmp	r3, fp
 8004a5a:	dcef      	bgt.n	8004a3c <_printf_float+0x310>
 8004a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a60:	429a      	cmp	r2, r3
 8004a62:	44d0      	add	r8, sl
 8004a64:	db15      	blt.n	8004a92 <_printf_float+0x366>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	07da      	lsls	r2, r3, #31
 8004a6a:	d412      	bmi.n	8004a92 <_printf_float+0x366>
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a70:	eba3 020a 	sub.w	r2, r3, sl
 8004a74:	eba3 0a01 	sub.w	sl, r3, r1
 8004a78:	4592      	cmp	sl, r2
 8004a7a:	bfa8      	it	ge
 8004a7c:	4692      	movge	sl, r2
 8004a7e:	f1ba 0f00 	cmp.w	sl, #0
 8004a82:	dc0e      	bgt.n	8004aa2 <_printf_float+0x376>
 8004a84:	f04f 0800 	mov.w	r8, #0
 8004a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a8c:	f104 091a 	add.w	r9, r4, #26
 8004a90:	e019      	b.n	8004ac6 <_printf_float+0x39a>
 8004a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d1e5      	bne.n	8004a6c <_printf_float+0x340>
 8004aa0:	e6a1      	b.n	80047e6 <_printf_float+0xba>
 8004aa2:	4653      	mov	r3, sl
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	d1e9      	bne.n	8004a84 <_printf_float+0x358>
 8004ab0:	e699      	b.n	80047e6 <_printf_float+0xba>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	464a      	mov	r2, r9
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	f43f ae92 	beq.w	80047e6 <_printf_float+0xba>
 8004ac2:	f108 0801 	add.w	r8, r8, #1
 8004ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	eba3 030a 	sub.w	r3, r3, sl
 8004ad0:	4543      	cmp	r3, r8
 8004ad2:	dcee      	bgt.n	8004ab2 <_printf_float+0x386>
 8004ad4:	e74a      	b.n	800496c <_printf_float+0x240>
 8004ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	dc01      	bgt.n	8004ae0 <_printf_float+0x3b4>
 8004adc:	07db      	lsls	r3, r3, #31
 8004ade:	d53a      	bpl.n	8004b56 <_printf_float+0x42a>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4642      	mov	r2, r8
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b8      	blx	r7
 8004aea:	3001      	adds	r0, #1
 8004aec:	f43f ae7b 	beq.w	80047e6 <_printf_float+0xba>
 8004af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f108 0801 	add.w	r8, r8, #1
 8004b00:	f43f ae71 	beq.w	80047e6 <_printf_float+0xba>
 8004b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b06:	2200      	movs	r2, #0
 8004b08:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b10:	2300      	movs	r3, #0
 8004b12:	f7fb ffb1 	bl	8000a78 <__aeabi_dcmpeq>
 8004b16:	b9c8      	cbnz	r0, 8004b4c <_printf_float+0x420>
 8004b18:	4653      	mov	r3, sl
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	d10e      	bne.n	8004b44 <_printf_float+0x418>
 8004b26:	e65e      	b.n	80047e6 <_printf_float+0xba>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4652      	mov	r2, sl
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	f43f ae57 	beq.w	80047e6 <_printf_float+0xba>
 8004b38:	f108 0801 	add.w	r8, r8, #1
 8004b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	4543      	cmp	r3, r8
 8004b42:	dcf1      	bgt.n	8004b28 <_printf_float+0x3fc>
 8004b44:	464b      	mov	r3, r9
 8004b46:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b4a:	e6de      	b.n	800490a <_printf_float+0x1de>
 8004b4c:	f04f 0800 	mov.w	r8, #0
 8004b50:	f104 0a1a 	add.w	sl, r4, #26
 8004b54:	e7f2      	b.n	8004b3c <_printf_float+0x410>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e7df      	b.n	8004b1a <_printf_float+0x3ee>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	464a      	mov	r2, r9
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae3e 	beq.w	80047e6 <_printf_float+0xba>
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	4543      	cmp	r3, r8
 8004b76:	dcf0      	bgt.n	8004b5a <_printf_float+0x42e>
 8004b78:	e6fc      	b.n	8004974 <_printf_float+0x248>
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	f104 0919 	add.w	r9, r4, #25
 8004b82:	e7f4      	b.n	8004b6e <_printf_float+0x442>
 8004b84:	2900      	cmp	r1, #0
 8004b86:	f43f ae8b 	beq.w	80048a0 <_printf_float+0x174>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b90:	ab09      	add	r3, sp, #36	; 0x24
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	ec49 8b10 	vmov	d0, r8, r9
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	f8cd a004 	str.w	sl, [sp, #4]
 8004b9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f7ff fd2d 	bl	8004602 <__cvt>
 8004ba8:	4680      	mov	r8, r0
 8004baa:	e648      	b.n	800483e <_printf_float+0x112>

08004bac <_printf_common>:
 8004bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	4691      	mov	r9, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	688a      	ldr	r2, [r1, #8]
 8004bb6:	690b      	ldr	r3, [r1, #16]
 8004bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bfb8      	it	lt
 8004bc0:	4613      	movlt	r3, r2
 8004bc2:	f8c9 3000 	str.w	r3, [r9]
 8004bc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bca:	4606      	mov	r6, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	b112      	cbz	r2, 8004bd6 <_printf_common+0x2a>
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f8c9 3000 	str.w	r3, [r9]
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	0699      	lsls	r1, r3, #26
 8004bda:	bf42      	ittt	mi
 8004bdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004be0:	3302      	addmi	r3, #2
 8004be2:	f8c9 3000 	strmi.w	r3, [r9]
 8004be6:	6825      	ldr	r5, [r4, #0]
 8004be8:	f015 0506 	ands.w	r5, r5, #6
 8004bec:	d107      	bne.n	8004bfe <_printf_common+0x52>
 8004bee:	f104 0a19 	add.w	sl, r4, #25
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	42ab      	cmp	r3, r5
 8004bfc:	dc28      	bgt.n	8004c50 <_printf_common+0xa4>
 8004bfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	3300      	adds	r3, #0
 8004c06:	bf18      	it	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	0692      	lsls	r2, r2, #26
 8004c0c:	d42d      	bmi.n	8004c6a <_printf_common+0xbe>
 8004c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c12:	4639      	mov	r1, r7
 8004c14:	4630      	mov	r0, r6
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d020      	beq.n	8004c5e <_printf_common+0xb2>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	68e5      	ldr	r5, [r4, #12]
 8004c20:	f8d9 2000 	ldr.w	r2, [r9]
 8004c24:	f003 0306 	and.w	r3, r3, #6
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	bf08      	it	eq
 8004c2c:	1aad      	subeq	r5, r5, r2
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	6922      	ldr	r2, [r4, #16]
 8004c32:	bf0c      	ite	eq
 8004c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c38:	2500      	movne	r5, #0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bfc4      	itt	gt
 8004c3e:	1a9b      	subgt	r3, r3, r2
 8004c40:	18ed      	addgt	r5, r5, r3
 8004c42:	f04f 0900 	mov.w	r9, #0
 8004c46:	341a      	adds	r4, #26
 8004c48:	454d      	cmp	r5, r9
 8004c4a:	d11a      	bne.n	8004c82 <_printf_common+0xd6>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e008      	b.n	8004c62 <_printf_common+0xb6>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4652      	mov	r2, sl
 8004c54:	4639      	mov	r1, r7
 8004c56:	4630      	mov	r0, r6
 8004c58:	47c0      	blx	r8
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d103      	bne.n	8004c66 <_printf_common+0xba>
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c66:	3501      	adds	r5, #1
 8004c68:	e7c3      	b.n	8004bf2 <_printf_common+0x46>
 8004c6a:	18e1      	adds	r1, r4, r3
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	2030      	movs	r0, #48	; 0x30
 8004c70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c74:	4422      	add	r2, r4
 8004c76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c7e:	3302      	adds	r3, #2
 8004c80:	e7c5      	b.n	8004c0e <_printf_common+0x62>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4622      	mov	r2, r4
 8004c86:	4639      	mov	r1, r7
 8004c88:	4630      	mov	r0, r6
 8004c8a:	47c0      	blx	r8
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d0e6      	beq.n	8004c5e <_printf_common+0xb2>
 8004c90:	f109 0901 	add.w	r9, r9, #1
 8004c94:	e7d8      	b.n	8004c48 <_printf_common+0x9c>
	...

08004c98 <_printf_i>:
 8004c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	7e09      	ldrb	r1, [r1, #24]
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	296e      	cmp	r1, #110	; 0x6e
 8004ca8:	4617      	mov	r7, r2
 8004caa:	4606      	mov	r6, r0
 8004cac:	4698      	mov	r8, r3
 8004cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cb0:	f000 80b3 	beq.w	8004e1a <_printf_i+0x182>
 8004cb4:	d822      	bhi.n	8004cfc <_printf_i+0x64>
 8004cb6:	2963      	cmp	r1, #99	; 0x63
 8004cb8:	d036      	beq.n	8004d28 <_printf_i+0x90>
 8004cba:	d80a      	bhi.n	8004cd2 <_printf_i+0x3a>
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	f000 80b9 	beq.w	8004e34 <_printf_i+0x19c>
 8004cc2:	2958      	cmp	r1, #88	; 0x58
 8004cc4:	f000 8083 	beq.w	8004dce <_printf_i+0x136>
 8004cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ccc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cd0:	e032      	b.n	8004d38 <_printf_i+0xa0>
 8004cd2:	2964      	cmp	r1, #100	; 0x64
 8004cd4:	d001      	beq.n	8004cda <_printf_i+0x42>
 8004cd6:	2969      	cmp	r1, #105	; 0x69
 8004cd8:	d1f6      	bne.n	8004cc8 <_printf_i+0x30>
 8004cda:	6820      	ldr	r0, [r4, #0]
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	0605      	lsls	r5, r0, #24
 8004ce0:	f103 0104 	add.w	r1, r3, #4
 8004ce4:	d52a      	bpl.n	8004d3c <_printf_i+0xa4>
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6011      	str	r1, [r2, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da03      	bge.n	8004cf6 <_printf_i+0x5e>
 8004cee:	222d      	movs	r2, #45	; 0x2d
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cf6:	486f      	ldr	r0, [pc, #444]	; (8004eb4 <_printf_i+0x21c>)
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	e039      	b.n	8004d70 <_printf_i+0xd8>
 8004cfc:	2973      	cmp	r1, #115	; 0x73
 8004cfe:	f000 809d 	beq.w	8004e3c <_printf_i+0x1a4>
 8004d02:	d808      	bhi.n	8004d16 <_printf_i+0x7e>
 8004d04:	296f      	cmp	r1, #111	; 0x6f
 8004d06:	d020      	beq.n	8004d4a <_printf_i+0xb2>
 8004d08:	2970      	cmp	r1, #112	; 0x70
 8004d0a:	d1dd      	bne.n	8004cc8 <_printf_i+0x30>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f043 0320 	orr.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	e003      	b.n	8004d1e <_printf_i+0x86>
 8004d16:	2975      	cmp	r1, #117	; 0x75
 8004d18:	d017      	beq.n	8004d4a <_printf_i+0xb2>
 8004d1a:	2978      	cmp	r1, #120	; 0x78
 8004d1c:	d1d4      	bne.n	8004cc8 <_printf_i+0x30>
 8004d1e:	2378      	movs	r3, #120	; 0x78
 8004d20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d24:	4864      	ldr	r0, [pc, #400]	; (8004eb8 <_printf_i+0x220>)
 8004d26:	e055      	b.n	8004dd4 <_printf_i+0x13c>
 8004d28:	6813      	ldr	r3, [r2, #0]
 8004d2a:	1d19      	adds	r1, r3, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6011      	str	r1, [r2, #0]
 8004d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e08c      	b.n	8004e56 <_printf_i+0x1be>
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6011      	str	r1, [r2, #0]
 8004d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d44:	bf18      	it	ne
 8004d46:	b21b      	sxthne	r3, r3
 8004d48:	e7cf      	b.n	8004cea <_printf_i+0x52>
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	6825      	ldr	r5, [r4, #0]
 8004d4e:	1d18      	adds	r0, r3, #4
 8004d50:	6010      	str	r0, [r2, #0]
 8004d52:	0628      	lsls	r0, r5, #24
 8004d54:	d501      	bpl.n	8004d5a <_printf_i+0xc2>
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	e002      	b.n	8004d60 <_printf_i+0xc8>
 8004d5a:	0668      	lsls	r0, r5, #25
 8004d5c:	d5fb      	bpl.n	8004d56 <_printf_i+0xbe>
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	4854      	ldr	r0, [pc, #336]	; (8004eb4 <_printf_i+0x21c>)
 8004d62:	296f      	cmp	r1, #111	; 0x6f
 8004d64:	bf14      	ite	ne
 8004d66:	220a      	movne	r2, #10
 8004d68:	2208      	moveq	r2, #8
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d70:	6865      	ldr	r5, [r4, #4]
 8004d72:	60a5      	str	r5, [r4, #8]
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	f2c0 8095 	blt.w	8004ea4 <_printf_i+0x20c>
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	f021 0104 	bic.w	r1, r1, #4
 8004d80:	6021      	str	r1, [r4, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d13d      	bne.n	8004e02 <_printf_i+0x16a>
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	f040 808e 	bne.w	8004ea8 <_printf_i+0x210>
 8004d8c:	4665      	mov	r5, ip
 8004d8e:	2a08      	cmp	r2, #8
 8004d90:	d10b      	bne.n	8004daa <_printf_i+0x112>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	07db      	lsls	r3, r3, #31
 8004d96:	d508      	bpl.n	8004daa <_printf_i+0x112>
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	6862      	ldr	r2, [r4, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	bfde      	ittt	le
 8004da0:	2330      	movle	r3, #48	; 0x30
 8004da2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004da6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004daa:	ebac 0305 	sub.w	r3, ip, r5
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	f8cd 8000 	str.w	r8, [sp]
 8004db4:	463b      	mov	r3, r7
 8004db6:	aa03      	add	r2, sp, #12
 8004db8:	4621      	mov	r1, r4
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7ff fef6 	bl	8004bac <_printf_common>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d14d      	bne.n	8004e60 <_printf_i+0x1c8>
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc8:	b005      	add	sp, #20
 8004dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dce:	4839      	ldr	r0, [pc, #228]	; (8004eb4 <_printf_i+0x21c>)
 8004dd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004dd4:	6813      	ldr	r3, [r2, #0]
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	1d1d      	adds	r5, r3, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6015      	str	r5, [r2, #0]
 8004dde:	060a      	lsls	r2, r1, #24
 8004de0:	d50b      	bpl.n	8004dfa <_printf_i+0x162>
 8004de2:	07ca      	lsls	r2, r1, #31
 8004de4:	bf44      	itt	mi
 8004de6:	f041 0120 	orrmi.w	r1, r1, #32
 8004dea:	6021      	strmi	r1, [r4, #0]
 8004dec:	b91b      	cbnz	r3, 8004df6 <_printf_i+0x15e>
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	f022 0220 	bic.w	r2, r2, #32
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	2210      	movs	r2, #16
 8004df8:	e7b7      	b.n	8004d6a <_printf_i+0xd2>
 8004dfa:	064d      	lsls	r5, r1, #25
 8004dfc:	bf48      	it	mi
 8004dfe:	b29b      	uxthmi	r3, r3
 8004e00:	e7ef      	b.n	8004de2 <_printf_i+0x14a>
 8004e02:	4665      	mov	r5, ip
 8004e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e08:	fb02 3311 	mls	r3, r2, r1, r3
 8004e0c:	5cc3      	ldrb	r3, [r0, r3]
 8004e0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e12:	460b      	mov	r3, r1
 8004e14:	2900      	cmp	r1, #0
 8004e16:	d1f5      	bne.n	8004e04 <_printf_i+0x16c>
 8004e18:	e7b9      	b.n	8004d8e <_printf_i+0xf6>
 8004e1a:	6813      	ldr	r3, [r2, #0]
 8004e1c:	6825      	ldr	r5, [r4, #0]
 8004e1e:	6961      	ldr	r1, [r4, #20]
 8004e20:	1d18      	adds	r0, r3, #4
 8004e22:	6010      	str	r0, [r2, #0]
 8004e24:	0628      	lsls	r0, r5, #24
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	d501      	bpl.n	8004e2e <_printf_i+0x196>
 8004e2a:	6019      	str	r1, [r3, #0]
 8004e2c:	e002      	b.n	8004e34 <_printf_i+0x19c>
 8004e2e:	066a      	lsls	r2, r5, #25
 8004e30:	d5fb      	bpl.n	8004e2a <_printf_i+0x192>
 8004e32:	8019      	strh	r1, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	4665      	mov	r5, ip
 8004e3a:	e7b9      	b.n	8004db0 <_printf_i+0x118>
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	1d19      	adds	r1, r3, #4
 8004e40:	6011      	str	r1, [r2, #0]
 8004e42:	681d      	ldr	r5, [r3, #0]
 8004e44:	6862      	ldr	r2, [r4, #4]
 8004e46:	2100      	movs	r1, #0
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f7fb f9a1 	bl	8000190 <memchr>
 8004e4e:	b108      	cbz	r0, 8004e54 <_printf_i+0x1bc>
 8004e50:	1b40      	subs	r0, r0, r5
 8004e52:	6060      	str	r0, [r4, #4]
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5e:	e7a7      	b.n	8004db0 <_printf_i+0x118>
 8004e60:	6923      	ldr	r3, [r4, #16]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4639      	mov	r1, r7
 8004e66:	4630      	mov	r0, r6
 8004e68:	47c0      	blx	r8
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d0aa      	beq.n	8004dc4 <_printf_i+0x12c>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	079b      	lsls	r3, r3, #30
 8004e72:	d413      	bmi.n	8004e9c <_printf_i+0x204>
 8004e74:	68e0      	ldr	r0, [r4, #12]
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	4298      	cmp	r0, r3
 8004e7a:	bfb8      	it	lt
 8004e7c:	4618      	movlt	r0, r3
 8004e7e:	e7a3      	b.n	8004dc8 <_printf_i+0x130>
 8004e80:	2301      	movs	r3, #1
 8004e82:	464a      	mov	r2, r9
 8004e84:	4639      	mov	r1, r7
 8004e86:	4630      	mov	r0, r6
 8004e88:	47c0      	blx	r8
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d09a      	beq.n	8004dc4 <_printf_i+0x12c>
 8004e8e:	3501      	adds	r5, #1
 8004e90:	68e3      	ldr	r3, [r4, #12]
 8004e92:	9a03      	ldr	r2, [sp, #12]
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	42ab      	cmp	r3, r5
 8004e98:	dcf2      	bgt.n	8004e80 <_printf_i+0x1e8>
 8004e9a:	e7eb      	b.n	8004e74 <_printf_i+0x1dc>
 8004e9c:	2500      	movs	r5, #0
 8004e9e:	f104 0919 	add.w	r9, r4, #25
 8004ea2:	e7f5      	b.n	8004e90 <_printf_i+0x1f8>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ac      	bne.n	8004e02 <_printf_i+0x16a>
 8004ea8:	7803      	ldrb	r3, [r0, #0]
 8004eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb2:	e76c      	b.n	8004d8e <_printf_i+0xf6>
 8004eb4:	08008d8e 	.word	0x08008d8e
 8004eb8:	08008d9f 	.word	0x08008d9f

08004ebc <_scanf_float>:
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	688b      	ldr	r3, [r1, #8]
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	1e5a      	subs	r2, r3, #1
 8004ec8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ecc:	b087      	sub	sp, #28
 8004ece:	bf83      	ittte	hi
 8004ed0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004ed4:	189b      	addhi	r3, r3, r2
 8004ed6:	9301      	strhi	r3, [sp, #4]
 8004ed8:	2300      	movls	r3, #0
 8004eda:	bf86      	itte	hi
 8004edc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004ee0:	608b      	strhi	r3, [r1, #8]
 8004ee2:	9301      	strls	r3, [sp, #4]
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	4688      	mov	r8, r1
 8004ee8:	f04f 0b00 	mov.w	fp, #0
 8004eec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004ef0:	f848 3b1c 	str.w	r3, [r8], #28
 8004ef4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4645      	mov	r5, r8
 8004efe:	465a      	mov	r2, fp
 8004f00:	46d9      	mov	r9, fp
 8004f02:	f8cd b008 	str.w	fp, [sp, #8]
 8004f06:	68a1      	ldr	r1, [r4, #8]
 8004f08:	b181      	cbz	r1, 8004f2c <_scanf_float+0x70>
 8004f0a:	6833      	ldr	r3, [r6, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b49      	cmp	r3, #73	; 0x49
 8004f10:	d071      	beq.n	8004ff6 <_scanf_float+0x13a>
 8004f12:	d84d      	bhi.n	8004fb0 <_scanf_float+0xf4>
 8004f14:	2b39      	cmp	r3, #57	; 0x39
 8004f16:	d840      	bhi.n	8004f9a <_scanf_float+0xde>
 8004f18:	2b31      	cmp	r3, #49	; 0x31
 8004f1a:	f080 8088 	bcs.w	800502e <_scanf_float+0x172>
 8004f1e:	2b2d      	cmp	r3, #45	; 0x2d
 8004f20:	f000 8090 	beq.w	8005044 <_scanf_float+0x188>
 8004f24:	d815      	bhi.n	8004f52 <_scanf_float+0x96>
 8004f26:	2b2b      	cmp	r3, #43	; 0x2b
 8004f28:	f000 808c 	beq.w	8005044 <_scanf_float+0x188>
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	d003      	beq.n	8004f3a <_scanf_float+0x7e>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	2a01      	cmp	r2, #1
 8004f3e:	f200 80ea 	bhi.w	8005116 <_scanf_float+0x25a>
 8004f42:	4545      	cmp	r5, r8
 8004f44:	f200 80dc 	bhi.w	8005100 <_scanf_float+0x244>
 8004f48:	2601      	movs	r6, #1
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	b007      	add	sp, #28
 8004f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f52:	2b2e      	cmp	r3, #46	; 0x2e
 8004f54:	f000 809f 	beq.w	8005096 <_scanf_float+0x1da>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d1e7      	bne.n	8004f2c <_scanf_float+0x70>
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004f62:	d064      	beq.n	800502e <_scanf_float+0x172>
 8004f64:	9b01      	ldr	r3, [sp, #4]
 8004f66:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004f6a:	6020      	str	r0, [r4, #0]
 8004f6c:	f109 0901 	add.w	r9, r9, #1
 8004f70:	b11b      	cbz	r3, 8004f7a <_scanf_float+0xbe>
 8004f72:	3b01      	subs	r3, #1
 8004f74:	3101      	adds	r1, #1
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	60a1      	str	r1, [r4, #8]
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	3301      	adds	r3, #1
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	6873      	ldr	r3, [r6, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	6073      	str	r3, [r6, #4]
 8004f8e:	f340 80ac 	ble.w	80050ea <_scanf_float+0x22e>
 8004f92:	6833      	ldr	r3, [r6, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	6033      	str	r3, [r6, #0]
 8004f98:	e7b5      	b.n	8004f06 <_scanf_float+0x4a>
 8004f9a:	2b45      	cmp	r3, #69	; 0x45
 8004f9c:	f000 8085 	beq.w	80050aa <_scanf_float+0x1ee>
 8004fa0:	2b46      	cmp	r3, #70	; 0x46
 8004fa2:	d06a      	beq.n	800507a <_scanf_float+0x1be>
 8004fa4:	2b41      	cmp	r3, #65	; 0x41
 8004fa6:	d1c1      	bne.n	8004f2c <_scanf_float+0x70>
 8004fa8:	2a01      	cmp	r2, #1
 8004faa:	d1bf      	bne.n	8004f2c <_scanf_float+0x70>
 8004fac:	2202      	movs	r2, #2
 8004fae:	e046      	b.n	800503e <_scanf_float+0x182>
 8004fb0:	2b65      	cmp	r3, #101	; 0x65
 8004fb2:	d07a      	beq.n	80050aa <_scanf_float+0x1ee>
 8004fb4:	d818      	bhi.n	8004fe8 <_scanf_float+0x12c>
 8004fb6:	2b54      	cmp	r3, #84	; 0x54
 8004fb8:	d066      	beq.n	8005088 <_scanf_float+0x1cc>
 8004fba:	d811      	bhi.n	8004fe0 <_scanf_float+0x124>
 8004fbc:	2b4e      	cmp	r3, #78	; 0x4e
 8004fbe:	d1b5      	bne.n	8004f2c <_scanf_float+0x70>
 8004fc0:	2a00      	cmp	r2, #0
 8004fc2:	d146      	bne.n	8005052 <_scanf_float+0x196>
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	d145      	bne.n	8005056 <_scanf_float+0x19a>
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004fd0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004fd4:	d13f      	bne.n	8005056 <_scanf_float+0x19a>
 8004fd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004fda:	6021      	str	r1, [r4, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	e02e      	b.n	800503e <_scanf_float+0x182>
 8004fe0:	2b59      	cmp	r3, #89	; 0x59
 8004fe2:	d01e      	beq.n	8005022 <_scanf_float+0x166>
 8004fe4:	2b61      	cmp	r3, #97	; 0x61
 8004fe6:	e7de      	b.n	8004fa6 <_scanf_float+0xea>
 8004fe8:	2b6e      	cmp	r3, #110	; 0x6e
 8004fea:	d0e9      	beq.n	8004fc0 <_scanf_float+0x104>
 8004fec:	d815      	bhi.n	800501a <_scanf_float+0x15e>
 8004fee:	2b66      	cmp	r3, #102	; 0x66
 8004ff0:	d043      	beq.n	800507a <_scanf_float+0x1be>
 8004ff2:	2b69      	cmp	r3, #105	; 0x69
 8004ff4:	d19a      	bne.n	8004f2c <_scanf_float+0x70>
 8004ff6:	f1bb 0f00 	cmp.w	fp, #0
 8004ffa:	d138      	bne.n	800506e <_scanf_float+0x1b2>
 8004ffc:	f1b9 0f00 	cmp.w	r9, #0
 8005000:	d197      	bne.n	8004f32 <_scanf_float+0x76>
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005008:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800500c:	d195      	bne.n	8004f3a <_scanf_float+0x7e>
 800500e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005012:	6021      	str	r1, [r4, #0]
 8005014:	f04f 0b01 	mov.w	fp, #1
 8005018:	e011      	b.n	800503e <_scanf_float+0x182>
 800501a:	2b74      	cmp	r3, #116	; 0x74
 800501c:	d034      	beq.n	8005088 <_scanf_float+0x1cc>
 800501e:	2b79      	cmp	r3, #121	; 0x79
 8005020:	d184      	bne.n	8004f2c <_scanf_float+0x70>
 8005022:	f1bb 0f07 	cmp.w	fp, #7
 8005026:	d181      	bne.n	8004f2c <_scanf_float+0x70>
 8005028:	f04f 0b08 	mov.w	fp, #8
 800502c:	e007      	b.n	800503e <_scanf_float+0x182>
 800502e:	eb12 0f0b 	cmn.w	r2, fp
 8005032:	f47f af7b 	bne.w	8004f2c <_scanf_float+0x70>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800503c:	6021      	str	r1, [r4, #0]
 800503e:	702b      	strb	r3, [r5, #0]
 8005040:	3501      	adds	r5, #1
 8005042:	e79a      	b.n	8004f7a <_scanf_float+0xbe>
 8005044:	6821      	ldr	r1, [r4, #0]
 8005046:	0608      	lsls	r0, r1, #24
 8005048:	f57f af70 	bpl.w	8004f2c <_scanf_float+0x70>
 800504c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005050:	e7f4      	b.n	800503c <_scanf_float+0x180>
 8005052:	2a02      	cmp	r2, #2
 8005054:	d047      	beq.n	80050e6 <_scanf_float+0x22a>
 8005056:	f1bb 0f01 	cmp.w	fp, #1
 800505a:	d003      	beq.n	8005064 <_scanf_float+0x1a8>
 800505c:	f1bb 0f04 	cmp.w	fp, #4
 8005060:	f47f af64 	bne.w	8004f2c <_scanf_float+0x70>
 8005064:	f10b 0b01 	add.w	fp, fp, #1
 8005068:	fa5f fb8b 	uxtb.w	fp, fp
 800506c:	e7e7      	b.n	800503e <_scanf_float+0x182>
 800506e:	f1bb 0f03 	cmp.w	fp, #3
 8005072:	d0f7      	beq.n	8005064 <_scanf_float+0x1a8>
 8005074:	f1bb 0f05 	cmp.w	fp, #5
 8005078:	e7f2      	b.n	8005060 <_scanf_float+0x1a4>
 800507a:	f1bb 0f02 	cmp.w	fp, #2
 800507e:	f47f af55 	bne.w	8004f2c <_scanf_float+0x70>
 8005082:	f04f 0b03 	mov.w	fp, #3
 8005086:	e7da      	b.n	800503e <_scanf_float+0x182>
 8005088:	f1bb 0f06 	cmp.w	fp, #6
 800508c:	f47f af4e 	bne.w	8004f2c <_scanf_float+0x70>
 8005090:	f04f 0b07 	mov.w	fp, #7
 8005094:	e7d3      	b.n	800503e <_scanf_float+0x182>
 8005096:	6821      	ldr	r1, [r4, #0]
 8005098:	0588      	lsls	r0, r1, #22
 800509a:	f57f af47 	bpl.w	8004f2c <_scanf_float+0x70>
 800509e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80050a2:	6021      	str	r1, [r4, #0]
 80050a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80050a8:	e7c9      	b.n	800503e <_scanf_float+0x182>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80050b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80050b4:	d006      	beq.n	80050c4 <_scanf_float+0x208>
 80050b6:	0548      	lsls	r0, r1, #21
 80050b8:	f57f af38 	bpl.w	8004f2c <_scanf_float+0x70>
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	f43f af3b 	beq.w	8004f3a <_scanf_float+0x7e>
 80050c4:	0588      	lsls	r0, r1, #22
 80050c6:	bf58      	it	pl
 80050c8:	9802      	ldrpl	r0, [sp, #8]
 80050ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80050ce:	bf58      	it	pl
 80050d0:	eba9 0000 	subpl.w	r0, r9, r0
 80050d4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80050d8:	bf58      	it	pl
 80050da:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80050de:	6021      	str	r1, [r4, #0]
 80050e0:	f04f 0900 	mov.w	r9, #0
 80050e4:	e7ab      	b.n	800503e <_scanf_float+0x182>
 80050e6:	2203      	movs	r2, #3
 80050e8:	e7a9      	b.n	800503e <_scanf_float+0x182>
 80050ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050ee:	9205      	str	r2, [sp, #20]
 80050f0:	4631      	mov	r1, r6
 80050f2:	4638      	mov	r0, r7
 80050f4:	4798      	blx	r3
 80050f6:	9a05      	ldr	r2, [sp, #20]
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f43f af04 	beq.w	8004f06 <_scanf_float+0x4a>
 80050fe:	e715      	b.n	8004f2c <_scanf_float+0x70>
 8005100:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005104:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005108:	4632      	mov	r2, r6
 800510a:	4638      	mov	r0, r7
 800510c:	4798      	blx	r3
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	3b01      	subs	r3, #1
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	e715      	b.n	8004f42 <_scanf_float+0x86>
 8005116:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800511a:	2b06      	cmp	r3, #6
 800511c:	d80a      	bhi.n	8005134 <_scanf_float+0x278>
 800511e:	f1bb 0f02 	cmp.w	fp, #2
 8005122:	d968      	bls.n	80051f6 <_scanf_float+0x33a>
 8005124:	f1ab 0b03 	sub.w	fp, fp, #3
 8005128:	fa5f fb8b 	uxtb.w	fp, fp
 800512c:	eba5 0b0b 	sub.w	fp, r5, fp
 8005130:	455d      	cmp	r5, fp
 8005132:	d14b      	bne.n	80051cc <_scanf_float+0x310>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	05da      	lsls	r2, r3, #23
 8005138:	d51f      	bpl.n	800517a <_scanf_float+0x2be>
 800513a:	055b      	lsls	r3, r3, #21
 800513c:	d468      	bmi.n	8005210 <_scanf_float+0x354>
 800513e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	2965      	cmp	r1, #101	; 0x65
 8005146:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800514a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	d00d      	beq.n	800516e <_scanf_float+0x2b2>
 8005152:	2945      	cmp	r1, #69	; 0x45
 8005154:	d00b      	beq.n	800516e <_scanf_float+0x2b2>
 8005156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800515a:	4632      	mov	r2, r6
 800515c:	4638      	mov	r0, r7
 800515e:	4798      	blx	r3
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005166:	3b01      	subs	r3, #1
 8005168:	f1a5 0b02 	sub.w	fp, r5, #2
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005172:	4632      	mov	r2, r6
 8005174:	4638      	mov	r0, r7
 8005176:	4798      	blx	r3
 8005178:	465d      	mov	r5, fp
 800517a:	6826      	ldr	r6, [r4, #0]
 800517c:	f016 0610 	ands.w	r6, r6, #16
 8005180:	d17a      	bne.n	8005278 <_scanf_float+0x3bc>
 8005182:	702e      	strb	r6, [r5, #0]
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d142      	bne.n	8005216 <_scanf_float+0x35a>
 8005190:	9b02      	ldr	r3, [sp, #8]
 8005192:	eba9 0303 	sub.w	r3, r9, r3
 8005196:	425a      	negs	r2, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d149      	bne.n	8005230 <_scanf_float+0x374>
 800519c:	2200      	movs	r2, #0
 800519e:	4641      	mov	r1, r8
 80051a0:	4638      	mov	r0, r7
 80051a2:	f000 ff21 	bl	8005fe8 <_strtod_r>
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	f8da 3000 	ldr.w	r3, [sl]
 80051ac:	f015 0f02 	tst.w	r5, #2
 80051b0:	f103 0204 	add.w	r2, r3, #4
 80051b4:	ec59 8b10 	vmov	r8, r9, d0
 80051b8:	f8ca 2000 	str.w	r2, [sl]
 80051bc:	d043      	beq.n	8005246 <_scanf_float+0x38a>
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	e9c3 8900 	strd	r8, r9, [r3]
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60e3      	str	r3, [r4, #12]
 80051ca:	e6be      	b.n	8004f4a <_scanf_float+0x8e>
 80051cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80051d4:	4632      	mov	r2, r6
 80051d6:	4638      	mov	r0, r7
 80051d8:	4798      	blx	r3
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	3b01      	subs	r3, #1
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	e7a6      	b.n	8005130 <_scanf_float+0x274>
 80051e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80051ea:	4632      	mov	r2, r6
 80051ec:	4638      	mov	r0, r7
 80051ee:	4798      	blx	r3
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	4545      	cmp	r5, r8
 80051f8:	d8f3      	bhi.n	80051e2 <_scanf_float+0x326>
 80051fa:	e6a5      	b.n	8004f48 <_scanf_float+0x8c>
 80051fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005200:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005204:	4632      	mov	r2, r6
 8005206:	4638      	mov	r0, r7
 8005208:	4798      	blx	r3
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	3b01      	subs	r3, #1
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	4545      	cmp	r5, r8
 8005212:	d8f3      	bhi.n	80051fc <_scanf_float+0x340>
 8005214:	e698      	b.n	8004f48 <_scanf_float+0x8c>
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0bf      	beq.n	800519c <_scanf_float+0x2e0>
 800521c:	9904      	ldr	r1, [sp, #16]
 800521e:	230a      	movs	r3, #10
 8005220:	4632      	mov	r2, r6
 8005222:	3101      	adds	r1, #1
 8005224:	4638      	mov	r0, r7
 8005226:	f000 ff6b 	bl	8006100 <_strtol_r>
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	9d04      	ldr	r5, [sp, #16]
 800522e:	1ac2      	subs	r2, r0, r3
 8005230:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005234:	429d      	cmp	r5, r3
 8005236:	bf28      	it	cs
 8005238:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800523c:	490f      	ldr	r1, [pc, #60]	; (800527c <_scanf_float+0x3c0>)
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f8a0 	bl	8005384 <siprintf>
 8005244:	e7aa      	b.n	800519c <_scanf_float+0x2e0>
 8005246:	f015 0504 	ands.w	r5, r5, #4
 800524a:	d1b8      	bne.n	80051be <_scanf_float+0x302>
 800524c:	681f      	ldr	r7, [r3, #0]
 800524e:	ee10 2a10 	vmov	r2, s0
 8005252:	464b      	mov	r3, r9
 8005254:	ee10 0a10 	vmov	r0, s0
 8005258:	4649      	mov	r1, r9
 800525a:	f7fb fc3f 	bl	8000adc <__aeabi_dcmpun>
 800525e:	b128      	cbz	r0, 800526c <_scanf_float+0x3b0>
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f889 	bl	8005378 <nanf>
 8005266:	ed87 0a00 	vstr	s0, [r7]
 800526a:	e7ab      	b.n	80051c4 <_scanf_float+0x308>
 800526c:	4640      	mov	r0, r8
 800526e:	4649      	mov	r1, r9
 8005270:	f7fb fc92 	bl	8000b98 <__aeabi_d2f>
 8005274:	6038      	str	r0, [r7, #0]
 8005276:	e7a5      	b.n	80051c4 <_scanf_float+0x308>
 8005278:	2600      	movs	r6, #0
 800527a:	e666      	b.n	8004f4a <_scanf_float+0x8e>
 800527c:	08008db0 	.word	0x08008db0

08005280 <iprintf>:
 8005280:	b40f      	push	{r0, r1, r2, r3}
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <iprintf+0x2c>)
 8005284:	b513      	push	{r0, r1, r4, lr}
 8005286:	681c      	ldr	r4, [r3, #0]
 8005288:	b124      	cbz	r4, 8005294 <iprintf+0x14>
 800528a:	69a3      	ldr	r3, [r4, #24]
 800528c:	b913      	cbnz	r3, 8005294 <iprintf+0x14>
 800528e:	4620      	mov	r0, r4
 8005290:	f001 ff3e 	bl	8007110 <__sinit>
 8005294:	ab05      	add	r3, sp, #20
 8005296:	9a04      	ldr	r2, [sp, #16]
 8005298:	68a1      	ldr	r1, [r4, #8]
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	4620      	mov	r0, r4
 800529e:	f003 f9ab 	bl	80085f8 <_vfiprintf_r>
 80052a2:	b002      	add	sp, #8
 80052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a8:	b004      	add	sp, #16
 80052aa:	4770      	bx	lr
 80052ac:	2000001c 	.word	0x2000001c

080052b0 <_puts_r>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	460e      	mov	r6, r1
 80052b4:	4605      	mov	r5, r0
 80052b6:	b118      	cbz	r0, 80052c0 <_puts_r+0x10>
 80052b8:	6983      	ldr	r3, [r0, #24]
 80052ba:	b90b      	cbnz	r3, 80052c0 <_puts_r+0x10>
 80052bc:	f001 ff28 	bl	8007110 <__sinit>
 80052c0:	69ab      	ldr	r3, [r5, #24]
 80052c2:	68ac      	ldr	r4, [r5, #8]
 80052c4:	b913      	cbnz	r3, 80052cc <_puts_r+0x1c>
 80052c6:	4628      	mov	r0, r5
 80052c8:	f001 ff22 	bl	8007110 <__sinit>
 80052cc:	4b23      	ldr	r3, [pc, #140]	; (800535c <_puts_r+0xac>)
 80052ce:	429c      	cmp	r4, r3
 80052d0:	d117      	bne.n	8005302 <_puts_r+0x52>
 80052d2:	686c      	ldr	r4, [r5, #4]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	071b      	lsls	r3, r3, #28
 80052d8:	d51d      	bpl.n	8005316 <_puts_r+0x66>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	b1db      	cbz	r3, 8005316 <_puts_r+0x66>
 80052de:	3e01      	subs	r6, #1
 80052e0:	68a3      	ldr	r3, [r4, #8]
 80052e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	b9e9      	cbnz	r1, 8005328 <_puts_r+0x78>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da2e      	bge.n	800534e <_puts_r+0x9e>
 80052f0:	4622      	mov	r2, r4
 80052f2:	210a      	movs	r1, #10
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 ff15 	bl	8006124 <__swbuf_r>
 80052fa:	3001      	adds	r0, #1
 80052fc:	d011      	beq.n	8005322 <_puts_r+0x72>
 80052fe:	200a      	movs	r0, #10
 8005300:	e011      	b.n	8005326 <_puts_r+0x76>
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <_puts_r+0xb0>)
 8005304:	429c      	cmp	r4, r3
 8005306:	d101      	bne.n	800530c <_puts_r+0x5c>
 8005308:	68ac      	ldr	r4, [r5, #8]
 800530a:	e7e3      	b.n	80052d4 <_puts_r+0x24>
 800530c:	4b15      	ldr	r3, [pc, #84]	; (8005364 <_puts_r+0xb4>)
 800530e:	429c      	cmp	r4, r3
 8005310:	bf08      	it	eq
 8005312:	68ec      	ldreq	r4, [r5, #12]
 8005314:	e7de      	b.n	80052d4 <_puts_r+0x24>
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 ff55 	bl	80061c8 <__swsetup_r>
 800531e:	2800      	cmp	r0, #0
 8005320:	d0dd      	beq.n	80052de <_puts_r+0x2e>
 8005322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	2b00      	cmp	r3, #0
 800532a:	da04      	bge.n	8005336 <_puts_r+0x86>
 800532c:	69a2      	ldr	r2, [r4, #24]
 800532e:	429a      	cmp	r2, r3
 8005330:	dc06      	bgt.n	8005340 <_puts_r+0x90>
 8005332:	290a      	cmp	r1, #10
 8005334:	d004      	beq.n	8005340 <_puts_r+0x90>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	7019      	strb	r1, [r3, #0]
 800533e:	e7cf      	b.n	80052e0 <_puts_r+0x30>
 8005340:	4622      	mov	r2, r4
 8005342:	4628      	mov	r0, r5
 8005344:	f000 feee 	bl	8006124 <__swbuf_r>
 8005348:	3001      	adds	r0, #1
 800534a:	d1c9      	bne.n	80052e0 <_puts_r+0x30>
 800534c:	e7e9      	b.n	8005322 <_puts_r+0x72>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	200a      	movs	r0, #10
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	7018      	strb	r0, [r3, #0]
 8005358:	e7e5      	b.n	8005326 <_puts_r+0x76>
 800535a:	bf00      	nop
 800535c:	08008e38 	.word	0x08008e38
 8005360:	08008e58 	.word	0x08008e58
 8005364:	08008e18 	.word	0x08008e18

08005368 <puts>:
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <puts+0xc>)
 800536a:	4601      	mov	r1, r0
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	f7ff bf9f 	b.w	80052b0 <_puts_r>
 8005372:	bf00      	nop
 8005374:	2000001c 	.word	0x2000001c

08005378 <nanf>:
 8005378:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005380 <nanf+0x8>
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	7fc00000 	.word	0x7fc00000

08005384 <siprintf>:
 8005384:	b40e      	push	{r1, r2, r3}
 8005386:	b500      	push	{lr}
 8005388:	b09c      	sub	sp, #112	; 0x70
 800538a:	ab1d      	add	r3, sp, #116	; 0x74
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	9006      	str	r0, [sp, #24]
 8005390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005394:	4809      	ldr	r0, [pc, #36]	; (80053bc <siprintf+0x38>)
 8005396:	9107      	str	r1, [sp, #28]
 8005398:	9104      	str	r1, [sp, #16]
 800539a:	4909      	ldr	r1, [pc, #36]	; (80053c0 <siprintf+0x3c>)
 800539c:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a0:	9105      	str	r1, [sp, #20]
 80053a2:	6800      	ldr	r0, [r0, #0]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	a902      	add	r1, sp, #8
 80053a8:	f003 f804 	bl	80083b4 <_svfiprintf_r>
 80053ac:	9b02      	ldr	r3, [sp, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	b01c      	add	sp, #112	; 0x70
 80053b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b8:	b003      	add	sp, #12
 80053ba:	4770      	bx	lr
 80053bc:	2000001c 	.word	0x2000001c
 80053c0:	ffff0208 	.word	0xffff0208

080053c4 <sulp>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	4604      	mov	r4, r0
 80053c8:	460d      	mov	r5, r1
 80053ca:	ec45 4b10 	vmov	d0, r4, r5
 80053ce:	4616      	mov	r6, r2
 80053d0:	f002 fdac 	bl	8007f2c <__ulp>
 80053d4:	ec51 0b10 	vmov	r0, r1, d0
 80053d8:	b17e      	cbz	r6, 80053fa <sulp+0x36>
 80053da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80053de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dd09      	ble.n	80053fa <sulp+0x36>
 80053e6:	051b      	lsls	r3, r3, #20
 80053e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80053ec:	2400      	movs	r4, #0
 80053ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80053f2:	4622      	mov	r2, r4
 80053f4:	462b      	mov	r3, r5
 80053f6:	f7fb f8d7 	bl	80005a8 <__aeabi_dmul>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	0000      	movs	r0, r0
	...

08005400 <_strtod_l>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	461f      	mov	r7, r3
 8005406:	b0a1      	sub	sp, #132	; 0x84
 8005408:	2300      	movs	r3, #0
 800540a:	4681      	mov	r9, r0
 800540c:	4638      	mov	r0, r7
 800540e:	460e      	mov	r6, r1
 8005410:	9217      	str	r2, [sp, #92]	; 0x5c
 8005412:	931c      	str	r3, [sp, #112]	; 0x70
 8005414:	f002 fa2f 	bl	8007876 <__localeconv_l>
 8005418:	4680      	mov	r8, r0
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	f7fa feb0 	bl	8000180 <strlen>
 8005420:	f04f 0a00 	mov.w	sl, #0
 8005424:	4604      	mov	r4, r0
 8005426:	f04f 0b00 	mov.w	fp, #0
 800542a:	961b      	str	r6, [sp, #108]	; 0x6c
 800542c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	2a0d      	cmp	r2, #13
 8005432:	d832      	bhi.n	800549a <_strtod_l+0x9a>
 8005434:	2a09      	cmp	r2, #9
 8005436:	d236      	bcs.n	80054a6 <_strtod_l+0xa6>
 8005438:	2a00      	cmp	r2, #0
 800543a:	d03e      	beq.n	80054ba <_strtod_l+0xba>
 800543c:	2300      	movs	r3, #0
 800543e:	930d      	str	r3, [sp, #52]	; 0x34
 8005440:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005442:	782b      	ldrb	r3, [r5, #0]
 8005444:	2b30      	cmp	r3, #48	; 0x30
 8005446:	f040 80ac 	bne.w	80055a2 <_strtod_l+0x1a2>
 800544a:	786b      	ldrb	r3, [r5, #1]
 800544c:	2b58      	cmp	r3, #88	; 0x58
 800544e:	d001      	beq.n	8005454 <_strtod_l+0x54>
 8005450:	2b78      	cmp	r3, #120	; 0x78
 8005452:	d167      	bne.n	8005524 <_strtod_l+0x124>
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	ab1c      	add	r3, sp, #112	; 0x70
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	9702      	str	r7, [sp, #8]
 800545e:	ab1d      	add	r3, sp, #116	; 0x74
 8005460:	4a88      	ldr	r2, [pc, #544]	; (8005684 <_strtod_l+0x284>)
 8005462:	a91b      	add	r1, sp, #108	; 0x6c
 8005464:	4648      	mov	r0, r9
 8005466:	f001 ff2c 	bl	80072c2 <__gethex>
 800546a:	f010 0407 	ands.w	r4, r0, #7
 800546e:	4606      	mov	r6, r0
 8005470:	d005      	beq.n	800547e <_strtod_l+0x7e>
 8005472:	2c06      	cmp	r4, #6
 8005474:	d12b      	bne.n	80054ce <_strtod_l+0xce>
 8005476:	3501      	adds	r5, #1
 8005478:	2300      	movs	r3, #0
 800547a:	951b      	str	r5, [sp, #108]	; 0x6c
 800547c:	930d      	str	r3, [sp, #52]	; 0x34
 800547e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 859a 	bne.w	8005fba <_strtod_l+0xbba>
 8005486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005488:	b1e3      	cbz	r3, 80054c4 <_strtod_l+0xc4>
 800548a:	4652      	mov	r2, sl
 800548c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005490:	ec43 2b10 	vmov	d0, r2, r3
 8005494:	b021      	add	sp, #132	; 0x84
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	2a2b      	cmp	r2, #43	; 0x2b
 800549c:	d015      	beq.n	80054ca <_strtod_l+0xca>
 800549e:	2a2d      	cmp	r2, #45	; 0x2d
 80054a0:	d004      	beq.n	80054ac <_strtod_l+0xac>
 80054a2:	2a20      	cmp	r2, #32
 80054a4:	d1ca      	bne.n	800543c <_strtod_l+0x3c>
 80054a6:	3301      	adds	r3, #1
 80054a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80054aa:	e7bf      	b.n	800542c <_strtod_l+0x2c>
 80054ac:	2201      	movs	r2, #1
 80054ae:	920d      	str	r2, [sp, #52]	; 0x34
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1c2      	bne.n	8005440 <_strtod_l+0x40>
 80054ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8579 	bne.w	8005fb6 <_strtod_l+0xbb6>
 80054c4:	4652      	mov	r2, sl
 80054c6:	465b      	mov	r3, fp
 80054c8:	e7e2      	b.n	8005490 <_strtod_l+0x90>
 80054ca:	2200      	movs	r2, #0
 80054cc:	e7ef      	b.n	80054ae <_strtod_l+0xae>
 80054ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80054d0:	b13a      	cbz	r2, 80054e2 <_strtod_l+0xe2>
 80054d2:	2135      	movs	r1, #53	; 0x35
 80054d4:	a81e      	add	r0, sp, #120	; 0x78
 80054d6:	f002 fe21 	bl	800811c <__copybits>
 80054da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054dc:	4648      	mov	r0, r9
 80054de:	f002 fa8d 	bl	80079fc <_Bfree>
 80054e2:	3c01      	subs	r4, #1
 80054e4:	2c04      	cmp	r4, #4
 80054e6:	d806      	bhi.n	80054f6 <_strtod_l+0xf6>
 80054e8:	e8df f004 	tbb	[pc, r4]
 80054ec:	1714030a 	.word	0x1714030a
 80054f0:	0a          	.byte	0x0a
 80054f1:	00          	.byte	0x00
 80054f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80054f6:	0730      	lsls	r0, r6, #28
 80054f8:	d5c1      	bpl.n	800547e <_strtod_l+0x7e>
 80054fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80054fe:	e7be      	b.n	800547e <_strtod_l+0x7e>
 8005500:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005504:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005506:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800550a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800550e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005512:	e7f0      	b.n	80054f6 <_strtod_l+0xf6>
 8005514:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005688 <_strtod_l+0x288>
 8005518:	e7ed      	b.n	80054f6 <_strtod_l+0xf6>
 800551a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800551e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005522:	e7e8      	b.n	80054f6 <_strtod_l+0xf6>
 8005524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	921b      	str	r2, [sp, #108]	; 0x6c
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d0f9      	beq.n	8005524 <_strtod_l+0x124>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0a4      	beq.n	800547e <_strtod_l+0x7e>
 8005534:	2301      	movs	r3, #1
 8005536:	2500      	movs	r5, #0
 8005538:	9306      	str	r3, [sp, #24]
 800553a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800553c:	9308      	str	r3, [sp, #32]
 800553e:	9507      	str	r5, [sp, #28]
 8005540:	9505      	str	r5, [sp, #20]
 8005542:	220a      	movs	r2, #10
 8005544:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005546:	7807      	ldrb	r7, [r0, #0]
 8005548:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800554c:	b2d9      	uxtb	r1, r3
 800554e:	2909      	cmp	r1, #9
 8005550:	d929      	bls.n	80055a6 <_strtod_l+0x1a6>
 8005552:	4622      	mov	r2, r4
 8005554:	f8d8 1000 	ldr.w	r1, [r8]
 8005558:	f003 f9b7 	bl	80088ca <strncmp>
 800555c:	2800      	cmp	r0, #0
 800555e:	d031      	beq.n	80055c4 <_strtod_l+0x1c4>
 8005560:	2000      	movs	r0, #0
 8005562:	9c05      	ldr	r4, [sp, #20]
 8005564:	9004      	str	r0, [sp, #16]
 8005566:	463b      	mov	r3, r7
 8005568:	4602      	mov	r2, r0
 800556a:	2b65      	cmp	r3, #101	; 0x65
 800556c:	d001      	beq.n	8005572 <_strtod_l+0x172>
 800556e:	2b45      	cmp	r3, #69	; 0x45
 8005570:	d114      	bne.n	800559c <_strtod_l+0x19c>
 8005572:	b924      	cbnz	r4, 800557e <_strtod_l+0x17e>
 8005574:	b910      	cbnz	r0, 800557c <_strtod_l+0x17c>
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d09e      	beq.n	80054ba <_strtod_l+0xba>
 800557c:	2400      	movs	r4, #0
 800557e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005580:	1c73      	adds	r3, r6, #1
 8005582:	931b      	str	r3, [sp, #108]	; 0x6c
 8005584:	7873      	ldrb	r3, [r6, #1]
 8005586:	2b2b      	cmp	r3, #43	; 0x2b
 8005588:	d078      	beq.n	800567c <_strtod_l+0x27c>
 800558a:	2b2d      	cmp	r3, #45	; 0x2d
 800558c:	d070      	beq.n	8005670 <_strtod_l+0x270>
 800558e:	f04f 0c00 	mov.w	ip, #0
 8005592:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005596:	2f09      	cmp	r7, #9
 8005598:	d97c      	bls.n	8005694 <_strtod_l+0x294>
 800559a:	961b      	str	r6, [sp, #108]	; 0x6c
 800559c:	f04f 0e00 	mov.w	lr, #0
 80055a0:	e09a      	b.n	80056d8 <_strtod_l+0x2d8>
 80055a2:	2300      	movs	r3, #0
 80055a4:	e7c7      	b.n	8005536 <_strtod_l+0x136>
 80055a6:	9905      	ldr	r1, [sp, #20]
 80055a8:	2908      	cmp	r1, #8
 80055aa:	bfdd      	ittte	le
 80055ac:	9907      	ldrle	r1, [sp, #28]
 80055ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80055b2:	9307      	strle	r3, [sp, #28]
 80055b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80055b8:	9b05      	ldr	r3, [sp, #20]
 80055ba:	3001      	adds	r0, #1
 80055bc:	3301      	adds	r3, #1
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80055c2:	e7bf      	b.n	8005544 <_strtod_l+0x144>
 80055c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055c6:	191a      	adds	r2, r3, r4
 80055c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80055ca:	9a05      	ldr	r2, [sp, #20]
 80055cc:	5d1b      	ldrb	r3, [r3, r4]
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	d037      	beq.n	8005642 <_strtod_l+0x242>
 80055d2:	9c05      	ldr	r4, [sp, #20]
 80055d4:	4602      	mov	r2, r0
 80055d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80055da:	2909      	cmp	r1, #9
 80055dc:	d913      	bls.n	8005606 <_strtod_l+0x206>
 80055de:	2101      	movs	r1, #1
 80055e0:	9104      	str	r1, [sp, #16]
 80055e2:	e7c2      	b.n	800556a <_strtod_l+0x16a>
 80055e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	3001      	adds	r0, #1
 80055ee:	2b30      	cmp	r3, #48	; 0x30
 80055f0:	d0f8      	beq.n	80055e4 <_strtod_l+0x1e4>
 80055f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80055f6:	2a08      	cmp	r2, #8
 80055f8:	f200 84e4 	bhi.w	8005fc4 <_strtod_l+0xbc4>
 80055fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80055fe:	9208      	str	r2, [sp, #32]
 8005600:	4602      	mov	r2, r0
 8005602:	2000      	movs	r0, #0
 8005604:	4604      	mov	r4, r0
 8005606:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800560a:	f100 0101 	add.w	r1, r0, #1
 800560e:	d012      	beq.n	8005636 <_strtod_l+0x236>
 8005610:	440a      	add	r2, r1
 8005612:	eb00 0c04 	add.w	ip, r0, r4
 8005616:	4621      	mov	r1, r4
 8005618:	270a      	movs	r7, #10
 800561a:	458c      	cmp	ip, r1
 800561c:	d113      	bne.n	8005646 <_strtod_l+0x246>
 800561e:	1821      	adds	r1, r4, r0
 8005620:	2908      	cmp	r1, #8
 8005622:	f104 0401 	add.w	r4, r4, #1
 8005626:	4404      	add	r4, r0
 8005628:	dc19      	bgt.n	800565e <_strtod_l+0x25e>
 800562a:	9b07      	ldr	r3, [sp, #28]
 800562c:	210a      	movs	r1, #10
 800562e:	fb01 e303 	mla	r3, r1, r3, lr
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	2100      	movs	r1, #0
 8005636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005638:	1c58      	adds	r0, r3, #1
 800563a:	901b      	str	r0, [sp, #108]	; 0x6c
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	4608      	mov	r0, r1
 8005640:	e7c9      	b.n	80055d6 <_strtod_l+0x1d6>
 8005642:	9805      	ldr	r0, [sp, #20]
 8005644:	e7d3      	b.n	80055ee <_strtod_l+0x1ee>
 8005646:	2908      	cmp	r1, #8
 8005648:	f101 0101 	add.w	r1, r1, #1
 800564c:	dc03      	bgt.n	8005656 <_strtod_l+0x256>
 800564e:	9b07      	ldr	r3, [sp, #28]
 8005650:	437b      	muls	r3, r7
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	e7e1      	b.n	800561a <_strtod_l+0x21a>
 8005656:	2910      	cmp	r1, #16
 8005658:	bfd8      	it	le
 800565a:	437d      	mulle	r5, r7
 800565c:	e7dd      	b.n	800561a <_strtod_l+0x21a>
 800565e:	2c10      	cmp	r4, #16
 8005660:	bfdc      	itt	le
 8005662:	210a      	movle	r1, #10
 8005664:	fb01 e505 	mlale	r5, r1, r5, lr
 8005668:	e7e4      	b.n	8005634 <_strtod_l+0x234>
 800566a:	2301      	movs	r3, #1
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	e781      	b.n	8005574 <_strtod_l+0x174>
 8005670:	f04f 0c01 	mov.w	ip, #1
 8005674:	1cb3      	adds	r3, r6, #2
 8005676:	931b      	str	r3, [sp, #108]	; 0x6c
 8005678:	78b3      	ldrb	r3, [r6, #2]
 800567a:	e78a      	b.n	8005592 <_strtod_l+0x192>
 800567c:	f04f 0c00 	mov.w	ip, #0
 8005680:	e7f8      	b.n	8005674 <_strtod_l+0x274>
 8005682:	bf00      	nop
 8005684:	08008db8 	.word	0x08008db8
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800568e:	1c5f      	adds	r7, r3, #1
 8005690:	971b      	str	r7, [sp, #108]	; 0x6c
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d0f9      	beq.n	800568c <_strtod_l+0x28c>
 8005698:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800569c:	2f08      	cmp	r7, #8
 800569e:	f63f af7d 	bhi.w	800559c <_strtod_l+0x19c>
 80056a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80056a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056a8:	930a      	str	r3, [sp, #40]	; 0x28
 80056aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056ac:	1c5f      	adds	r7, r3, #1
 80056ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80056b6:	f1b8 0f09 	cmp.w	r8, #9
 80056ba:	d937      	bls.n	800572c <_strtod_l+0x32c>
 80056bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056be:	1a7f      	subs	r7, r7, r1
 80056c0:	2f08      	cmp	r7, #8
 80056c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80056c6:	dc37      	bgt.n	8005738 <_strtod_l+0x338>
 80056c8:	45be      	cmp	lr, r7
 80056ca:	bfa8      	it	ge
 80056cc:	46be      	movge	lr, r7
 80056ce:	f1bc 0f00 	cmp.w	ip, #0
 80056d2:	d001      	beq.n	80056d8 <_strtod_l+0x2d8>
 80056d4:	f1ce 0e00 	rsb	lr, lr, #0
 80056d8:	2c00      	cmp	r4, #0
 80056da:	d151      	bne.n	8005780 <_strtod_l+0x380>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f47f aece 	bne.w	800547e <_strtod_l+0x7e>
 80056e2:	9a06      	ldr	r2, [sp, #24]
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	f47f aeca 	bne.w	800547e <_strtod_l+0x7e>
 80056ea:	9a04      	ldr	r2, [sp, #16]
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	f47f aee4 	bne.w	80054ba <_strtod_l+0xba>
 80056f2:	2b4e      	cmp	r3, #78	; 0x4e
 80056f4:	d027      	beq.n	8005746 <_strtod_l+0x346>
 80056f6:	dc21      	bgt.n	800573c <_strtod_l+0x33c>
 80056f8:	2b49      	cmp	r3, #73	; 0x49
 80056fa:	f47f aede 	bne.w	80054ba <_strtod_l+0xba>
 80056fe:	49a0      	ldr	r1, [pc, #640]	; (8005980 <_strtod_l+0x580>)
 8005700:	a81b      	add	r0, sp, #108	; 0x6c
 8005702:	f002 f811 	bl	8007728 <__match>
 8005706:	2800      	cmp	r0, #0
 8005708:	f43f aed7 	beq.w	80054ba <_strtod_l+0xba>
 800570c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800570e:	499d      	ldr	r1, [pc, #628]	; (8005984 <_strtod_l+0x584>)
 8005710:	3b01      	subs	r3, #1
 8005712:	a81b      	add	r0, sp, #108	; 0x6c
 8005714:	931b      	str	r3, [sp, #108]	; 0x6c
 8005716:	f002 f807 	bl	8007728 <__match>
 800571a:	b910      	cbnz	r0, 8005722 <_strtod_l+0x322>
 800571c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800571e:	3301      	adds	r3, #1
 8005720:	931b      	str	r3, [sp, #108]	; 0x6c
 8005722:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005998 <_strtod_l+0x598>
 8005726:	f04f 0a00 	mov.w	sl, #0
 800572a:	e6a8      	b.n	800547e <_strtod_l+0x7e>
 800572c:	210a      	movs	r1, #10
 800572e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005732:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005736:	e7b8      	b.n	80056aa <_strtod_l+0x2aa>
 8005738:	46be      	mov	lr, r7
 800573a:	e7c8      	b.n	80056ce <_strtod_l+0x2ce>
 800573c:	2b69      	cmp	r3, #105	; 0x69
 800573e:	d0de      	beq.n	80056fe <_strtod_l+0x2fe>
 8005740:	2b6e      	cmp	r3, #110	; 0x6e
 8005742:	f47f aeba 	bne.w	80054ba <_strtod_l+0xba>
 8005746:	4990      	ldr	r1, [pc, #576]	; (8005988 <_strtod_l+0x588>)
 8005748:	a81b      	add	r0, sp, #108	; 0x6c
 800574a:	f001 ffed 	bl	8007728 <__match>
 800574e:	2800      	cmp	r0, #0
 8005750:	f43f aeb3 	beq.w	80054ba <_strtod_l+0xba>
 8005754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b28      	cmp	r3, #40	; 0x28
 800575a:	d10e      	bne.n	800577a <_strtod_l+0x37a>
 800575c:	aa1e      	add	r2, sp, #120	; 0x78
 800575e:	498b      	ldr	r1, [pc, #556]	; (800598c <_strtod_l+0x58c>)
 8005760:	a81b      	add	r0, sp, #108	; 0x6c
 8005762:	f001 fff5 	bl	8007750 <__hexnan>
 8005766:	2805      	cmp	r0, #5
 8005768:	d107      	bne.n	800577a <_strtod_l+0x37a>
 800576a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800576c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005770:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005774:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005778:	e681      	b.n	800547e <_strtod_l+0x7e>
 800577a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80059a0 <_strtod_l+0x5a0>
 800577e:	e7d2      	b.n	8005726 <_strtod_l+0x326>
 8005780:	ebae 0302 	sub.w	r3, lr, r2
 8005784:	9306      	str	r3, [sp, #24]
 8005786:	9b05      	ldr	r3, [sp, #20]
 8005788:	9807      	ldr	r0, [sp, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf08      	it	eq
 800578e:	4623      	moveq	r3, r4
 8005790:	2c10      	cmp	r4, #16
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	46a0      	mov	r8, r4
 8005796:	bfa8      	it	ge
 8005798:	f04f 0810 	movge.w	r8, #16
 800579c:	f7fa fe8a 	bl	80004b4 <__aeabi_ui2d>
 80057a0:	2c09      	cmp	r4, #9
 80057a2:	4682      	mov	sl, r0
 80057a4:	468b      	mov	fp, r1
 80057a6:	dc13      	bgt.n	80057d0 <_strtod_l+0x3d0>
 80057a8:	9b06      	ldr	r3, [sp, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f43f ae67 	beq.w	800547e <_strtod_l+0x7e>
 80057b0:	9b06      	ldr	r3, [sp, #24]
 80057b2:	dd7a      	ble.n	80058aa <_strtod_l+0x4aa>
 80057b4:	2b16      	cmp	r3, #22
 80057b6:	dc61      	bgt.n	800587c <_strtod_l+0x47c>
 80057b8:	4a75      	ldr	r2, [pc, #468]	; (8005990 <_strtod_l+0x590>)
 80057ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80057be:	e9de 0100 	ldrd	r0, r1, [lr]
 80057c2:	4652      	mov	r2, sl
 80057c4:	465b      	mov	r3, fp
 80057c6:	f7fa feef 	bl	80005a8 <__aeabi_dmul>
 80057ca:	4682      	mov	sl, r0
 80057cc:	468b      	mov	fp, r1
 80057ce:	e656      	b.n	800547e <_strtod_l+0x7e>
 80057d0:	4b6f      	ldr	r3, [pc, #444]	; (8005990 <_strtod_l+0x590>)
 80057d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80057d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80057da:	f7fa fee5 	bl	80005a8 <__aeabi_dmul>
 80057de:	4606      	mov	r6, r0
 80057e0:	4628      	mov	r0, r5
 80057e2:	460f      	mov	r7, r1
 80057e4:	f7fa fe66 	bl	80004b4 <__aeabi_ui2d>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fa fd24 	bl	800023c <__adddf3>
 80057f4:	2c0f      	cmp	r4, #15
 80057f6:	4682      	mov	sl, r0
 80057f8:	468b      	mov	fp, r1
 80057fa:	ddd5      	ble.n	80057a8 <_strtod_l+0x3a8>
 80057fc:	9b06      	ldr	r3, [sp, #24]
 80057fe:	eba4 0808 	sub.w	r8, r4, r8
 8005802:	4498      	add	r8, r3
 8005804:	f1b8 0f00 	cmp.w	r8, #0
 8005808:	f340 8096 	ble.w	8005938 <_strtod_l+0x538>
 800580c:	f018 030f 	ands.w	r3, r8, #15
 8005810:	d00a      	beq.n	8005828 <_strtod_l+0x428>
 8005812:	495f      	ldr	r1, [pc, #380]	; (8005990 <_strtod_l+0x590>)
 8005814:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005818:	4652      	mov	r2, sl
 800581a:	465b      	mov	r3, fp
 800581c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005820:	f7fa fec2 	bl	80005a8 <__aeabi_dmul>
 8005824:	4682      	mov	sl, r0
 8005826:	468b      	mov	fp, r1
 8005828:	f038 080f 	bics.w	r8, r8, #15
 800582c:	d073      	beq.n	8005916 <_strtod_l+0x516>
 800582e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005832:	dd47      	ble.n	80058c4 <_strtod_l+0x4c4>
 8005834:	2400      	movs	r4, #0
 8005836:	46a0      	mov	r8, r4
 8005838:	9407      	str	r4, [sp, #28]
 800583a:	9405      	str	r4, [sp, #20]
 800583c:	2322      	movs	r3, #34	; 0x22
 800583e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005998 <_strtod_l+0x598>
 8005842:	f8c9 3000 	str.w	r3, [r9]
 8005846:	f04f 0a00 	mov.w	sl, #0
 800584a:	9b07      	ldr	r3, [sp, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f43f ae16 	beq.w	800547e <_strtod_l+0x7e>
 8005852:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005854:	4648      	mov	r0, r9
 8005856:	f002 f8d1 	bl	80079fc <_Bfree>
 800585a:	9905      	ldr	r1, [sp, #20]
 800585c:	4648      	mov	r0, r9
 800585e:	f002 f8cd 	bl	80079fc <_Bfree>
 8005862:	4641      	mov	r1, r8
 8005864:	4648      	mov	r0, r9
 8005866:	f002 f8c9 	bl	80079fc <_Bfree>
 800586a:	9907      	ldr	r1, [sp, #28]
 800586c:	4648      	mov	r0, r9
 800586e:	f002 f8c5 	bl	80079fc <_Bfree>
 8005872:	4621      	mov	r1, r4
 8005874:	4648      	mov	r0, r9
 8005876:	f002 f8c1 	bl	80079fc <_Bfree>
 800587a:	e600      	b.n	800547e <_strtod_l+0x7e>
 800587c:	9a06      	ldr	r2, [sp, #24]
 800587e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005882:	4293      	cmp	r3, r2
 8005884:	dbba      	blt.n	80057fc <_strtod_l+0x3fc>
 8005886:	4d42      	ldr	r5, [pc, #264]	; (8005990 <_strtod_l+0x590>)
 8005888:	f1c4 040f 	rsb	r4, r4, #15
 800588c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005890:	4652      	mov	r2, sl
 8005892:	465b      	mov	r3, fp
 8005894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005898:	f7fa fe86 	bl	80005a8 <__aeabi_dmul>
 800589c:	9b06      	ldr	r3, [sp, #24]
 800589e:	1b1c      	subs	r4, r3, r4
 80058a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80058a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058a8:	e78d      	b.n	80057c6 <_strtod_l+0x3c6>
 80058aa:	f113 0f16 	cmn.w	r3, #22
 80058ae:	dba5      	blt.n	80057fc <_strtod_l+0x3fc>
 80058b0:	4a37      	ldr	r2, [pc, #220]	; (8005990 <_strtod_l+0x590>)
 80058b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80058b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80058ba:	4650      	mov	r0, sl
 80058bc:	4659      	mov	r1, fp
 80058be:	f7fa ff9d 	bl	80007fc <__aeabi_ddiv>
 80058c2:	e782      	b.n	80057ca <_strtod_l+0x3ca>
 80058c4:	2300      	movs	r3, #0
 80058c6:	4e33      	ldr	r6, [pc, #204]	; (8005994 <_strtod_l+0x594>)
 80058c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80058cc:	4650      	mov	r0, sl
 80058ce:	4659      	mov	r1, fp
 80058d0:	461d      	mov	r5, r3
 80058d2:	f1b8 0f01 	cmp.w	r8, #1
 80058d6:	dc21      	bgt.n	800591c <_strtod_l+0x51c>
 80058d8:	b10b      	cbz	r3, 80058de <_strtod_l+0x4de>
 80058da:	4682      	mov	sl, r0
 80058dc:	468b      	mov	fp, r1
 80058de:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <_strtod_l+0x594>)
 80058e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80058e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80058e8:	4652      	mov	r2, sl
 80058ea:	465b      	mov	r3, fp
 80058ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80058f0:	f7fa fe5a 	bl	80005a8 <__aeabi_dmul>
 80058f4:	4b28      	ldr	r3, [pc, #160]	; (8005998 <_strtod_l+0x598>)
 80058f6:	460a      	mov	r2, r1
 80058f8:	400b      	ands	r3, r1
 80058fa:	4928      	ldr	r1, [pc, #160]	; (800599c <_strtod_l+0x59c>)
 80058fc:	428b      	cmp	r3, r1
 80058fe:	4682      	mov	sl, r0
 8005900:	d898      	bhi.n	8005834 <_strtod_l+0x434>
 8005902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005906:	428b      	cmp	r3, r1
 8005908:	bf86      	itte	hi
 800590a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80059a4 <_strtod_l+0x5a4>
 800590e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005912:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005916:	2300      	movs	r3, #0
 8005918:	9304      	str	r3, [sp, #16]
 800591a:	e077      	b.n	8005a0c <_strtod_l+0x60c>
 800591c:	f018 0f01 	tst.w	r8, #1
 8005920:	d006      	beq.n	8005930 <_strtod_l+0x530>
 8005922:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa fe3d 	bl	80005a8 <__aeabi_dmul>
 800592e:	2301      	movs	r3, #1
 8005930:	3501      	adds	r5, #1
 8005932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005936:	e7cc      	b.n	80058d2 <_strtod_l+0x4d2>
 8005938:	d0ed      	beq.n	8005916 <_strtod_l+0x516>
 800593a:	f1c8 0800 	rsb	r8, r8, #0
 800593e:	f018 020f 	ands.w	r2, r8, #15
 8005942:	d00a      	beq.n	800595a <_strtod_l+0x55a>
 8005944:	4b12      	ldr	r3, [pc, #72]	; (8005990 <_strtod_l+0x590>)
 8005946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800594a:	4650      	mov	r0, sl
 800594c:	4659      	mov	r1, fp
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f7fa ff53 	bl	80007fc <__aeabi_ddiv>
 8005956:	4682      	mov	sl, r0
 8005958:	468b      	mov	fp, r1
 800595a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800595e:	d0da      	beq.n	8005916 <_strtod_l+0x516>
 8005960:	f1b8 0f1f 	cmp.w	r8, #31
 8005964:	dd20      	ble.n	80059a8 <_strtod_l+0x5a8>
 8005966:	2400      	movs	r4, #0
 8005968:	46a0      	mov	r8, r4
 800596a:	9407      	str	r4, [sp, #28]
 800596c:	9405      	str	r4, [sp, #20]
 800596e:	2322      	movs	r3, #34	; 0x22
 8005970:	f04f 0a00 	mov.w	sl, #0
 8005974:	f04f 0b00 	mov.w	fp, #0
 8005978:	f8c9 3000 	str.w	r3, [r9]
 800597c:	e765      	b.n	800584a <_strtod_l+0x44a>
 800597e:	bf00      	nop
 8005980:	08008d81 	.word	0x08008d81
 8005984:	08008e0b 	.word	0x08008e0b
 8005988:	08008d89 	.word	0x08008d89
 800598c:	08008dcc 	.word	0x08008dcc
 8005990:	08008eb0 	.word	0x08008eb0
 8005994:	08008e88 	.word	0x08008e88
 8005998:	7ff00000 	.word	0x7ff00000
 800599c:	7ca00000 	.word	0x7ca00000
 80059a0:	fff80000 	.word	0xfff80000
 80059a4:	7fefffff 	.word	0x7fefffff
 80059a8:	f018 0310 	ands.w	r3, r8, #16
 80059ac:	bf18      	it	ne
 80059ae:	236a      	movne	r3, #106	; 0x6a
 80059b0:	4da0      	ldr	r5, [pc, #640]	; (8005c34 <_strtod_l+0x834>)
 80059b2:	9304      	str	r3, [sp, #16]
 80059b4:	4650      	mov	r0, sl
 80059b6:	4659      	mov	r1, fp
 80059b8:	2300      	movs	r3, #0
 80059ba:	f1b8 0f00 	cmp.w	r8, #0
 80059be:	f300 810a 	bgt.w	8005bd6 <_strtod_l+0x7d6>
 80059c2:	b10b      	cbz	r3, 80059c8 <_strtod_l+0x5c8>
 80059c4:	4682      	mov	sl, r0
 80059c6:	468b      	mov	fp, r1
 80059c8:	9b04      	ldr	r3, [sp, #16]
 80059ca:	b1bb      	cbz	r3, 80059fc <_strtod_l+0x5fc>
 80059cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80059d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	4659      	mov	r1, fp
 80059d8:	dd10      	ble.n	80059fc <_strtod_l+0x5fc>
 80059da:	2b1f      	cmp	r3, #31
 80059dc:	f340 8107 	ble.w	8005bee <_strtod_l+0x7ee>
 80059e0:	2b34      	cmp	r3, #52	; 0x34
 80059e2:	bfde      	ittt	le
 80059e4:	3b20      	suble	r3, #32
 80059e6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80059ea:	fa02 f303 	lslle.w	r3, r2, r3
 80059ee:	f04f 0a00 	mov.w	sl, #0
 80059f2:	bfcc      	ite	gt
 80059f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80059f8:	ea03 0b01 	andle.w	fp, r3, r1
 80059fc:	2200      	movs	r2, #0
 80059fe:	2300      	movs	r3, #0
 8005a00:	4650      	mov	r0, sl
 8005a02:	4659      	mov	r1, fp
 8005a04:	f7fb f838 	bl	8000a78 <__aeabi_dcmpeq>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1ac      	bne.n	8005966 <_strtod_l+0x566>
 8005a0c:	9b07      	ldr	r3, [sp, #28]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	9a05      	ldr	r2, [sp, #20]
 8005a12:	9908      	ldr	r1, [sp, #32]
 8005a14:	4623      	mov	r3, r4
 8005a16:	4648      	mov	r0, r9
 8005a18:	f002 f842 	bl	8007aa0 <__s2b>
 8005a1c:	9007      	str	r0, [sp, #28]
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f43f af08 	beq.w	8005834 <_strtod_l+0x434>
 8005a24:	9a06      	ldr	r2, [sp, #24]
 8005a26:	9b06      	ldr	r3, [sp, #24]
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	f1c3 0300 	rsb	r3, r3, #0
 8005a2e:	bfa8      	it	ge
 8005a30:	2300      	movge	r3, #0
 8005a32:	930e      	str	r3, [sp, #56]	; 0x38
 8005a34:	2400      	movs	r4, #0
 8005a36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005a3a:	9316      	str	r3, [sp, #88]	; 0x58
 8005a3c:	46a0      	mov	r8, r4
 8005a3e:	9b07      	ldr	r3, [sp, #28]
 8005a40:	4648      	mov	r0, r9
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	f001 ffa6 	bl	8007994 <_Balloc>
 8005a48:	9005      	str	r0, [sp, #20]
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	f43f aef6 	beq.w	800583c <_strtod_l+0x43c>
 8005a50:	9b07      	ldr	r3, [sp, #28]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	3202      	adds	r2, #2
 8005a56:	f103 010c 	add.w	r1, r3, #12
 8005a5a:	0092      	lsls	r2, r2, #2
 8005a5c:	300c      	adds	r0, #12
 8005a5e:	f7fe fdbd 	bl	80045dc <memcpy>
 8005a62:	aa1e      	add	r2, sp, #120	; 0x78
 8005a64:	a91d      	add	r1, sp, #116	; 0x74
 8005a66:	ec4b ab10 	vmov	d0, sl, fp
 8005a6a:	4648      	mov	r0, r9
 8005a6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005a70:	f002 fad2 	bl	8008018 <__d2b>
 8005a74:	901c      	str	r0, [sp, #112]	; 0x70
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f43f aee0 	beq.w	800583c <_strtod_l+0x43c>
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4648      	mov	r0, r9
 8005a80:	f002 f89a 	bl	8007bb8 <__i2b>
 8005a84:	4680      	mov	r8, r0
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f43f aed8 	beq.w	800583c <_strtod_l+0x43c>
 8005a8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005a8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a90:	2e00      	cmp	r6, #0
 8005a92:	bfab      	itete	ge
 8005a94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005a98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005a9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005a9c:	bfac      	ite	ge
 8005a9e:	18f7      	addge	r7, r6, r3
 8005aa0:	1b9d      	sublt	r5, r3, r6
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	1af6      	subs	r6, r6, r3
 8005aa6:	4416      	add	r6, r2
 8005aa8:	4b63      	ldr	r3, [pc, #396]	; (8005c38 <_strtod_l+0x838>)
 8005aaa:	3e01      	subs	r6, #1
 8005aac:	429e      	cmp	r6, r3
 8005aae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ab2:	f280 80af 	bge.w	8005c14 <_strtod_l+0x814>
 8005ab6:	1b9b      	subs	r3, r3, r6
 8005ab8:	2b1f      	cmp	r3, #31
 8005aba:	eba2 0203 	sub.w	r2, r2, r3
 8005abe:	f04f 0101 	mov.w	r1, #1
 8005ac2:	f300 809b 	bgt.w	8005bfc <_strtod_l+0x7fc>
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	930f      	str	r3, [sp, #60]	; 0x3c
 8005acc:	2300      	movs	r3, #0
 8005ace:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad0:	18be      	adds	r6, r7, r2
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	42b7      	cmp	r7, r6
 8005ad6:	4415      	add	r5, r2
 8005ad8:	441d      	add	r5, r3
 8005ada:	463b      	mov	r3, r7
 8005adc:	bfa8      	it	ge
 8005ade:	4633      	movge	r3, r6
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	bfa8      	it	ge
 8005ae4:	462b      	movge	r3, r5
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bfc2      	ittt	gt
 8005aea:	1af6      	subgt	r6, r6, r3
 8005aec:	1aed      	subgt	r5, r5, r3
 8005aee:	1aff      	subgt	r7, r7, r3
 8005af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af2:	b1bb      	cbz	r3, 8005b24 <_strtod_l+0x724>
 8005af4:	4641      	mov	r1, r8
 8005af6:	461a      	mov	r2, r3
 8005af8:	4648      	mov	r0, r9
 8005afa:	f002 f8fd 	bl	8007cf8 <__pow5mult>
 8005afe:	4680      	mov	r8, r0
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f43f ae9b 	beq.w	800583c <_strtod_l+0x43c>
 8005b06:	4601      	mov	r1, r0
 8005b08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005b0a:	4648      	mov	r0, r9
 8005b0c:	f002 f85d 	bl	8007bca <__multiply>
 8005b10:	900c      	str	r0, [sp, #48]	; 0x30
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f43f ae92 	beq.w	800583c <_strtod_l+0x43c>
 8005b18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b1a:	4648      	mov	r0, r9
 8005b1c:	f001 ff6e 	bl	80079fc <_Bfree>
 8005b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b22:	931c      	str	r3, [sp, #112]	; 0x70
 8005b24:	2e00      	cmp	r6, #0
 8005b26:	dc7a      	bgt.n	8005c1e <_strtod_l+0x81e>
 8005b28:	9b06      	ldr	r3, [sp, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	dd08      	ble.n	8005b40 <_strtod_l+0x740>
 8005b2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b30:	9905      	ldr	r1, [sp, #20]
 8005b32:	4648      	mov	r0, r9
 8005b34:	f002 f8e0 	bl	8007cf8 <__pow5mult>
 8005b38:	9005      	str	r0, [sp, #20]
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	f43f ae7e 	beq.w	800583c <_strtod_l+0x43c>
 8005b40:	2d00      	cmp	r5, #0
 8005b42:	dd08      	ble.n	8005b56 <_strtod_l+0x756>
 8005b44:	462a      	mov	r2, r5
 8005b46:	9905      	ldr	r1, [sp, #20]
 8005b48:	4648      	mov	r0, r9
 8005b4a:	f002 f923 	bl	8007d94 <__lshift>
 8005b4e:	9005      	str	r0, [sp, #20]
 8005b50:	2800      	cmp	r0, #0
 8005b52:	f43f ae73 	beq.w	800583c <_strtod_l+0x43c>
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	dd08      	ble.n	8005b6c <_strtod_l+0x76c>
 8005b5a:	4641      	mov	r1, r8
 8005b5c:	463a      	mov	r2, r7
 8005b5e:	4648      	mov	r0, r9
 8005b60:	f002 f918 	bl	8007d94 <__lshift>
 8005b64:	4680      	mov	r8, r0
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f43f ae68 	beq.w	800583c <_strtod_l+0x43c>
 8005b6c:	9a05      	ldr	r2, [sp, #20]
 8005b6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b70:	4648      	mov	r0, r9
 8005b72:	f002 f97d 	bl	8007e70 <__mdiff>
 8005b76:	4604      	mov	r4, r0
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f43f ae5f 	beq.w	800583c <_strtod_l+0x43c>
 8005b7e:	68c3      	ldr	r3, [r0, #12]
 8005b80:	930c      	str	r3, [sp, #48]	; 0x30
 8005b82:	2300      	movs	r3, #0
 8005b84:	60c3      	str	r3, [r0, #12]
 8005b86:	4641      	mov	r1, r8
 8005b88:	f002 f958 	bl	8007e3c <__mcmp>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	da55      	bge.n	8005c3c <_strtod_l+0x83c>
 8005b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b92:	b9e3      	cbnz	r3, 8005bce <_strtod_l+0x7ce>
 8005b94:	f1ba 0f00 	cmp.w	sl, #0
 8005b98:	d119      	bne.n	8005bce <_strtod_l+0x7ce>
 8005b9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b9e:	b9b3      	cbnz	r3, 8005bce <_strtod_l+0x7ce>
 8005ba0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ba4:	0d1b      	lsrs	r3, r3, #20
 8005ba6:	051b      	lsls	r3, r3, #20
 8005ba8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005bac:	d90f      	bls.n	8005bce <_strtod_l+0x7ce>
 8005bae:	6963      	ldr	r3, [r4, #20]
 8005bb0:	b913      	cbnz	r3, 8005bb8 <_strtod_l+0x7b8>
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	dd0a      	ble.n	8005bce <_strtod_l+0x7ce>
 8005bb8:	4621      	mov	r1, r4
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4648      	mov	r0, r9
 8005bbe:	f002 f8e9 	bl	8007d94 <__lshift>
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	f002 f939 	bl	8007e3c <__mcmp>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	dc67      	bgt.n	8005c9e <_strtod_l+0x89e>
 8005bce:	9b04      	ldr	r3, [sp, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d171      	bne.n	8005cb8 <_strtod_l+0x8b8>
 8005bd4:	e63d      	b.n	8005852 <_strtod_l+0x452>
 8005bd6:	f018 0f01 	tst.w	r8, #1
 8005bda:	d004      	beq.n	8005be6 <_strtod_l+0x7e6>
 8005bdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005be0:	f7fa fce2 	bl	80005a8 <__aeabi_dmul>
 8005be4:	2301      	movs	r3, #1
 8005be6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005bea:	3508      	adds	r5, #8
 8005bec:	e6e5      	b.n	80059ba <_strtod_l+0x5ba>
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	ea03 0a0a 	and.w	sl, r3, sl
 8005bfa:	e6ff      	b.n	80059fc <_strtod_l+0x5fc>
 8005bfc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005c00:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005c04:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005c08:	36e2      	adds	r6, #226	; 0xe2
 8005c0a:	fa01 f306 	lsl.w	r3, r1, r6
 8005c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c10:	910f      	str	r1, [sp, #60]	; 0x3c
 8005c12:	e75d      	b.n	8005ad0 <_strtod_l+0x6d0>
 8005c14:	2300      	movs	r3, #0
 8005c16:	930a      	str	r3, [sp, #40]	; 0x28
 8005c18:	2301      	movs	r3, #1
 8005c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c1c:	e758      	b.n	8005ad0 <_strtod_l+0x6d0>
 8005c1e:	4632      	mov	r2, r6
 8005c20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c22:	4648      	mov	r0, r9
 8005c24:	f002 f8b6 	bl	8007d94 <__lshift>
 8005c28:	901c      	str	r0, [sp, #112]	; 0x70
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f47f af7c 	bne.w	8005b28 <_strtod_l+0x728>
 8005c30:	e604      	b.n	800583c <_strtod_l+0x43c>
 8005c32:	bf00      	nop
 8005c34:	08008de0 	.word	0x08008de0
 8005c38:	fffffc02 	.word	0xfffffc02
 8005c3c:	465d      	mov	r5, fp
 8005c3e:	f040 8086 	bne.w	8005d4e <_strtod_l+0x94e>
 8005c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c48:	b32a      	cbz	r2, 8005c96 <_strtod_l+0x896>
 8005c4a:	4aaf      	ldr	r2, [pc, #700]	; (8005f08 <_strtod_l+0xb08>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d153      	bne.n	8005cf8 <_strtod_l+0x8f8>
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	4650      	mov	r0, sl
 8005c54:	b1d3      	cbz	r3, 8005c8c <_strtod_l+0x88c>
 8005c56:	4aad      	ldr	r2, [pc, #692]	; (8005f0c <_strtod_l+0xb0c>)
 8005c58:	402a      	ands	r2, r5
 8005c5a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005c5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c62:	d816      	bhi.n	8005c92 <_strtod_l+0x892>
 8005c64:	0d12      	lsrs	r2, r2, #20
 8005c66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	4298      	cmp	r0, r3
 8005c70:	d142      	bne.n	8005cf8 <_strtod_l+0x8f8>
 8005c72:	4ba7      	ldr	r3, [pc, #668]	; (8005f10 <_strtod_l+0xb10>)
 8005c74:	429d      	cmp	r5, r3
 8005c76:	d102      	bne.n	8005c7e <_strtod_l+0x87e>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f addf 	beq.w	800583c <_strtod_l+0x43c>
 8005c7e:	4ba3      	ldr	r3, [pc, #652]	; (8005f0c <_strtod_l+0xb0c>)
 8005c80:	402b      	ands	r3, r5
 8005c82:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005c86:	f04f 0a00 	mov.w	sl, #0
 8005c8a:	e7a0      	b.n	8005bce <_strtod_l+0x7ce>
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c90:	e7ed      	b.n	8005c6e <_strtod_l+0x86e>
 8005c92:	460b      	mov	r3, r1
 8005c94:	e7eb      	b.n	8005c6e <_strtod_l+0x86e>
 8005c96:	bb7b      	cbnz	r3, 8005cf8 <_strtod_l+0x8f8>
 8005c98:	f1ba 0f00 	cmp.w	sl, #0
 8005c9c:	d12c      	bne.n	8005cf8 <_strtod_l+0x8f8>
 8005c9e:	9904      	ldr	r1, [sp, #16]
 8005ca0:	4a9a      	ldr	r2, [pc, #616]	; (8005f0c <_strtod_l+0xb0c>)
 8005ca2:	465b      	mov	r3, fp
 8005ca4:	b1f1      	cbz	r1, 8005ce4 <_strtod_l+0x8e4>
 8005ca6:	ea02 010b 	and.w	r1, r2, fp
 8005caa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005cae:	dc19      	bgt.n	8005ce4 <_strtod_l+0x8e4>
 8005cb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005cb4:	f77f ae5b 	ble.w	800596e <_strtod_l+0x56e>
 8005cb8:	4a96      	ldr	r2, [pc, #600]	; (8005f14 <_strtod_l+0xb14>)
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005cc0:	4650      	mov	r0, sl
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005cc8:	f7fa fc6e 	bl	80005a8 <__aeabi_dmul>
 8005ccc:	4682      	mov	sl, r0
 8005cce:	468b      	mov	fp, r1
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	f47f adbe 	bne.w	8005852 <_strtod_l+0x452>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f47f adbb 	bne.w	8005852 <_strtod_l+0x452>
 8005cdc:	2322      	movs	r3, #34	; 0x22
 8005cde:	f8c9 3000 	str.w	r3, [r9]
 8005ce2:	e5b6      	b.n	8005852 <_strtod_l+0x452>
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005cea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005cee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005cf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005cf6:	e76a      	b.n	8005bce <_strtod_l+0x7ce>
 8005cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfa:	b193      	cbz	r3, 8005d22 <_strtod_l+0x922>
 8005cfc:	422b      	tst	r3, r5
 8005cfe:	f43f af66 	beq.w	8005bce <_strtod_l+0x7ce>
 8005d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d04:	9a04      	ldr	r2, [sp, #16]
 8005d06:	4650      	mov	r0, sl
 8005d08:	4659      	mov	r1, fp
 8005d0a:	b173      	cbz	r3, 8005d2a <_strtod_l+0x92a>
 8005d0c:	f7ff fb5a 	bl	80053c4 <sulp>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005d18:	f7fa fa90 	bl	800023c <__adddf3>
 8005d1c:	4682      	mov	sl, r0
 8005d1e:	468b      	mov	fp, r1
 8005d20:	e755      	b.n	8005bce <_strtod_l+0x7ce>
 8005d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d24:	ea13 0f0a 	tst.w	r3, sl
 8005d28:	e7e9      	b.n	8005cfe <_strtod_l+0x8fe>
 8005d2a:	f7ff fb4b 	bl	80053c4 <sulp>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005d36:	f7fa fa7f 	bl	8000238 <__aeabi_dsub>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4682      	mov	sl, r0
 8005d40:	468b      	mov	fp, r1
 8005d42:	f7fa fe99 	bl	8000a78 <__aeabi_dcmpeq>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f47f ae11 	bne.w	800596e <_strtod_l+0x56e>
 8005d4c:	e73f      	b.n	8005bce <_strtod_l+0x7ce>
 8005d4e:	4641      	mov	r1, r8
 8005d50:	4620      	mov	r0, r4
 8005d52:	f002 f9b0 	bl	80080b6 <__ratio>
 8005d56:	ec57 6b10 	vmov	r6, r7, d0
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d60:	ee10 0a10 	vmov	r0, s0
 8005d64:	4639      	mov	r1, r7
 8005d66:	f7fa fe9b 	bl	8000aa0 <__aeabi_dcmple>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d077      	beq.n	8005e5e <_strtod_l+0xa5e>
 8005d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d04a      	beq.n	8005e0a <_strtod_l+0xa0a>
 8005d74:	4b68      	ldr	r3, [pc, #416]	; (8005f18 <_strtod_l+0xb18>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d7c:	4f66      	ldr	r7, [pc, #408]	; (8005f18 <_strtod_l+0xb18>)
 8005d7e:	2600      	movs	r6, #0
 8005d80:	4b62      	ldr	r3, [pc, #392]	; (8005f0c <_strtod_l+0xb0c>)
 8005d82:	402b      	ands	r3, r5
 8005d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d88:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <_strtod_l+0xb1c>)
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f040 80ce 	bne.w	8005f2c <_strtod_l+0xb2c>
 8005d90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d98:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005d9c:	ec4b ab10 	vmov	d0, sl, fp
 8005da0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005da4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005da8:	f002 f8c0 	bl	8007f2c <__ulp>
 8005dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005db0:	ec53 2b10 	vmov	r2, r3, d0
 8005db4:	f7fa fbf8 	bl	80005a8 <__aeabi_dmul>
 8005db8:	4652      	mov	r2, sl
 8005dba:	465b      	mov	r3, fp
 8005dbc:	f7fa fa3e 	bl	800023c <__adddf3>
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4952      	ldr	r1, [pc, #328]	; (8005f0c <_strtod_l+0xb0c>)
 8005dc4:	4a56      	ldr	r2, [pc, #344]	; (8005f20 <_strtod_l+0xb20>)
 8005dc6:	4019      	ands	r1, r3
 8005dc8:	4291      	cmp	r1, r2
 8005dca:	4682      	mov	sl, r0
 8005dcc:	d95b      	bls.n	8005e86 <_strtod_l+0xa86>
 8005dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d103      	bne.n	8005de0 <_strtod_l+0x9e0>
 8005dd8:	9b08      	ldr	r3, [sp, #32]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f43f ad2e 	beq.w	800583c <_strtod_l+0x43c>
 8005de0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005f10 <_strtod_l+0xb10>
 8005de4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005de8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005dea:	4648      	mov	r0, r9
 8005dec:	f001 fe06 	bl	80079fc <_Bfree>
 8005df0:	9905      	ldr	r1, [sp, #20]
 8005df2:	4648      	mov	r0, r9
 8005df4:	f001 fe02 	bl	80079fc <_Bfree>
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4648      	mov	r0, r9
 8005dfc:	f001 fdfe 	bl	80079fc <_Bfree>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4648      	mov	r0, r9
 8005e04:	f001 fdfa 	bl	80079fc <_Bfree>
 8005e08:	e619      	b.n	8005a3e <_strtod_l+0x63e>
 8005e0a:	f1ba 0f00 	cmp.w	sl, #0
 8005e0e:	d11a      	bne.n	8005e46 <_strtod_l+0xa46>
 8005e10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e14:	b9eb      	cbnz	r3, 8005e52 <_strtod_l+0xa52>
 8005e16:	2200      	movs	r2, #0
 8005e18:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <_strtod_l+0xb18>)
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	f7fa fe35 	bl	8000a8c <__aeabi_dcmplt>
 8005e22:	b9c8      	cbnz	r0, 8005e58 <_strtod_l+0xa58>
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4b3e      	ldr	r3, [pc, #248]	; (8005f24 <_strtod_l+0xb24>)
 8005e2c:	f7fa fbbc 	bl	80005a8 <__aeabi_dmul>
 8005e30:	4606      	mov	r6, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005e38:	9618      	str	r6, [sp, #96]	; 0x60
 8005e3a:	9319      	str	r3, [sp, #100]	; 0x64
 8005e3c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005e40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005e44:	e79c      	b.n	8005d80 <_strtod_l+0x980>
 8005e46:	f1ba 0f01 	cmp.w	sl, #1
 8005e4a:	d102      	bne.n	8005e52 <_strtod_l+0xa52>
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	f43f ad8e 	beq.w	800596e <_strtod_l+0x56e>
 8005e52:	2200      	movs	r2, #0
 8005e54:	4b34      	ldr	r3, [pc, #208]	; (8005f28 <_strtod_l+0xb28>)
 8005e56:	e78f      	b.n	8005d78 <_strtod_l+0x978>
 8005e58:	2600      	movs	r6, #0
 8005e5a:	4f32      	ldr	r7, [pc, #200]	; (8005f24 <_strtod_l+0xb24>)
 8005e5c:	e7ea      	b.n	8005e34 <_strtod_l+0xa34>
 8005e5e:	4b31      	ldr	r3, [pc, #196]	; (8005f24 <_strtod_l+0xb24>)
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	2200      	movs	r2, #0
 8005e66:	f7fa fb9f 	bl	80005a8 <__aeabi_dmul>
 8005e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	b933      	cbnz	r3, 8005e80 <_strtod_l+0xa80>
 8005e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e76:	9010      	str	r0, [sp, #64]	; 0x40
 8005e78:	9311      	str	r3, [sp, #68]	; 0x44
 8005e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e7e:	e7df      	b.n	8005e40 <_strtod_l+0xa40>
 8005e80:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005e84:	e7f9      	b.n	8005e7a <_strtod_l+0xa7a>
 8005e86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005e8a:	9b04      	ldr	r3, [sp, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ab      	bne.n	8005de8 <_strtod_l+0x9e8>
 8005e90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e94:	0d1b      	lsrs	r3, r3, #20
 8005e96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e98:	051b      	lsls	r3, r3, #20
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	465d      	mov	r5, fp
 8005e9e:	d1a3      	bne.n	8005de8 <_strtod_l+0x9e8>
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f7fa fe30 	bl	8000b08 <__aeabi_d2iz>
 8005ea8:	f7fa fb14 	bl	80004d4 <__aeabi_i2d>
 8005eac:	460b      	mov	r3, r1
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7fa f9c0 	bl	8000238 <__aeabi_dsub>
 8005eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eba:	4606      	mov	r6, r0
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	b933      	cbnz	r3, 8005ece <_strtod_l+0xace>
 8005ec0:	f1ba 0f00 	cmp.w	sl, #0
 8005ec4:	d103      	bne.n	8005ece <_strtod_l+0xace>
 8005ec6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	d06d      	beq.n	8005faa <_strtod_l+0xbaa>
 8005ece:	a30a      	add	r3, pc, #40	; (adr r3, 8005ef8 <_strtod_l+0xaf8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	f7fa fdd8 	bl	8000a8c <__aeabi_dcmplt>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f47f acb8 	bne.w	8005852 <_strtod_l+0x452>
 8005ee2:	a307      	add	r3, pc, #28	; (adr r3, 8005f00 <_strtod_l+0xb00>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa fdec 	bl	8000ac8 <__aeabi_dcmpgt>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	f43f af79 	beq.w	8005de8 <_strtod_l+0x9e8>
 8005ef6:	e4ac      	b.n	8005852 <_strtod_l+0x452>
 8005ef8:	94a03595 	.word	0x94a03595
 8005efc:	3fdfffff 	.word	0x3fdfffff
 8005f00:	35afe535 	.word	0x35afe535
 8005f04:	3fe00000 	.word	0x3fe00000
 8005f08:	000fffff 	.word	0x000fffff
 8005f0c:	7ff00000 	.word	0x7ff00000
 8005f10:	7fefffff 	.word	0x7fefffff
 8005f14:	39500000 	.word	0x39500000
 8005f18:	3ff00000 	.word	0x3ff00000
 8005f1c:	7fe00000 	.word	0x7fe00000
 8005f20:	7c9fffff 	.word	0x7c9fffff
 8005f24:	3fe00000 	.word	0x3fe00000
 8005f28:	bff00000 	.word	0xbff00000
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	b333      	cbz	r3, 8005f7e <_strtod_l+0xb7e>
 8005f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f36:	d822      	bhi.n	8005f7e <_strtod_l+0xb7e>
 8005f38:	a327      	add	r3, pc, #156	; (adr r3, 8005fd8 <_strtod_l+0xbd8>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	4639      	mov	r1, r7
 8005f42:	f7fa fdad 	bl	8000aa0 <__aeabi_dcmple>
 8005f46:	b1a0      	cbz	r0, 8005f72 <_strtod_l+0xb72>
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f7fa fe04 	bl	8000b58 <__aeabi_d2uiz>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	bf08      	it	eq
 8005f54:	2001      	moveq	r0, #1
 8005f56:	f7fa faad 	bl	80004b4 <__aeabi_ui2d>
 8005f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	460f      	mov	r7, r1
 8005f60:	bb03      	cbnz	r3, 8005fa4 <_strtod_l+0xba4>
 8005f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f66:	9012      	str	r0, [sp, #72]	; 0x48
 8005f68:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005f6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f76:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f7e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005f82:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005f86:	f001 ffd1 	bl	8007f2c <__ulp>
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	ec53 2b10 	vmov	r2, r3, d0
 8005f90:	4659      	mov	r1, fp
 8005f92:	f7fa fb09 	bl	80005a8 <__aeabi_dmul>
 8005f96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f9a:	f7fa f94f 	bl	800023c <__adddf3>
 8005f9e:	4682      	mov	sl, r0
 8005fa0:	468b      	mov	fp, r1
 8005fa2:	e772      	b.n	8005e8a <_strtod_l+0xa8a>
 8005fa4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005fa8:	e7df      	b.n	8005f6a <_strtod_l+0xb6a>
 8005faa:	a30d      	add	r3, pc, #52	; (adr r3, 8005fe0 <_strtod_l+0xbe0>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fd6c 	bl	8000a8c <__aeabi_dcmplt>
 8005fb4:	e79c      	b.n	8005ef0 <_strtod_l+0xaf0>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8005fba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	f7ff ba61 	b.w	8005486 <_strtod_l+0x86>
 8005fc4:	2b65      	cmp	r3, #101	; 0x65
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f43f ab4e 	beq.w	800566a <_strtod_l+0x26a>
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	9104      	str	r1, [sp, #16]
 8005fd4:	f7ff bacb 	b.w	800556e <_strtod_l+0x16e>
 8005fd8:	ffc00000 	.word	0xffc00000
 8005fdc:	41dfffff 	.word	0x41dfffff
 8005fe0:	94a03595 	.word	0x94a03595
 8005fe4:	3fcfffff 	.word	0x3fcfffff

08005fe8 <_strtod_r>:
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <_strtod_r+0x18>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b410      	push	{r4}
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	4c04      	ldr	r4, [pc, #16]	; (8006004 <_strtod_r+0x1c>)
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf08      	it	eq
 8005ff6:	4623      	moveq	r3, r4
 8005ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ffc:	f7ff ba00 	b.w	8005400 <_strtod_l>
 8006000:	2000001c 	.word	0x2000001c
 8006004:	20000080 	.word	0x20000080

08006008 <_strtol_l.isra.0>:
 8006008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	4680      	mov	r8, r0
 800600e:	4689      	mov	r9, r1
 8006010:	4692      	mov	sl, r2
 8006012:	461e      	mov	r6, r3
 8006014:	460f      	mov	r7, r1
 8006016:	463d      	mov	r5, r7
 8006018:	9808      	ldr	r0, [sp, #32]
 800601a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800601e:	f001 fc27 	bl	8007870 <__locale_ctype_ptr_l>
 8006022:	4420      	add	r0, r4
 8006024:	7843      	ldrb	r3, [r0, #1]
 8006026:	f013 0308 	ands.w	r3, r3, #8
 800602a:	d132      	bne.n	8006092 <_strtol_l.isra.0+0x8a>
 800602c:	2c2d      	cmp	r4, #45	; 0x2d
 800602e:	d132      	bne.n	8006096 <_strtol_l.isra.0+0x8e>
 8006030:	787c      	ldrb	r4, [r7, #1]
 8006032:	1cbd      	adds	r5, r7, #2
 8006034:	2201      	movs	r2, #1
 8006036:	2e00      	cmp	r6, #0
 8006038:	d05d      	beq.n	80060f6 <_strtol_l.isra.0+0xee>
 800603a:	2e10      	cmp	r6, #16
 800603c:	d109      	bne.n	8006052 <_strtol_l.isra.0+0x4a>
 800603e:	2c30      	cmp	r4, #48	; 0x30
 8006040:	d107      	bne.n	8006052 <_strtol_l.isra.0+0x4a>
 8006042:	782b      	ldrb	r3, [r5, #0]
 8006044:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006048:	2b58      	cmp	r3, #88	; 0x58
 800604a:	d14f      	bne.n	80060ec <_strtol_l.isra.0+0xe4>
 800604c:	786c      	ldrb	r4, [r5, #1]
 800604e:	2610      	movs	r6, #16
 8006050:	3502      	adds	r5, #2
 8006052:	2a00      	cmp	r2, #0
 8006054:	bf14      	ite	ne
 8006056:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800605a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800605e:	2700      	movs	r7, #0
 8006060:	fbb1 fcf6 	udiv	ip, r1, r6
 8006064:	4638      	mov	r0, r7
 8006066:	fb06 1e1c 	mls	lr, r6, ip, r1
 800606a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800606e:	2b09      	cmp	r3, #9
 8006070:	d817      	bhi.n	80060a2 <_strtol_l.isra.0+0x9a>
 8006072:	461c      	mov	r4, r3
 8006074:	42a6      	cmp	r6, r4
 8006076:	dd23      	ble.n	80060c0 <_strtol_l.isra.0+0xb8>
 8006078:	1c7b      	adds	r3, r7, #1
 800607a:	d007      	beq.n	800608c <_strtol_l.isra.0+0x84>
 800607c:	4584      	cmp	ip, r0
 800607e:	d31c      	bcc.n	80060ba <_strtol_l.isra.0+0xb2>
 8006080:	d101      	bne.n	8006086 <_strtol_l.isra.0+0x7e>
 8006082:	45a6      	cmp	lr, r4
 8006084:	db19      	blt.n	80060ba <_strtol_l.isra.0+0xb2>
 8006086:	fb00 4006 	mla	r0, r0, r6, r4
 800608a:	2701      	movs	r7, #1
 800608c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006090:	e7eb      	b.n	800606a <_strtol_l.isra.0+0x62>
 8006092:	462f      	mov	r7, r5
 8006094:	e7bf      	b.n	8006016 <_strtol_l.isra.0+0xe>
 8006096:	2c2b      	cmp	r4, #43	; 0x2b
 8006098:	bf04      	itt	eq
 800609a:	1cbd      	addeq	r5, r7, #2
 800609c:	787c      	ldrbeq	r4, [r7, #1]
 800609e:	461a      	mov	r2, r3
 80060a0:	e7c9      	b.n	8006036 <_strtol_l.isra.0+0x2e>
 80060a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80060a6:	2b19      	cmp	r3, #25
 80060a8:	d801      	bhi.n	80060ae <_strtol_l.isra.0+0xa6>
 80060aa:	3c37      	subs	r4, #55	; 0x37
 80060ac:	e7e2      	b.n	8006074 <_strtol_l.isra.0+0x6c>
 80060ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80060b2:	2b19      	cmp	r3, #25
 80060b4:	d804      	bhi.n	80060c0 <_strtol_l.isra.0+0xb8>
 80060b6:	3c57      	subs	r4, #87	; 0x57
 80060b8:	e7dc      	b.n	8006074 <_strtol_l.isra.0+0x6c>
 80060ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060be:	e7e5      	b.n	800608c <_strtol_l.isra.0+0x84>
 80060c0:	1c7b      	adds	r3, r7, #1
 80060c2:	d108      	bne.n	80060d6 <_strtol_l.isra.0+0xce>
 80060c4:	2322      	movs	r3, #34	; 0x22
 80060c6:	f8c8 3000 	str.w	r3, [r8]
 80060ca:	4608      	mov	r0, r1
 80060cc:	f1ba 0f00 	cmp.w	sl, #0
 80060d0:	d107      	bne.n	80060e2 <_strtol_l.isra.0+0xda>
 80060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d6:	b102      	cbz	r2, 80060da <_strtol_l.isra.0+0xd2>
 80060d8:	4240      	negs	r0, r0
 80060da:	f1ba 0f00 	cmp.w	sl, #0
 80060de:	d0f8      	beq.n	80060d2 <_strtol_l.isra.0+0xca>
 80060e0:	b10f      	cbz	r7, 80060e6 <_strtol_l.isra.0+0xde>
 80060e2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80060e6:	f8ca 9000 	str.w	r9, [sl]
 80060ea:	e7f2      	b.n	80060d2 <_strtol_l.isra.0+0xca>
 80060ec:	2430      	movs	r4, #48	; 0x30
 80060ee:	2e00      	cmp	r6, #0
 80060f0:	d1af      	bne.n	8006052 <_strtol_l.isra.0+0x4a>
 80060f2:	2608      	movs	r6, #8
 80060f4:	e7ad      	b.n	8006052 <_strtol_l.isra.0+0x4a>
 80060f6:	2c30      	cmp	r4, #48	; 0x30
 80060f8:	d0a3      	beq.n	8006042 <_strtol_l.isra.0+0x3a>
 80060fa:	260a      	movs	r6, #10
 80060fc:	e7a9      	b.n	8006052 <_strtol_l.isra.0+0x4a>
	...

08006100 <_strtol_r>:
 8006100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006102:	4c06      	ldr	r4, [pc, #24]	; (800611c <_strtol_r+0x1c>)
 8006104:	4d06      	ldr	r5, [pc, #24]	; (8006120 <_strtol_r+0x20>)
 8006106:	6824      	ldr	r4, [r4, #0]
 8006108:	6a24      	ldr	r4, [r4, #32]
 800610a:	2c00      	cmp	r4, #0
 800610c:	bf08      	it	eq
 800610e:	462c      	moveq	r4, r5
 8006110:	9400      	str	r4, [sp, #0]
 8006112:	f7ff ff79 	bl	8006008 <_strtol_l.isra.0>
 8006116:	b003      	add	sp, #12
 8006118:	bd30      	pop	{r4, r5, pc}
 800611a:	bf00      	nop
 800611c:	2000001c 	.word	0x2000001c
 8006120:	20000080 	.word	0x20000080

08006124 <__swbuf_r>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	460e      	mov	r6, r1
 8006128:	4614      	mov	r4, r2
 800612a:	4605      	mov	r5, r0
 800612c:	b118      	cbz	r0, 8006136 <__swbuf_r+0x12>
 800612e:	6983      	ldr	r3, [r0, #24]
 8006130:	b90b      	cbnz	r3, 8006136 <__swbuf_r+0x12>
 8006132:	f000 ffed 	bl	8007110 <__sinit>
 8006136:	4b21      	ldr	r3, [pc, #132]	; (80061bc <__swbuf_r+0x98>)
 8006138:	429c      	cmp	r4, r3
 800613a:	d12a      	bne.n	8006192 <__swbuf_r+0x6e>
 800613c:	686c      	ldr	r4, [r5, #4]
 800613e:	69a3      	ldr	r3, [r4, #24]
 8006140:	60a3      	str	r3, [r4, #8]
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	071a      	lsls	r2, r3, #28
 8006146:	d52e      	bpl.n	80061a6 <__swbuf_r+0x82>
 8006148:	6923      	ldr	r3, [r4, #16]
 800614a:	b363      	cbz	r3, 80061a6 <__swbuf_r+0x82>
 800614c:	6923      	ldr	r3, [r4, #16]
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	1ac0      	subs	r0, r0, r3
 8006152:	6963      	ldr	r3, [r4, #20]
 8006154:	b2f6      	uxtb	r6, r6
 8006156:	4283      	cmp	r3, r0
 8006158:	4637      	mov	r7, r6
 800615a:	dc04      	bgt.n	8006166 <__swbuf_r+0x42>
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f000 ff6c 	bl	800703c <_fflush_r>
 8006164:	bb28      	cbnz	r0, 80061b2 <__swbuf_r+0x8e>
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	3b01      	subs	r3, #1
 800616a:	60a3      	str	r3, [r4, #8]
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	6022      	str	r2, [r4, #0]
 8006172:	701e      	strb	r6, [r3, #0]
 8006174:	6963      	ldr	r3, [r4, #20]
 8006176:	3001      	adds	r0, #1
 8006178:	4283      	cmp	r3, r0
 800617a:	d004      	beq.n	8006186 <__swbuf_r+0x62>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	07db      	lsls	r3, r3, #31
 8006180:	d519      	bpl.n	80061b6 <__swbuf_r+0x92>
 8006182:	2e0a      	cmp	r6, #10
 8006184:	d117      	bne.n	80061b6 <__swbuf_r+0x92>
 8006186:	4621      	mov	r1, r4
 8006188:	4628      	mov	r0, r5
 800618a:	f000 ff57 	bl	800703c <_fflush_r>
 800618e:	b190      	cbz	r0, 80061b6 <__swbuf_r+0x92>
 8006190:	e00f      	b.n	80061b2 <__swbuf_r+0x8e>
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <__swbuf_r+0x9c>)
 8006194:	429c      	cmp	r4, r3
 8006196:	d101      	bne.n	800619c <__swbuf_r+0x78>
 8006198:	68ac      	ldr	r4, [r5, #8]
 800619a:	e7d0      	b.n	800613e <__swbuf_r+0x1a>
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <__swbuf_r+0xa0>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	bf08      	it	eq
 80061a2:	68ec      	ldreq	r4, [r5, #12]
 80061a4:	e7cb      	b.n	800613e <__swbuf_r+0x1a>
 80061a6:	4621      	mov	r1, r4
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 f80d 	bl	80061c8 <__swsetup_r>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d0cc      	beq.n	800614c <__swbuf_r+0x28>
 80061b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80061b6:	4638      	mov	r0, r7
 80061b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	08008e38 	.word	0x08008e38
 80061c0:	08008e58 	.word	0x08008e58
 80061c4:	08008e18 	.word	0x08008e18

080061c8 <__swsetup_r>:
 80061c8:	4b32      	ldr	r3, [pc, #200]	; (8006294 <__swsetup_r+0xcc>)
 80061ca:	b570      	push	{r4, r5, r6, lr}
 80061cc:	681d      	ldr	r5, [r3, #0]
 80061ce:	4606      	mov	r6, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	b125      	cbz	r5, 80061de <__swsetup_r+0x16>
 80061d4:	69ab      	ldr	r3, [r5, #24]
 80061d6:	b913      	cbnz	r3, 80061de <__swsetup_r+0x16>
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 ff99 	bl	8007110 <__sinit>
 80061de:	4b2e      	ldr	r3, [pc, #184]	; (8006298 <__swsetup_r+0xd0>)
 80061e0:	429c      	cmp	r4, r3
 80061e2:	d10f      	bne.n	8006204 <__swsetup_r+0x3c>
 80061e4:	686c      	ldr	r4, [r5, #4]
 80061e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	0715      	lsls	r5, r2, #28
 80061ee:	d42c      	bmi.n	800624a <__swsetup_r+0x82>
 80061f0:	06d0      	lsls	r0, r2, #27
 80061f2:	d411      	bmi.n	8006218 <__swsetup_r+0x50>
 80061f4:	2209      	movs	r2, #9
 80061f6:	6032      	str	r2, [r6, #0]
 80061f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006202:	e03e      	b.n	8006282 <__swsetup_r+0xba>
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <__swsetup_r+0xd4>)
 8006206:	429c      	cmp	r4, r3
 8006208:	d101      	bne.n	800620e <__swsetup_r+0x46>
 800620a:	68ac      	ldr	r4, [r5, #8]
 800620c:	e7eb      	b.n	80061e6 <__swsetup_r+0x1e>
 800620e:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <__swsetup_r+0xd8>)
 8006210:	429c      	cmp	r4, r3
 8006212:	bf08      	it	eq
 8006214:	68ec      	ldreq	r4, [r5, #12]
 8006216:	e7e6      	b.n	80061e6 <__swsetup_r+0x1e>
 8006218:	0751      	lsls	r1, r2, #29
 800621a:	d512      	bpl.n	8006242 <__swsetup_r+0x7a>
 800621c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800621e:	b141      	cbz	r1, 8006232 <__swsetup_r+0x6a>
 8006220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006224:	4299      	cmp	r1, r3
 8006226:	d002      	beq.n	800622e <__swsetup_r+0x66>
 8006228:	4630      	mov	r0, r6
 800622a:	f001 ffc1 	bl	80081b0 <_free_r>
 800622e:	2300      	movs	r3, #0
 8006230:	6363      	str	r3, [r4, #52]	; 0x34
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	2300      	movs	r3, #0
 800623c:	6063      	str	r3, [r4, #4]
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	f043 0308 	orr.w	r3, r3, #8
 8006248:	81a3      	strh	r3, [r4, #12]
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	b94b      	cbnz	r3, 8006262 <__swsetup_r+0x9a>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006258:	d003      	beq.n	8006262 <__swsetup_r+0x9a>
 800625a:	4621      	mov	r1, r4
 800625c:	4630      	mov	r0, r6
 800625e:	f001 fb3f 	bl	80078e0 <__smakebuf_r>
 8006262:	89a2      	ldrh	r2, [r4, #12]
 8006264:	f012 0301 	ands.w	r3, r2, #1
 8006268:	d00c      	beq.n	8006284 <__swsetup_r+0xbc>
 800626a:	2300      	movs	r3, #0
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	6963      	ldr	r3, [r4, #20]
 8006270:	425b      	negs	r3, r3
 8006272:	61a3      	str	r3, [r4, #24]
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	b953      	cbnz	r3, 800628e <__swsetup_r+0xc6>
 8006278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006280:	d1ba      	bne.n	80061f8 <__swsetup_r+0x30>
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	0792      	lsls	r2, r2, #30
 8006286:	bf58      	it	pl
 8006288:	6963      	ldrpl	r3, [r4, #20]
 800628a:	60a3      	str	r3, [r4, #8]
 800628c:	e7f2      	b.n	8006274 <__swsetup_r+0xac>
 800628e:	2000      	movs	r0, #0
 8006290:	e7f7      	b.n	8006282 <__swsetup_r+0xba>
 8006292:	bf00      	nop
 8006294:	2000001c 	.word	0x2000001c
 8006298:	08008e38 	.word	0x08008e38
 800629c:	08008e58 	.word	0x08008e58
 80062a0:	08008e18 	.word	0x08008e18

080062a4 <quorem>:
 80062a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	6903      	ldr	r3, [r0, #16]
 80062aa:	690c      	ldr	r4, [r1, #16]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	4680      	mov	r8, r0
 80062b0:	f2c0 8082 	blt.w	80063b8 <quorem+0x114>
 80062b4:	3c01      	subs	r4, #1
 80062b6:	f101 0714 	add.w	r7, r1, #20
 80062ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80062be:	f100 0614 	add.w	r6, r0, #20
 80062c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80062c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80062ca:	eb06 030c 	add.w	r3, r6, ip
 80062ce:	3501      	adds	r5, #1
 80062d0:	eb07 090c 	add.w	r9, r7, ip
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80062da:	b395      	cbz	r5, 8006342 <quorem+0x9e>
 80062dc:	f04f 0a00 	mov.w	sl, #0
 80062e0:	4638      	mov	r0, r7
 80062e2:	46b6      	mov	lr, r6
 80062e4:	46d3      	mov	fp, sl
 80062e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80062ea:	b293      	uxth	r3, r2
 80062ec:	fb05 a303 	mla	r3, r5, r3, sl
 80062f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ebab 0303 	sub.w	r3, fp, r3
 80062fa:	0c12      	lsrs	r2, r2, #16
 80062fc:	f8de b000 	ldr.w	fp, [lr]
 8006300:	fb05 a202 	mla	r2, r5, r2, sl
 8006304:	fa13 f38b 	uxtah	r3, r3, fp
 8006308:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800630c:	fa1f fb82 	uxth.w	fp, r2
 8006310:	f8de 2000 	ldr.w	r2, [lr]
 8006314:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800631c:	b29b      	uxth	r3, r3
 800631e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006322:	4581      	cmp	r9, r0
 8006324:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006328:	f84e 3b04 	str.w	r3, [lr], #4
 800632c:	d2db      	bcs.n	80062e6 <quorem+0x42>
 800632e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006332:	b933      	cbnz	r3, 8006342 <quorem+0x9e>
 8006334:	9b01      	ldr	r3, [sp, #4]
 8006336:	3b04      	subs	r3, #4
 8006338:	429e      	cmp	r6, r3
 800633a:	461a      	mov	r2, r3
 800633c:	d330      	bcc.n	80063a0 <quorem+0xfc>
 800633e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006342:	4640      	mov	r0, r8
 8006344:	f001 fd7a 	bl	8007e3c <__mcmp>
 8006348:	2800      	cmp	r0, #0
 800634a:	db25      	blt.n	8006398 <quorem+0xf4>
 800634c:	3501      	adds	r5, #1
 800634e:	4630      	mov	r0, r6
 8006350:	f04f 0c00 	mov.w	ip, #0
 8006354:	f857 2b04 	ldr.w	r2, [r7], #4
 8006358:	f8d0 e000 	ldr.w	lr, [r0]
 800635c:	b293      	uxth	r3, r2
 800635e:	ebac 0303 	sub.w	r3, ip, r3
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	fa13 f38e 	uxtah	r3, r3, lr
 8006368:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800636c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006376:	45b9      	cmp	r9, r7
 8006378:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800637c:	f840 3b04 	str.w	r3, [r0], #4
 8006380:	d2e8      	bcs.n	8006354 <quorem+0xb0>
 8006382:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006386:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800638a:	b92a      	cbnz	r2, 8006398 <quorem+0xf4>
 800638c:	3b04      	subs	r3, #4
 800638e:	429e      	cmp	r6, r3
 8006390:	461a      	mov	r2, r3
 8006392:	d30b      	bcc.n	80063ac <quorem+0x108>
 8006394:	f8c8 4010 	str.w	r4, [r8, #16]
 8006398:	4628      	mov	r0, r5
 800639a:	b003      	add	sp, #12
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	3b04      	subs	r3, #4
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	d1ca      	bne.n	800633e <quorem+0x9a>
 80063a8:	3c01      	subs	r4, #1
 80063aa:	e7c5      	b.n	8006338 <quorem+0x94>
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	3b04      	subs	r3, #4
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	d1ef      	bne.n	8006394 <quorem+0xf0>
 80063b4:	3c01      	subs	r4, #1
 80063b6:	e7ea      	b.n	800638e <quorem+0xea>
 80063b8:	2000      	movs	r0, #0
 80063ba:	e7ee      	b.n	800639a <quorem+0xf6>
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <_dtoa_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	ec57 6b10 	vmov	r6, r7, d0
 80063c8:	b097      	sub	sp, #92	; 0x5c
 80063ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063cc:	9106      	str	r1, [sp, #24]
 80063ce:	4604      	mov	r4, r0
 80063d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80063d2:	9312      	str	r3, [sp, #72]	; 0x48
 80063d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063d8:	e9cd 6700 	strd	r6, r7, [sp]
 80063dc:	b93d      	cbnz	r5, 80063ee <_dtoa_r+0x2e>
 80063de:	2010      	movs	r0, #16
 80063e0:	f001 fabe 	bl	8007960 <malloc>
 80063e4:	6260      	str	r0, [r4, #36]	; 0x24
 80063e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063ea:	6005      	str	r5, [r0, #0]
 80063ec:	60c5      	str	r5, [r0, #12]
 80063ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	b151      	cbz	r1, 800640a <_dtoa_r+0x4a>
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	604a      	str	r2, [r1, #4]
 80063f8:	2301      	movs	r3, #1
 80063fa:	4093      	lsls	r3, r2
 80063fc:	608b      	str	r3, [r1, #8]
 80063fe:	4620      	mov	r0, r4
 8006400:	f001 fafc 	bl	80079fc <_Bfree>
 8006404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	1e3b      	subs	r3, r7, #0
 800640c:	bfbb      	ittet	lt
 800640e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006412:	9301      	strlt	r3, [sp, #4]
 8006414:	2300      	movge	r3, #0
 8006416:	2201      	movlt	r2, #1
 8006418:	bfac      	ite	ge
 800641a:	f8c8 3000 	strge.w	r3, [r8]
 800641e:	f8c8 2000 	strlt.w	r2, [r8]
 8006422:	4baf      	ldr	r3, [pc, #700]	; (80066e0 <_dtoa_r+0x320>)
 8006424:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006428:	ea33 0308 	bics.w	r3, r3, r8
 800642c:	d114      	bne.n	8006458 <_dtoa_r+0x98>
 800642e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006430:	f242 730f 	movw	r3, #9999	; 0x270f
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	b923      	cbnz	r3, 8006444 <_dtoa_r+0x84>
 800643a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800643e:	2800      	cmp	r0, #0
 8006440:	f000 8542 	beq.w	8006ec8 <_dtoa_r+0xb08>
 8006444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006446:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80066f4 <_dtoa_r+0x334>
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8544 	beq.w	8006ed8 <_dtoa_r+0xb18>
 8006450:	f10b 0303 	add.w	r3, fp, #3
 8006454:	f000 bd3e 	b.w	8006ed4 <_dtoa_r+0xb14>
 8006458:	e9dd 6700 	ldrd	r6, r7, [sp]
 800645c:	2200      	movs	r2, #0
 800645e:	2300      	movs	r3, #0
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7fa fb08 	bl	8000a78 <__aeabi_dcmpeq>
 8006468:	4681      	mov	r9, r0
 800646a:	b168      	cbz	r0, 8006488 <_dtoa_r+0xc8>
 800646c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800646e:	2301      	movs	r3, #1
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8524 	beq.w	8006ec2 <_dtoa_r+0xb02>
 800647a:	4b9a      	ldr	r3, [pc, #616]	; (80066e4 <_dtoa_r+0x324>)
 800647c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800647e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	f000 bd28 	b.w	8006ed8 <_dtoa_r+0xb18>
 8006488:	aa14      	add	r2, sp, #80	; 0x50
 800648a:	a915      	add	r1, sp, #84	; 0x54
 800648c:	ec47 6b10 	vmov	d0, r6, r7
 8006490:	4620      	mov	r0, r4
 8006492:	f001 fdc1 	bl	8008018 <__d2b>
 8006496:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800649a:	9004      	str	r0, [sp, #16]
 800649c:	2d00      	cmp	r5, #0
 800649e:	d07c      	beq.n	800659a <_dtoa_r+0x1da>
 80064a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80064a8:	46b2      	mov	sl, r6
 80064aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80064ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80064b6:	2200      	movs	r2, #0
 80064b8:	4b8b      	ldr	r3, [pc, #556]	; (80066e8 <_dtoa_r+0x328>)
 80064ba:	4650      	mov	r0, sl
 80064bc:	4659      	mov	r1, fp
 80064be:	f7f9 febb 	bl	8000238 <__aeabi_dsub>
 80064c2:	a381      	add	r3, pc, #516	; (adr r3, 80066c8 <_dtoa_r+0x308>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f86e 	bl	80005a8 <__aeabi_dmul>
 80064cc:	a380      	add	r3, pc, #512	; (adr r3, 80066d0 <_dtoa_r+0x310>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7f9 feb3 	bl	800023c <__adddf3>
 80064d6:	4606      	mov	r6, r0
 80064d8:	4628      	mov	r0, r5
 80064da:	460f      	mov	r7, r1
 80064dc:	f7f9 fffa 	bl	80004d4 <__aeabi_i2d>
 80064e0:	a37d      	add	r3, pc, #500	; (adr r3, 80066d8 <_dtoa_r+0x318>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f7fa f85f 	bl	80005a8 <__aeabi_dmul>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7f9 fea3 	bl	800023c <__adddf3>
 80064f6:	4606      	mov	r6, r0
 80064f8:	460f      	mov	r7, r1
 80064fa:	f7fa fb05 	bl	8000b08 <__aeabi_d2iz>
 80064fe:	2200      	movs	r2, #0
 8006500:	4682      	mov	sl, r0
 8006502:	2300      	movs	r3, #0
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f7fa fac0 	bl	8000a8c <__aeabi_dcmplt>
 800650c:	b148      	cbz	r0, 8006522 <_dtoa_r+0x162>
 800650e:	4650      	mov	r0, sl
 8006510:	f7f9 ffe0 	bl	80004d4 <__aeabi_i2d>
 8006514:	4632      	mov	r2, r6
 8006516:	463b      	mov	r3, r7
 8006518:	f7fa faae 	bl	8000a78 <__aeabi_dcmpeq>
 800651c:	b908      	cbnz	r0, 8006522 <_dtoa_r+0x162>
 800651e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006522:	f1ba 0f16 	cmp.w	sl, #22
 8006526:	d859      	bhi.n	80065dc <_dtoa_r+0x21c>
 8006528:	4970      	ldr	r1, [pc, #448]	; (80066ec <_dtoa_r+0x32c>)
 800652a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800652e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006536:	f7fa fac7 	bl	8000ac8 <__aeabi_dcmpgt>
 800653a:	2800      	cmp	r0, #0
 800653c:	d050      	beq.n	80065e0 <_dtoa_r+0x220>
 800653e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006542:	2300      	movs	r3, #0
 8006544:	930f      	str	r3, [sp, #60]	; 0x3c
 8006546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006548:	1b5d      	subs	r5, r3, r5
 800654a:	f1b5 0801 	subs.w	r8, r5, #1
 800654e:	bf49      	itett	mi
 8006550:	f1c5 0301 	rsbmi	r3, r5, #1
 8006554:	2300      	movpl	r3, #0
 8006556:	9305      	strmi	r3, [sp, #20]
 8006558:	f04f 0800 	movmi.w	r8, #0
 800655c:	bf58      	it	pl
 800655e:	9305      	strpl	r3, [sp, #20]
 8006560:	f1ba 0f00 	cmp.w	sl, #0
 8006564:	db3e      	blt.n	80065e4 <_dtoa_r+0x224>
 8006566:	2300      	movs	r3, #0
 8006568:	44d0      	add	r8, sl
 800656a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	2b09      	cmp	r3, #9
 8006574:	f200 8090 	bhi.w	8006698 <_dtoa_r+0x2d8>
 8006578:	2b05      	cmp	r3, #5
 800657a:	bfc4      	itt	gt
 800657c:	3b04      	subgt	r3, #4
 800657e:	9306      	strgt	r3, [sp, #24]
 8006580:	9b06      	ldr	r3, [sp, #24]
 8006582:	f1a3 0302 	sub.w	r3, r3, #2
 8006586:	bfcc      	ite	gt
 8006588:	2500      	movgt	r5, #0
 800658a:	2501      	movle	r5, #1
 800658c:	2b03      	cmp	r3, #3
 800658e:	f200 808f 	bhi.w	80066b0 <_dtoa_r+0x2f0>
 8006592:	e8df f003 	tbb	[pc, r3]
 8006596:	7f7d      	.short	0x7f7d
 8006598:	7131      	.short	0x7131
 800659a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800659e:	441d      	add	r5, r3
 80065a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80065a4:	2820      	cmp	r0, #32
 80065a6:	dd13      	ble.n	80065d0 <_dtoa_r+0x210>
 80065a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	fa08 f800 	lsl.w	r8, r8, r0
 80065b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80065b6:	fa23 f000 	lsr.w	r0, r3, r0
 80065ba:	ea48 0000 	orr.w	r0, r8, r0
 80065be:	f7f9 ff79 	bl	80004b4 <__aeabi_ui2d>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4682      	mov	sl, r0
 80065c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80065ca:	3d01      	subs	r5, #1
 80065cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80065ce:	e772      	b.n	80064b6 <_dtoa_r+0xf6>
 80065d0:	9b00      	ldr	r3, [sp, #0]
 80065d2:	f1c0 0020 	rsb	r0, r0, #32
 80065d6:	fa03 f000 	lsl.w	r0, r3, r0
 80065da:	e7f0      	b.n	80065be <_dtoa_r+0x1fe>
 80065dc:	2301      	movs	r3, #1
 80065de:	e7b1      	b.n	8006544 <_dtoa_r+0x184>
 80065e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80065e2:	e7b0      	b.n	8006546 <_dtoa_r+0x186>
 80065e4:	9b05      	ldr	r3, [sp, #20]
 80065e6:	eba3 030a 	sub.w	r3, r3, sl
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	f1ca 0300 	rsb	r3, sl, #0
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	2300      	movs	r3, #0
 80065f4:	930e      	str	r3, [sp, #56]	; 0x38
 80065f6:	e7bb      	b.n	8006570 <_dtoa_r+0x1b0>
 80065f8:	2301      	movs	r3, #1
 80065fa:	930a      	str	r3, [sp, #40]	; 0x28
 80065fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dd59      	ble.n	80066b6 <_dtoa_r+0x2f6>
 8006602:	9302      	str	r3, [sp, #8]
 8006604:	4699      	mov	r9, r3
 8006606:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006608:	2200      	movs	r2, #0
 800660a:	6072      	str	r2, [r6, #4]
 800660c:	2204      	movs	r2, #4
 800660e:	f102 0014 	add.w	r0, r2, #20
 8006612:	4298      	cmp	r0, r3
 8006614:	6871      	ldr	r1, [r6, #4]
 8006616:	d953      	bls.n	80066c0 <_dtoa_r+0x300>
 8006618:	4620      	mov	r0, r4
 800661a:	f001 f9bb 	bl	8007994 <_Balloc>
 800661e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006620:	6030      	str	r0, [r6, #0]
 8006622:	f1b9 0f0e 	cmp.w	r9, #14
 8006626:	f8d3 b000 	ldr.w	fp, [r3]
 800662a:	f200 80e6 	bhi.w	80067fa <_dtoa_r+0x43a>
 800662e:	2d00      	cmp	r5, #0
 8006630:	f000 80e3 	beq.w	80067fa <_dtoa_r+0x43a>
 8006634:	ed9d 7b00 	vldr	d7, [sp]
 8006638:	f1ba 0f00 	cmp.w	sl, #0
 800663c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006640:	dd74      	ble.n	800672c <_dtoa_r+0x36c>
 8006642:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <_dtoa_r+0x32c>)
 8006644:	f00a 030f 	and.w	r3, sl, #15
 8006648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800664c:	ed93 7b00 	vldr	d7, [r3]
 8006650:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006654:	06f0      	lsls	r0, r6, #27
 8006656:	ed8d 7b08 	vstr	d7, [sp, #32]
 800665a:	d565      	bpl.n	8006728 <_dtoa_r+0x368>
 800665c:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <_dtoa_r+0x330>)
 800665e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006662:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006666:	f7fa f8c9 	bl	80007fc <__aeabi_ddiv>
 800666a:	e9cd 0100 	strd	r0, r1, [sp]
 800666e:	f006 060f 	and.w	r6, r6, #15
 8006672:	2503      	movs	r5, #3
 8006674:	4f1e      	ldr	r7, [pc, #120]	; (80066f0 <_dtoa_r+0x330>)
 8006676:	e04c      	b.n	8006712 <_dtoa_r+0x352>
 8006678:	2301      	movs	r3, #1
 800667a:	930a      	str	r3, [sp, #40]	; 0x28
 800667c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800667e:	4453      	add	r3, sl
 8006680:	f103 0901 	add.w	r9, r3, #1
 8006684:	9302      	str	r3, [sp, #8]
 8006686:	464b      	mov	r3, r9
 8006688:	2b01      	cmp	r3, #1
 800668a:	bfb8      	it	lt
 800668c:	2301      	movlt	r3, #1
 800668e:	e7ba      	b.n	8006606 <_dtoa_r+0x246>
 8006690:	2300      	movs	r3, #0
 8006692:	e7b2      	b.n	80065fa <_dtoa_r+0x23a>
 8006694:	2300      	movs	r3, #0
 8006696:	e7f0      	b.n	800667a <_dtoa_r+0x2ba>
 8006698:	2501      	movs	r5, #1
 800669a:	2300      	movs	r3, #0
 800669c:	9306      	str	r3, [sp, #24]
 800669e:	950a      	str	r5, [sp, #40]	; 0x28
 80066a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	4699      	mov	r9, r3
 80066a8:	2200      	movs	r2, #0
 80066aa:	2312      	movs	r3, #18
 80066ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80066ae:	e7aa      	b.n	8006606 <_dtoa_r+0x246>
 80066b0:	2301      	movs	r3, #1
 80066b2:	930a      	str	r3, [sp, #40]	; 0x28
 80066b4:	e7f4      	b.n	80066a0 <_dtoa_r+0x2e0>
 80066b6:	2301      	movs	r3, #1
 80066b8:	9302      	str	r3, [sp, #8]
 80066ba:	4699      	mov	r9, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	e7f5      	b.n	80066ac <_dtoa_r+0x2ec>
 80066c0:	3101      	adds	r1, #1
 80066c2:	6071      	str	r1, [r6, #4]
 80066c4:	0052      	lsls	r2, r2, #1
 80066c6:	e7a2      	b.n	800660e <_dtoa_r+0x24e>
 80066c8:	636f4361 	.word	0x636f4361
 80066cc:	3fd287a7 	.word	0x3fd287a7
 80066d0:	8b60c8b3 	.word	0x8b60c8b3
 80066d4:	3fc68a28 	.word	0x3fc68a28
 80066d8:	509f79fb 	.word	0x509f79fb
 80066dc:	3fd34413 	.word	0x3fd34413
 80066e0:	7ff00000 	.word	0x7ff00000
 80066e4:	08008d8d 	.word	0x08008d8d
 80066e8:	3ff80000 	.word	0x3ff80000
 80066ec:	08008eb0 	.word	0x08008eb0
 80066f0:	08008e88 	.word	0x08008e88
 80066f4:	08008e11 	.word	0x08008e11
 80066f8:	07f1      	lsls	r1, r6, #31
 80066fa:	d508      	bpl.n	800670e <_dtoa_r+0x34e>
 80066fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006704:	f7f9 ff50 	bl	80005a8 <__aeabi_dmul>
 8006708:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800670c:	3501      	adds	r5, #1
 800670e:	1076      	asrs	r6, r6, #1
 8006710:	3708      	adds	r7, #8
 8006712:	2e00      	cmp	r6, #0
 8006714:	d1f0      	bne.n	80066f8 <_dtoa_r+0x338>
 8006716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800671a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800671e:	f7fa f86d 	bl	80007fc <__aeabi_ddiv>
 8006722:	e9cd 0100 	strd	r0, r1, [sp]
 8006726:	e01a      	b.n	800675e <_dtoa_r+0x39e>
 8006728:	2502      	movs	r5, #2
 800672a:	e7a3      	b.n	8006674 <_dtoa_r+0x2b4>
 800672c:	f000 80a0 	beq.w	8006870 <_dtoa_r+0x4b0>
 8006730:	f1ca 0600 	rsb	r6, sl, #0
 8006734:	4b9f      	ldr	r3, [pc, #636]	; (80069b4 <_dtoa_r+0x5f4>)
 8006736:	4fa0      	ldr	r7, [pc, #640]	; (80069b8 <_dtoa_r+0x5f8>)
 8006738:	f006 020f 	and.w	r2, r6, #15
 800673c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006748:	f7f9 ff2e 	bl	80005a8 <__aeabi_dmul>
 800674c:	e9cd 0100 	strd	r0, r1, [sp]
 8006750:	1136      	asrs	r6, r6, #4
 8006752:	2300      	movs	r3, #0
 8006754:	2502      	movs	r5, #2
 8006756:	2e00      	cmp	r6, #0
 8006758:	d17f      	bne.n	800685a <_dtoa_r+0x49a>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e1      	bne.n	8006722 <_dtoa_r+0x362>
 800675e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8087 	beq.w	8006874 <_dtoa_r+0x4b4>
 8006766:	e9dd 6700 	ldrd	r6, r7, [sp]
 800676a:	2200      	movs	r2, #0
 800676c:	4b93      	ldr	r3, [pc, #588]	; (80069bc <_dtoa_r+0x5fc>)
 800676e:	4630      	mov	r0, r6
 8006770:	4639      	mov	r1, r7
 8006772:	f7fa f98b 	bl	8000a8c <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	d07c      	beq.n	8006874 <_dtoa_r+0x4b4>
 800677a:	f1b9 0f00 	cmp.w	r9, #0
 800677e:	d079      	beq.n	8006874 <_dtoa_r+0x4b4>
 8006780:	9b02      	ldr	r3, [sp, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	dd35      	ble.n	80067f2 <_dtoa_r+0x432>
 8006786:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	4639      	mov	r1, r7
 800678e:	2200      	movs	r2, #0
 8006790:	4b8b      	ldr	r3, [pc, #556]	; (80069c0 <_dtoa_r+0x600>)
 8006792:	4630      	mov	r0, r6
 8006794:	f7f9 ff08 	bl	80005a8 <__aeabi_dmul>
 8006798:	e9cd 0100 	strd	r0, r1, [sp]
 800679c:	9f02      	ldr	r7, [sp, #8]
 800679e:	3501      	adds	r5, #1
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7f9 fe97 	bl	80004d4 <__aeabi_i2d>
 80067a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067aa:	f7f9 fefd 	bl	80005a8 <__aeabi_dmul>
 80067ae:	2200      	movs	r2, #0
 80067b0:	4b84      	ldr	r3, [pc, #528]	; (80069c4 <_dtoa_r+0x604>)
 80067b2:	f7f9 fd43 	bl	800023c <__adddf3>
 80067b6:	4605      	mov	r5, r0
 80067b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80067bc:	2f00      	cmp	r7, #0
 80067be:	d15d      	bne.n	800687c <_dtoa_r+0x4bc>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b81      	ldr	r3, [pc, #516]	; (80069c8 <_dtoa_r+0x608>)
 80067c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067c8:	f7f9 fd36 	bl	8000238 <__aeabi_dsub>
 80067cc:	462a      	mov	r2, r5
 80067ce:	4633      	mov	r3, r6
 80067d0:	e9cd 0100 	strd	r0, r1, [sp]
 80067d4:	f7fa f978 	bl	8000ac8 <__aeabi_dcmpgt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f040 8288 	bne.w	8006cee <_dtoa_r+0x92e>
 80067de:	462a      	mov	r2, r5
 80067e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e8:	f7fa f950 	bl	8000a8c <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 827c 	bne.w	8006cea <_dtoa_r+0x92a>
 80067f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067f6:	e9cd 2300 	strd	r2, r3, [sp]
 80067fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f2c0 8150 	blt.w	8006aa2 <_dtoa_r+0x6e2>
 8006802:	f1ba 0f0e 	cmp.w	sl, #14
 8006806:	f300 814c 	bgt.w	8006aa2 <_dtoa_r+0x6e2>
 800680a:	4b6a      	ldr	r3, [pc, #424]	; (80069b4 <_dtoa_r+0x5f4>)
 800680c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006810:	ed93 7b00 	vldr	d7, [r3]
 8006814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006816:	2b00      	cmp	r3, #0
 8006818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800681c:	f280 80d8 	bge.w	80069d0 <_dtoa_r+0x610>
 8006820:	f1b9 0f00 	cmp.w	r9, #0
 8006824:	f300 80d4 	bgt.w	80069d0 <_dtoa_r+0x610>
 8006828:	f040 825e 	bne.w	8006ce8 <_dtoa_r+0x928>
 800682c:	2200      	movs	r2, #0
 800682e:	4b66      	ldr	r3, [pc, #408]	; (80069c8 <_dtoa_r+0x608>)
 8006830:	ec51 0b17 	vmov	r0, r1, d7
 8006834:	f7f9 feb8 	bl	80005a8 <__aeabi_dmul>
 8006838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800683c:	f7fa f93a 	bl	8000ab4 <__aeabi_dcmpge>
 8006840:	464f      	mov	r7, r9
 8006842:	464e      	mov	r6, r9
 8006844:	2800      	cmp	r0, #0
 8006846:	f040 8234 	bne.w	8006cb2 <_dtoa_r+0x8f2>
 800684a:	2331      	movs	r3, #49	; 0x31
 800684c:	f10b 0501 	add.w	r5, fp, #1
 8006850:	f88b 3000 	strb.w	r3, [fp]
 8006854:	f10a 0a01 	add.w	sl, sl, #1
 8006858:	e22f      	b.n	8006cba <_dtoa_r+0x8fa>
 800685a:	07f2      	lsls	r2, r6, #31
 800685c:	d505      	bpl.n	800686a <_dtoa_r+0x4aa>
 800685e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006862:	f7f9 fea1 	bl	80005a8 <__aeabi_dmul>
 8006866:	3501      	adds	r5, #1
 8006868:	2301      	movs	r3, #1
 800686a:	1076      	asrs	r6, r6, #1
 800686c:	3708      	adds	r7, #8
 800686e:	e772      	b.n	8006756 <_dtoa_r+0x396>
 8006870:	2502      	movs	r5, #2
 8006872:	e774      	b.n	800675e <_dtoa_r+0x39e>
 8006874:	f8cd a020 	str.w	sl, [sp, #32]
 8006878:	464f      	mov	r7, r9
 800687a:	e791      	b.n	80067a0 <_dtoa_r+0x3e0>
 800687c:	4b4d      	ldr	r3, [pc, #308]	; (80069b4 <_dtoa_r+0x5f4>)
 800687e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006882:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006888:	2b00      	cmp	r3, #0
 800688a:	d047      	beq.n	800691c <_dtoa_r+0x55c>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	2000      	movs	r0, #0
 8006892:	494e      	ldr	r1, [pc, #312]	; (80069cc <_dtoa_r+0x60c>)
 8006894:	f7f9 ffb2 	bl	80007fc <__aeabi_ddiv>
 8006898:	462a      	mov	r2, r5
 800689a:	4633      	mov	r3, r6
 800689c:	f7f9 fccc 	bl	8000238 <__aeabi_dsub>
 80068a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068a4:	465d      	mov	r5, fp
 80068a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068aa:	f7fa f92d 	bl	8000b08 <__aeabi_d2iz>
 80068ae:	4606      	mov	r6, r0
 80068b0:	f7f9 fe10 	bl	80004d4 <__aeabi_i2d>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068bc:	f7f9 fcbc 	bl	8000238 <__aeabi_dsub>
 80068c0:	3630      	adds	r6, #48	; 0x30
 80068c2:	f805 6b01 	strb.w	r6, [r5], #1
 80068c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068ca:	e9cd 0100 	strd	r0, r1, [sp]
 80068ce:	f7fa f8dd 	bl	8000a8c <__aeabi_dcmplt>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d163      	bne.n	800699e <_dtoa_r+0x5de>
 80068d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068da:	2000      	movs	r0, #0
 80068dc:	4937      	ldr	r1, [pc, #220]	; (80069bc <_dtoa_r+0x5fc>)
 80068de:	f7f9 fcab 	bl	8000238 <__aeabi_dsub>
 80068e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068e6:	f7fa f8d1 	bl	8000a8c <__aeabi_dcmplt>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f040 80b7 	bne.w	8006a5e <_dtoa_r+0x69e>
 80068f0:	eba5 030b 	sub.w	r3, r5, fp
 80068f4:	429f      	cmp	r7, r3
 80068f6:	f77f af7c 	ble.w	80067f2 <_dtoa_r+0x432>
 80068fa:	2200      	movs	r2, #0
 80068fc:	4b30      	ldr	r3, [pc, #192]	; (80069c0 <_dtoa_r+0x600>)
 80068fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006902:	f7f9 fe51 	bl	80005a8 <__aeabi_dmul>
 8006906:	2200      	movs	r2, #0
 8006908:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800690c:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <_dtoa_r+0x600>)
 800690e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006912:	f7f9 fe49 	bl	80005a8 <__aeabi_dmul>
 8006916:	e9cd 0100 	strd	r0, r1, [sp]
 800691a:	e7c4      	b.n	80068a6 <_dtoa_r+0x4e6>
 800691c:	462a      	mov	r2, r5
 800691e:	4633      	mov	r3, r6
 8006920:	f7f9 fe42 	bl	80005a8 <__aeabi_dmul>
 8006924:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006928:	eb0b 0507 	add.w	r5, fp, r7
 800692c:	465e      	mov	r6, fp
 800692e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006932:	f7fa f8e9 	bl	8000b08 <__aeabi_d2iz>
 8006936:	4607      	mov	r7, r0
 8006938:	f7f9 fdcc 	bl	80004d4 <__aeabi_i2d>
 800693c:	3730      	adds	r7, #48	; 0x30
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006946:	f7f9 fc77 	bl	8000238 <__aeabi_dsub>
 800694a:	f806 7b01 	strb.w	r7, [r6], #1
 800694e:	42ae      	cmp	r6, r5
 8006950:	e9cd 0100 	strd	r0, r1, [sp]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	d126      	bne.n	80069a8 <_dtoa_r+0x5e8>
 800695a:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <_dtoa_r+0x60c>)
 800695c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006960:	f7f9 fc6c 	bl	800023c <__adddf3>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800696c:	f7fa f8ac 	bl	8000ac8 <__aeabi_dcmpgt>
 8006970:	2800      	cmp	r0, #0
 8006972:	d174      	bne.n	8006a5e <_dtoa_r+0x69e>
 8006974:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006978:	2000      	movs	r0, #0
 800697a:	4914      	ldr	r1, [pc, #80]	; (80069cc <_dtoa_r+0x60c>)
 800697c:	f7f9 fc5c 	bl	8000238 <__aeabi_dsub>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006988:	f7fa f880 	bl	8000a8c <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	f43f af30 	beq.w	80067f2 <_dtoa_r+0x432>
 8006992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006996:	2b30      	cmp	r3, #48	; 0x30
 8006998:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800699c:	d002      	beq.n	80069a4 <_dtoa_r+0x5e4>
 800699e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80069a2:	e04a      	b.n	8006a3a <_dtoa_r+0x67a>
 80069a4:	4615      	mov	r5, r2
 80069a6:	e7f4      	b.n	8006992 <_dtoa_r+0x5d2>
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <_dtoa_r+0x600>)
 80069aa:	f7f9 fdfd 	bl	80005a8 <__aeabi_dmul>
 80069ae:	e9cd 0100 	strd	r0, r1, [sp]
 80069b2:	e7bc      	b.n	800692e <_dtoa_r+0x56e>
 80069b4:	08008eb0 	.word	0x08008eb0
 80069b8:	08008e88 	.word	0x08008e88
 80069bc:	3ff00000 	.word	0x3ff00000
 80069c0:	40240000 	.word	0x40240000
 80069c4:	401c0000 	.word	0x401c0000
 80069c8:	40140000 	.word	0x40140000
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069d4:	465d      	mov	r5, fp
 80069d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7f9 ff0d 	bl	80007fc <__aeabi_ddiv>
 80069e2:	f7fa f891 	bl	8000b08 <__aeabi_d2iz>
 80069e6:	4680      	mov	r8, r0
 80069e8:	f7f9 fd74 	bl	80004d4 <__aeabi_i2d>
 80069ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f0:	f7f9 fdda 	bl	80005a8 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4630      	mov	r0, r6
 80069fa:	4639      	mov	r1, r7
 80069fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006a00:	f7f9 fc1a 	bl	8000238 <__aeabi_dsub>
 8006a04:	f805 6b01 	strb.w	r6, [r5], #1
 8006a08:	eba5 060b 	sub.w	r6, r5, fp
 8006a0c:	45b1      	cmp	r9, r6
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	d139      	bne.n	8006a88 <_dtoa_r+0x6c8>
 8006a14:	f7f9 fc12 	bl	800023c <__adddf3>
 8006a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	460f      	mov	r7, r1
 8006a20:	f7fa f852 	bl	8000ac8 <__aeabi_dcmpgt>
 8006a24:	b9c8      	cbnz	r0, 8006a5a <_dtoa_r+0x69a>
 8006a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	f7fa f823 	bl	8000a78 <__aeabi_dcmpeq>
 8006a32:	b110      	cbz	r0, 8006a3a <_dtoa_r+0x67a>
 8006a34:	f018 0f01 	tst.w	r8, #1
 8006a38:	d10f      	bne.n	8006a5a <_dtoa_r+0x69a>
 8006a3a:	9904      	ldr	r1, [sp, #16]
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 ffdd 	bl	80079fc <_Bfree>
 8006a42:	2300      	movs	r3, #0
 8006a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a46:	702b      	strb	r3, [r5, #0]
 8006a48:	f10a 0301 	add.w	r3, sl, #1
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8241 	beq.w	8006ed8 <_dtoa_r+0xb18>
 8006a56:	601d      	str	r5, [r3, #0]
 8006a58:	e23e      	b.n	8006ed8 <_dtoa_r+0xb18>
 8006a5a:	f8cd a020 	str.w	sl, [sp, #32]
 8006a5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a62:	2a39      	cmp	r2, #57	; 0x39
 8006a64:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006a68:	d108      	bne.n	8006a7c <_dtoa_r+0x6bc>
 8006a6a:	459b      	cmp	fp, r3
 8006a6c:	d10a      	bne.n	8006a84 <_dtoa_r+0x6c4>
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	3301      	adds	r3, #1
 8006a72:	9308      	str	r3, [sp, #32]
 8006a74:	2330      	movs	r3, #48	; 0x30
 8006a76:	f88b 3000 	strb.w	r3, [fp]
 8006a7a:	465b      	mov	r3, fp
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	3201      	adds	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e78c      	b.n	800699e <_dtoa_r+0x5de>
 8006a84:	461d      	mov	r5, r3
 8006a86:	e7ea      	b.n	8006a5e <_dtoa_r+0x69e>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4b9b      	ldr	r3, [pc, #620]	; (8006cf8 <_dtoa_r+0x938>)
 8006a8c:	f7f9 fd8c 	bl	80005a8 <__aeabi_dmul>
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	4606      	mov	r6, r0
 8006a96:	460f      	mov	r7, r1
 8006a98:	f7f9 ffee 	bl	8000a78 <__aeabi_dcmpeq>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d09a      	beq.n	80069d6 <_dtoa_r+0x616>
 8006aa0:	e7cb      	b.n	8006a3a <_dtoa_r+0x67a>
 8006aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa4:	2a00      	cmp	r2, #0
 8006aa6:	f000 808b 	beq.w	8006bc0 <_dtoa_r+0x800>
 8006aaa:	9a06      	ldr	r2, [sp, #24]
 8006aac:	2a01      	cmp	r2, #1
 8006aae:	dc6e      	bgt.n	8006b8e <_dtoa_r+0x7ce>
 8006ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	d067      	beq.n	8006b86 <_dtoa_r+0x7c6>
 8006ab6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006aba:	9f07      	ldr	r7, [sp, #28]
 8006abc:	9d05      	ldr	r5, [sp, #20]
 8006abe:	9a05      	ldr	r2, [sp, #20]
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	441a      	add	r2, r3
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	9205      	str	r2, [sp, #20]
 8006ac8:	4498      	add	r8, r3
 8006aca:	f001 f875 	bl	8007bb8 <__i2b>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	dd0c      	ble.n	8006aee <_dtoa_r+0x72e>
 8006ad4:	f1b8 0f00 	cmp.w	r8, #0
 8006ad8:	dd09      	ble.n	8006aee <_dtoa_r+0x72e>
 8006ada:	4545      	cmp	r5, r8
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	462b      	mov	r3, r5
 8006ae0:	bfa8      	it	ge
 8006ae2:	4643      	movge	r3, r8
 8006ae4:	1ad2      	subs	r2, r2, r3
 8006ae6:	9205      	str	r2, [sp, #20]
 8006ae8:	1aed      	subs	r5, r5, r3
 8006aea:	eba8 0803 	sub.w	r8, r8, r3
 8006aee:	9b07      	ldr	r3, [sp, #28]
 8006af0:	b1eb      	cbz	r3, 8006b2e <_dtoa_r+0x76e>
 8006af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d067      	beq.n	8006bc8 <_dtoa_r+0x808>
 8006af8:	b18f      	cbz	r7, 8006b1e <_dtoa_r+0x75e>
 8006afa:	4631      	mov	r1, r6
 8006afc:	463a      	mov	r2, r7
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 f8fa 	bl	8007cf8 <__pow5mult>
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	4601      	mov	r1, r0
 8006b08:	4606      	mov	r6, r0
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f001 f85d 	bl	8007bca <__multiply>
 8006b10:	9904      	ldr	r1, [sp, #16]
 8006b12:	9008      	str	r0, [sp, #32]
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 ff71 	bl	80079fc <_Bfree>
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	9b07      	ldr	r3, [sp, #28]
 8006b20:	1bda      	subs	r2, r3, r7
 8006b22:	d004      	beq.n	8006b2e <_dtoa_r+0x76e>
 8006b24:	9904      	ldr	r1, [sp, #16]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 f8e6 	bl	8007cf8 <__pow5mult>
 8006b2c:	9004      	str	r0, [sp, #16]
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4620      	mov	r0, r4
 8006b32:	f001 f841 	bl	8007bb8 <__i2b>
 8006b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b38:	4607      	mov	r7, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 81d0 	beq.w	8006ee0 <_dtoa_r+0xb20>
 8006b40:	461a      	mov	r2, r3
 8006b42:	4601      	mov	r1, r0
 8006b44:	4620      	mov	r0, r4
 8006b46:	f001 f8d7 	bl	8007cf8 <__pow5mult>
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	4607      	mov	r7, r0
 8006b50:	dc40      	bgt.n	8006bd4 <_dtoa_r+0x814>
 8006b52:	9b00      	ldr	r3, [sp, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d139      	bne.n	8006bcc <_dtoa_r+0x80c>
 8006b58:	9b01      	ldr	r3, [sp, #4]
 8006b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d136      	bne.n	8006bd0 <_dtoa_r+0x810>
 8006b62:	9b01      	ldr	r3, [sp, #4]
 8006b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	0d1b      	lsrs	r3, r3, #20
 8006b6a:	051b      	lsls	r3, r3, #20
 8006b6c:	b12b      	cbz	r3, 8006b7a <_dtoa_r+0x7ba>
 8006b6e:	9b05      	ldr	r3, [sp, #20]
 8006b70:	3301      	adds	r3, #1
 8006b72:	9305      	str	r3, [sp, #20]
 8006b74:	f108 0801 	add.w	r8, r8, #1
 8006b78:	2301      	movs	r3, #1
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d12a      	bne.n	8006bd8 <_dtoa_r+0x818>
 8006b82:	2001      	movs	r0, #1
 8006b84:	e030      	b.n	8006be8 <_dtoa_r+0x828>
 8006b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b8c:	e795      	b.n	8006aba <_dtoa_r+0x6fa>
 8006b8e:	9b07      	ldr	r3, [sp, #28]
 8006b90:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006b94:	42bb      	cmp	r3, r7
 8006b96:	bfbf      	itttt	lt
 8006b98:	9b07      	ldrlt	r3, [sp, #28]
 8006b9a:	9707      	strlt	r7, [sp, #28]
 8006b9c:	1afa      	sublt	r2, r7, r3
 8006b9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ba0:	bfbb      	ittet	lt
 8006ba2:	189b      	addlt	r3, r3, r2
 8006ba4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ba6:	1bdf      	subge	r7, r3, r7
 8006ba8:	2700      	movlt	r7, #0
 8006baa:	f1b9 0f00 	cmp.w	r9, #0
 8006bae:	bfb5      	itete	lt
 8006bb0:	9b05      	ldrlt	r3, [sp, #20]
 8006bb2:	9d05      	ldrge	r5, [sp, #20]
 8006bb4:	eba3 0509 	sublt.w	r5, r3, r9
 8006bb8:	464b      	movge	r3, r9
 8006bba:	bfb8      	it	lt
 8006bbc:	2300      	movlt	r3, #0
 8006bbe:	e77e      	b.n	8006abe <_dtoa_r+0x6fe>
 8006bc0:	9f07      	ldr	r7, [sp, #28]
 8006bc2:	9d05      	ldr	r5, [sp, #20]
 8006bc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006bc6:	e783      	b.n	8006ad0 <_dtoa_r+0x710>
 8006bc8:	9a07      	ldr	r2, [sp, #28]
 8006bca:	e7ab      	b.n	8006b24 <_dtoa_r+0x764>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e7d4      	b.n	8006b7a <_dtoa_r+0x7ba>
 8006bd0:	9b00      	ldr	r3, [sp, #0]
 8006bd2:	e7d2      	b.n	8006b7a <_dtoa_r+0x7ba>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9307      	str	r3, [sp, #28]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006bde:	6918      	ldr	r0, [r3, #16]
 8006be0:	f000 ff9c 	bl	8007b1c <__hi0bits>
 8006be4:	f1c0 0020 	rsb	r0, r0, #32
 8006be8:	4440      	add	r0, r8
 8006bea:	f010 001f 	ands.w	r0, r0, #31
 8006bee:	d047      	beq.n	8006c80 <_dtoa_r+0x8c0>
 8006bf0:	f1c0 0320 	rsb	r3, r0, #32
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	dd3b      	ble.n	8006c70 <_dtoa_r+0x8b0>
 8006bf8:	9b05      	ldr	r3, [sp, #20]
 8006bfa:	f1c0 001c 	rsb	r0, r0, #28
 8006bfe:	4403      	add	r3, r0
 8006c00:	9305      	str	r3, [sp, #20]
 8006c02:	4405      	add	r5, r0
 8006c04:	4480      	add	r8, r0
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd05      	ble.n	8006c18 <_dtoa_r+0x858>
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	9904      	ldr	r1, [sp, #16]
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 f8bf 	bl	8007d94 <__lshift>
 8006c16:	9004      	str	r0, [sp, #16]
 8006c18:	f1b8 0f00 	cmp.w	r8, #0
 8006c1c:	dd05      	ble.n	8006c2a <_dtoa_r+0x86a>
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4642      	mov	r2, r8
 8006c22:	4620      	mov	r0, r4
 8006c24:	f001 f8b6 	bl	8007d94 <__lshift>
 8006c28:	4607      	mov	r7, r0
 8006c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c2c:	b353      	cbz	r3, 8006c84 <_dtoa_r+0x8c4>
 8006c2e:	4639      	mov	r1, r7
 8006c30:	9804      	ldr	r0, [sp, #16]
 8006c32:	f001 f903 	bl	8007e3c <__mcmp>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	da24      	bge.n	8006c84 <_dtoa_r+0x8c4>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	9904      	ldr	r1, [sp, #16]
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fef2 	bl	8007a2a <__multadd>
 8006c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c48:	9004      	str	r0, [sp, #16]
 8006c4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 814d 	beq.w	8006eee <_dtoa_r+0xb2e>
 8006c54:	2300      	movs	r3, #0
 8006c56:	4631      	mov	r1, r6
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fee5 	bl	8007a2a <__multadd>
 8006c60:	9b02      	ldr	r3, [sp, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	4606      	mov	r6, r0
 8006c66:	dc4f      	bgt.n	8006d08 <_dtoa_r+0x948>
 8006c68:	9b06      	ldr	r3, [sp, #24]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	dd4c      	ble.n	8006d08 <_dtoa_r+0x948>
 8006c6e:	e011      	b.n	8006c94 <_dtoa_r+0x8d4>
 8006c70:	d0c9      	beq.n	8006c06 <_dtoa_r+0x846>
 8006c72:	9a05      	ldr	r2, [sp, #20]
 8006c74:	331c      	adds	r3, #28
 8006c76:	441a      	add	r2, r3
 8006c78:	9205      	str	r2, [sp, #20]
 8006c7a:	441d      	add	r5, r3
 8006c7c:	4498      	add	r8, r3
 8006c7e:	e7c2      	b.n	8006c06 <_dtoa_r+0x846>
 8006c80:	4603      	mov	r3, r0
 8006c82:	e7f6      	b.n	8006c72 <_dtoa_r+0x8b2>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	dc38      	bgt.n	8006cfc <_dtoa_r+0x93c>
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	dd35      	ble.n	8006cfc <_dtoa_r+0x93c>
 8006c90:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	b963      	cbnz	r3, 8006cb2 <_dtoa_r+0x8f2>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	2205      	movs	r2, #5
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fec4 	bl	8007a2a <__multadd>
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	9804      	ldr	r0, [sp, #16]
 8006ca8:	f001 f8c8 	bl	8007e3c <__mcmp>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f73f adcc 	bgt.w	800684a <_dtoa_r+0x48a>
 8006cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb4:	465d      	mov	r5, fp
 8006cb6:	ea6f 0a03 	mvn.w	sl, r3
 8006cba:	f04f 0900 	mov.w	r9, #0
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fe9b 	bl	80079fc <_Bfree>
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	f43f aeb7 	beq.w	8006a3a <_dtoa_r+0x67a>
 8006ccc:	f1b9 0f00 	cmp.w	r9, #0
 8006cd0:	d005      	beq.n	8006cde <_dtoa_r+0x91e>
 8006cd2:	45b1      	cmp	r9, r6
 8006cd4:	d003      	beq.n	8006cde <_dtoa_r+0x91e>
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fe8f 	bl	80079fc <_Bfree>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fe8b 	bl	80079fc <_Bfree>
 8006ce6:	e6a8      	b.n	8006a3a <_dtoa_r+0x67a>
 8006ce8:	2700      	movs	r7, #0
 8006cea:	463e      	mov	r6, r7
 8006cec:	e7e1      	b.n	8006cb2 <_dtoa_r+0x8f2>
 8006cee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006cf2:	463e      	mov	r6, r7
 8006cf4:	e5a9      	b.n	800684a <_dtoa_r+0x48a>
 8006cf6:	bf00      	nop
 8006cf8:	40240000 	.word	0x40240000
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80fa 	beq.w	8006efc <_dtoa_r+0xb3c>
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	dd05      	ble.n	8006d18 <_dtoa_r+0x958>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4620      	mov	r0, r4
 8006d12:	f001 f83f 	bl	8007d94 <__lshift>
 8006d16:	4606      	mov	r6, r0
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d04c      	beq.n	8006db8 <_dtoa_r+0x9f8>
 8006d1e:	6871      	ldr	r1, [r6, #4]
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fe37 	bl	8007994 <_Balloc>
 8006d26:	6932      	ldr	r2, [r6, #16]
 8006d28:	3202      	adds	r2, #2
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	0092      	lsls	r2, r2, #2
 8006d2e:	f106 010c 	add.w	r1, r6, #12
 8006d32:	300c      	adds	r0, #12
 8006d34:	f7fd fc52 	bl	80045dc <memcpy>
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f001 f829 	bl	8007d94 <__lshift>
 8006d42:	9b00      	ldr	r3, [sp, #0]
 8006d44:	f8cd b014 	str.w	fp, [sp, #20]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	46b1      	mov	r9, r6
 8006d4e:	9307      	str	r3, [sp, #28]
 8006d50:	4606      	mov	r6, r0
 8006d52:	4639      	mov	r1, r7
 8006d54:	9804      	ldr	r0, [sp, #16]
 8006d56:	f7ff faa5 	bl	80062a4 <quorem>
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d62:	9804      	ldr	r0, [sp, #16]
 8006d64:	f001 f86a 	bl	8007e3c <__mcmp>
 8006d68:	4632      	mov	r2, r6
 8006d6a:	9000      	str	r0, [sp, #0]
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f001 f87e 	bl	8007e70 <__mdiff>
 8006d74:	68c3      	ldr	r3, [r0, #12]
 8006d76:	4602      	mov	r2, r0
 8006d78:	bb03      	cbnz	r3, 8006dbc <_dtoa_r+0x9fc>
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	9008      	str	r0, [sp, #32]
 8006d7e:	9804      	ldr	r0, [sp, #16]
 8006d80:	f001 f85c 	bl	8007e3c <__mcmp>
 8006d84:	9a08      	ldr	r2, [sp, #32]
 8006d86:	4603      	mov	r3, r0
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	f000 fe35 	bl	80079fc <_Bfree>
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	b9a3      	cbnz	r3, 8006dc0 <_dtoa_r+0xa00>
 8006d96:	9a06      	ldr	r2, [sp, #24]
 8006d98:	b992      	cbnz	r2, 8006dc0 <_dtoa_r+0xa00>
 8006d9a:	9a07      	ldr	r2, [sp, #28]
 8006d9c:	b982      	cbnz	r2, 8006dc0 <_dtoa_r+0xa00>
 8006d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006da2:	d029      	beq.n	8006df8 <_dtoa_r+0xa38>
 8006da4:	9b00      	ldr	r3, [sp, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	dd01      	ble.n	8006dae <_dtoa_r+0x9ee>
 8006daa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006dae:	9b05      	ldr	r3, [sp, #20]
 8006db0:	1c5d      	adds	r5, r3, #1
 8006db2:	f883 8000 	strb.w	r8, [r3]
 8006db6:	e782      	b.n	8006cbe <_dtoa_r+0x8fe>
 8006db8:	4630      	mov	r0, r6
 8006dba:	e7c2      	b.n	8006d42 <_dtoa_r+0x982>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e7e3      	b.n	8006d88 <_dtoa_r+0x9c8>
 8006dc0:	9a00      	ldr	r2, [sp, #0]
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	db04      	blt.n	8006dd0 <_dtoa_r+0xa10>
 8006dc6:	d125      	bne.n	8006e14 <_dtoa_r+0xa54>
 8006dc8:	9a06      	ldr	r2, [sp, #24]
 8006dca:	bb1a      	cbnz	r2, 8006e14 <_dtoa_r+0xa54>
 8006dcc:	9a07      	ldr	r2, [sp, #28]
 8006dce:	bb0a      	cbnz	r2, 8006e14 <_dtoa_r+0xa54>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	ddec      	ble.n	8006dae <_dtoa_r+0x9ee>
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	9904      	ldr	r1, [sp, #16]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 ffdb 	bl	8007d94 <__lshift>
 8006dde:	4639      	mov	r1, r7
 8006de0:	9004      	str	r0, [sp, #16]
 8006de2:	f001 f82b 	bl	8007e3c <__mcmp>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	dc03      	bgt.n	8006df2 <_dtoa_r+0xa32>
 8006dea:	d1e0      	bne.n	8006dae <_dtoa_r+0x9ee>
 8006dec:	f018 0f01 	tst.w	r8, #1
 8006df0:	d0dd      	beq.n	8006dae <_dtoa_r+0x9ee>
 8006df2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006df6:	d1d8      	bne.n	8006daa <_dtoa_r+0x9ea>
 8006df8:	9b05      	ldr	r3, [sp, #20]
 8006dfa:	9a05      	ldr	r2, [sp, #20]
 8006dfc:	1c5d      	adds	r5, r3, #1
 8006dfe:	2339      	movs	r3, #57	; 0x39
 8006e00:	7013      	strb	r3, [r2, #0]
 8006e02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e06:	2b39      	cmp	r3, #57	; 0x39
 8006e08:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006e0c:	d04f      	beq.n	8006eae <_dtoa_r+0xaee>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	7013      	strb	r3, [r2, #0]
 8006e12:	e754      	b.n	8006cbe <_dtoa_r+0x8fe>
 8006e14:	9a05      	ldr	r2, [sp, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f102 0501 	add.w	r5, r2, #1
 8006e1c:	dd06      	ble.n	8006e2c <_dtoa_r+0xa6c>
 8006e1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e22:	d0e9      	beq.n	8006df8 <_dtoa_r+0xa38>
 8006e24:	f108 0801 	add.w	r8, r8, #1
 8006e28:	9b05      	ldr	r3, [sp, #20]
 8006e2a:	e7c2      	b.n	8006db2 <_dtoa_r+0x9f2>
 8006e2c:	9a02      	ldr	r2, [sp, #8]
 8006e2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006e32:	eba5 030b 	sub.w	r3, r5, fp
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d021      	beq.n	8006e7e <_dtoa_r+0xabe>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	9904      	ldr	r1, [sp, #16]
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fdf2 	bl	8007a2a <__multadd>
 8006e46:	45b1      	cmp	r9, r6
 8006e48:	9004      	str	r0, [sp, #16]
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	f04f 020a 	mov.w	r2, #10
 8006e52:	4649      	mov	r1, r9
 8006e54:	4620      	mov	r0, r4
 8006e56:	d105      	bne.n	8006e64 <_dtoa_r+0xaa4>
 8006e58:	f000 fde7 	bl	8007a2a <__multadd>
 8006e5c:	4681      	mov	r9, r0
 8006e5e:	4606      	mov	r6, r0
 8006e60:	9505      	str	r5, [sp, #20]
 8006e62:	e776      	b.n	8006d52 <_dtoa_r+0x992>
 8006e64:	f000 fde1 	bl	8007a2a <__multadd>
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4681      	mov	r9, r0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	220a      	movs	r2, #10
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fdda 	bl	8007a2a <__multadd>
 8006e76:	4606      	mov	r6, r0
 8006e78:	e7f2      	b.n	8006e60 <_dtoa_r+0xaa0>
 8006e7a:	f04f 0900 	mov.w	r9, #0
 8006e7e:	2201      	movs	r2, #1
 8006e80:	9904      	ldr	r1, [sp, #16]
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 ff86 	bl	8007d94 <__lshift>
 8006e88:	4639      	mov	r1, r7
 8006e8a:	9004      	str	r0, [sp, #16]
 8006e8c:	f000 ffd6 	bl	8007e3c <__mcmp>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	dcb6      	bgt.n	8006e02 <_dtoa_r+0xa42>
 8006e94:	d102      	bne.n	8006e9c <_dtoa_r+0xadc>
 8006e96:	f018 0f01 	tst.w	r8, #1
 8006e9a:	d1b2      	bne.n	8006e02 <_dtoa_r+0xa42>
 8006e9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ea0:	2b30      	cmp	r3, #48	; 0x30
 8006ea2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006ea6:	f47f af0a 	bne.w	8006cbe <_dtoa_r+0x8fe>
 8006eaa:	4615      	mov	r5, r2
 8006eac:	e7f6      	b.n	8006e9c <_dtoa_r+0xadc>
 8006eae:	4593      	cmp	fp, r2
 8006eb0:	d105      	bne.n	8006ebe <_dtoa_r+0xafe>
 8006eb2:	2331      	movs	r3, #49	; 0x31
 8006eb4:	f10a 0a01 	add.w	sl, sl, #1
 8006eb8:	f88b 3000 	strb.w	r3, [fp]
 8006ebc:	e6ff      	b.n	8006cbe <_dtoa_r+0x8fe>
 8006ebe:	4615      	mov	r5, r2
 8006ec0:	e79f      	b.n	8006e02 <_dtoa_r+0xa42>
 8006ec2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006f28 <_dtoa_r+0xb68>
 8006ec6:	e007      	b.n	8006ed8 <_dtoa_r+0xb18>
 8006ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006eca:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006f2c <_dtoa_r+0xb6c>
 8006ece:	b11b      	cbz	r3, 8006ed8 <_dtoa_r+0xb18>
 8006ed0:	f10b 0308 	add.w	r3, fp, #8
 8006ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	4658      	mov	r0, fp
 8006eda:	b017      	add	sp, #92	; 0x5c
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	9b06      	ldr	r3, [sp, #24]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	f77f ae35 	ble.w	8006b52 <_dtoa_r+0x792>
 8006ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	e649      	b.n	8006b82 <_dtoa_r+0x7c2>
 8006eee:	9b02      	ldr	r3, [sp, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc03      	bgt.n	8006efc <_dtoa_r+0xb3c>
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	f73f aecc 	bgt.w	8006c94 <_dtoa_r+0x8d4>
 8006efc:	465d      	mov	r5, fp
 8006efe:	4639      	mov	r1, r7
 8006f00:	9804      	ldr	r0, [sp, #16]
 8006f02:	f7ff f9cf 	bl	80062a4 <quorem>
 8006f06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f0a:	f805 8b01 	strb.w	r8, [r5], #1
 8006f0e:	9a02      	ldr	r2, [sp, #8]
 8006f10:	eba5 030b 	sub.w	r3, r5, fp
 8006f14:	429a      	cmp	r2, r3
 8006f16:	ddb0      	ble.n	8006e7a <_dtoa_r+0xaba>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	9904      	ldr	r1, [sp, #16]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 fd83 	bl	8007a2a <__multadd>
 8006f24:	9004      	str	r0, [sp, #16]
 8006f26:	e7ea      	b.n	8006efe <_dtoa_r+0xb3e>
 8006f28:	08008d8c 	.word	0x08008d8c
 8006f2c:	08008e08 	.word	0x08008e08

08006f30 <__sflush_r>:
 8006f30:	898a      	ldrh	r2, [r1, #12]
 8006f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	4605      	mov	r5, r0
 8006f38:	0710      	lsls	r0, r2, #28
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	d458      	bmi.n	8006ff0 <__sflush_r+0xc0>
 8006f3e:	684b      	ldr	r3, [r1, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dc05      	bgt.n	8006f50 <__sflush_r+0x20>
 8006f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dc02      	bgt.n	8006f50 <__sflush_r+0x20>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d0f9      	beq.n	8006f4a <__sflush_r+0x1a>
 8006f56:	2300      	movs	r3, #0
 8006f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f5c:	682f      	ldr	r7, [r5, #0]
 8006f5e:	6a21      	ldr	r1, [r4, #32]
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	d032      	beq.n	8006fca <__sflush_r+0x9a>
 8006f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	075a      	lsls	r2, r3, #29
 8006f6a:	d505      	bpl.n	8006f78 <__sflush_r+0x48>
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	1ac0      	subs	r0, r0, r3
 8006f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f72:	b10b      	cbz	r3, 8006f78 <__sflush_r+0x48>
 8006f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f76:	1ac0      	subs	r0, r0, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f7e:	6a21      	ldr	r1, [r4, #32]
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b0      	blx	r6
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	d106      	bne.n	8006f98 <__sflush_r+0x68>
 8006f8a:	6829      	ldr	r1, [r5, #0]
 8006f8c:	291d      	cmp	r1, #29
 8006f8e:	d848      	bhi.n	8007022 <__sflush_r+0xf2>
 8006f90:	4a29      	ldr	r2, [pc, #164]	; (8007038 <__sflush_r+0x108>)
 8006f92:	40ca      	lsrs	r2, r1
 8006f94:	07d6      	lsls	r6, r2, #31
 8006f96:	d544      	bpl.n	8007022 <__sflush_r+0xf2>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	6062      	str	r2, [r4, #4]
 8006f9c:	04d9      	lsls	r1, r3, #19
 8006f9e:	6922      	ldr	r2, [r4, #16]
 8006fa0:	6022      	str	r2, [r4, #0]
 8006fa2:	d504      	bpl.n	8006fae <__sflush_r+0x7e>
 8006fa4:	1c42      	adds	r2, r0, #1
 8006fa6:	d101      	bne.n	8006fac <__sflush_r+0x7c>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b903      	cbnz	r3, 8006fae <__sflush_r+0x7e>
 8006fac:	6560      	str	r0, [r4, #84]	; 0x54
 8006fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fb0:	602f      	str	r7, [r5, #0]
 8006fb2:	2900      	cmp	r1, #0
 8006fb4:	d0c9      	beq.n	8006f4a <__sflush_r+0x1a>
 8006fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	d002      	beq.n	8006fc4 <__sflush_r+0x94>
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f001 f8f6 	bl	80081b0 <_free_r>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8006fc8:	e7c0      	b.n	8006f4c <__sflush_r+0x1c>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b0      	blx	r6
 8006fd0:	1c41      	adds	r1, r0, #1
 8006fd2:	d1c8      	bne.n	8006f66 <__sflush_r+0x36>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0c5      	beq.n	8006f66 <__sflush_r+0x36>
 8006fda:	2b1d      	cmp	r3, #29
 8006fdc:	d001      	beq.n	8006fe2 <__sflush_r+0xb2>
 8006fde:	2b16      	cmp	r3, #22
 8006fe0:	d101      	bne.n	8006fe6 <__sflush_r+0xb6>
 8006fe2:	602f      	str	r7, [r5, #0]
 8006fe4:	e7b1      	b.n	8006f4a <__sflush_r+0x1a>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	e7ad      	b.n	8006f4c <__sflush_r+0x1c>
 8006ff0:	690f      	ldr	r7, [r1, #16]
 8006ff2:	2f00      	cmp	r7, #0
 8006ff4:	d0a9      	beq.n	8006f4a <__sflush_r+0x1a>
 8006ff6:	0793      	lsls	r3, r2, #30
 8006ff8:	680e      	ldr	r6, [r1, #0]
 8006ffa:	bf08      	it	eq
 8006ffc:	694b      	ldreq	r3, [r1, #20]
 8006ffe:	600f      	str	r7, [r1, #0]
 8007000:	bf18      	it	ne
 8007002:	2300      	movne	r3, #0
 8007004:	eba6 0807 	sub.w	r8, r6, r7
 8007008:	608b      	str	r3, [r1, #8]
 800700a:	f1b8 0f00 	cmp.w	r8, #0
 800700e:	dd9c      	ble.n	8006f4a <__sflush_r+0x1a>
 8007010:	4643      	mov	r3, r8
 8007012:	463a      	mov	r2, r7
 8007014:	6a21      	ldr	r1, [r4, #32]
 8007016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007018:	4628      	mov	r0, r5
 800701a:	47b0      	blx	r6
 800701c:	2800      	cmp	r0, #0
 800701e:	dc06      	bgt.n	800702e <__sflush_r+0xfe>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800702c:	e78e      	b.n	8006f4c <__sflush_r+0x1c>
 800702e:	4407      	add	r7, r0
 8007030:	eba8 0800 	sub.w	r8, r8, r0
 8007034:	e7e9      	b.n	800700a <__sflush_r+0xda>
 8007036:	bf00      	nop
 8007038:	20400001 	.word	0x20400001

0800703c <_fflush_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	690b      	ldr	r3, [r1, #16]
 8007040:	4605      	mov	r5, r0
 8007042:	460c      	mov	r4, r1
 8007044:	b1db      	cbz	r3, 800707e <_fflush_r+0x42>
 8007046:	b118      	cbz	r0, 8007050 <_fflush_r+0x14>
 8007048:	6983      	ldr	r3, [r0, #24]
 800704a:	b90b      	cbnz	r3, 8007050 <_fflush_r+0x14>
 800704c:	f000 f860 	bl	8007110 <__sinit>
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <_fflush_r+0x48>)
 8007052:	429c      	cmp	r4, r3
 8007054:	d109      	bne.n	800706a <_fflush_r+0x2e>
 8007056:	686c      	ldr	r4, [r5, #4]
 8007058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705c:	b17b      	cbz	r3, 800707e <_fflush_r+0x42>
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007066:	f7ff bf63 	b.w	8006f30 <__sflush_r>
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <_fflush_r+0x4c>)
 800706c:	429c      	cmp	r4, r3
 800706e:	d101      	bne.n	8007074 <_fflush_r+0x38>
 8007070:	68ac      	ldr	r4, [r5, #8]
 8007072:	e7f1      	b.n	8007058 <_fflush_r+0x1c>
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <_fflush_r+0x50>)
 8007076:	429c      	cmp	r4, r3
 8007078:	bf08      	it	eq
 800707a:	68ec      	ldreq	r4, [r5, #12]
 800707c:	e7ec      	b.n	8007058 <_fflush_r+0x1c>
 800707e:	2000      	movs	r0, #0
 8007080:	bd38      	pop	{r3, r4, r5, pc}
 8007082:	bf00      	nop
 8007084:	08008e38 	.word	0x08008e38
 8007088:	08008e58 	.word	0x08008e58
 800708c:	08008e18 	.word	0x08008e18

08007090 <std>:
 8007090:	2300      	movs	r3, #0
 8007092:	b510      	push	{r4, lr}
 8007094:	4604      	mov	r4, r0
 8007096:	e9c0 3300 	strd	r3, r3, [r0]
 800709a:	6083      	str	r3, [r0, #8]
 800709c:	8181      	strh	r1, [r0, #12]
 800709e:	6643      	str	r3, [r0, #100]	; 0x64
 80070a0:	81c2      	strh	r2, [r0, #14]
 80070a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070a6:	6183      	str	r3, [r0, #24]
 80070a8:	4619      	mov	r1, r3
 80070aa:	2208      	movs	r2, #8
 80070ac:	305c      	adds	r0, #92	; 0x5c
 80070ae:	f7fd faa0 	bl	80045f2 <memset>
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <std+0x38>)
 80070b4:	6263      	str	r3, [r4, #36]	; 0x24
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <std+0x3c>)
 80070b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <std+0x40>)
 80070bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <std+0x44>)
 80070c0:	6224      	str	r4, [r4, #32]
 80070c2:	6323      	str	r3, [r4, #48]	; 0x30
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	bf00      	nop
 80070c8:	08008845 	.word	0x08008845
 80070cc:	08008867 	.word	0x08008867
 80070d0:	0800889f 	.word	0x0800889f
 80070d4:	080088c3 	.word	0x080088c3

080070d8 <_cleanup_r>:
 80070d8:	4901      	ldr	r1, [pc, #4]	; (80070e0 <_cleanup_r+0x8>)
 80070da:	f000 b885 	b.w	80071e8 <_fwalk_reent>
 80070de:	bf00      	nop
 80070e0:	0800703d 	.word	0x0800703d

080070e4 <__sfmoreglue>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	1e4a      	subs	r2, r1, #1
 80070e8:	2568      	movs	r5, #104	; 0x68
 80070ea:	4355      	muls	r5, r2
 80070ec:	460e      	mov	r6, r1
 80070ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070f2:	f001 f8ab 	bl	800824c <_malloc_r>
 80070f6:	4604      	mov	r4, r0
 80070f8:	b140      	cbz	r0, 800710c <__sfmoreglue+0x28>
 80070fa:	2100      	movs	r1, #0
 80070fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007100:	300c      	adds	r0, #12
 8007102:	60a0      	str	r0, [r4, #8]
 8007104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007108:	f7fd fa73 	bl	80045f2 <memset>
 800710c:	4620      	mov	r0, r4
 800710e:	bd70      	pop	{r4, r5, r6, pc}

08007110 <__sinit>:
 8007110:	6983      	ldr	r3, [r0, #24]
 8007112:	b510      	push	{r4, lr}
 8007114:	4604      	mov	r4, r0
 8007116:	bb33      	cbnz	r3, 8007166 <__sinit+0x56>
 8007118:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800711c:	6503      	str	r3, [r0, #80]	; 0x50
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <__sinit+0x58>)
 8007120:	4a12      	ldr	r2, [pc, #72]	; (800716c <__sinit+0x5c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6282      	str	r2, [r0, #40]	; 0x28
 8007126:	4298      	cmp	r0, r3
 8007128:	bf04      	itt	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	6183      	streq	r3, [r0, #24]
 800712e:	f000 f81f 	bl	8007170 <__sfp>
 8007132:	6060      	str	r0, [r4, #4]
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f81b 	bl	8007170 <__sfp>
 800713a:	60a0      	str	r0, [r4, #8]
 800713c:	4620      	mov	r0, r4
 800713e:	f000 f817 	bl	8007170 <__sfp>
 8007142:	2200      	movs	r2, #0
 8007144:	60e0      	str	r0, [r4, #12]
 8007146:	2104      	movs	r1, #4
 8007148:	6860      	ldr	r0, [r4, #4]
 800714a:	f7ff ffa1 	bl	8007090 <std>
 800714e:	2201      	movs	r2, #1
 8007150:	2109      	movs	r1, #9
 8007152:	68a0      	ldr	r0, [r4, #8]
 8007154:	f7ff ff9c 	bl	8007090 <std>
 8007158:	2202      	movs	r2, #2
 800715a:	2112      	movs	r1, #18
 800715c:	68e0      	ldr	r0, [r4, #12]
 800715e:	f7ff ff97 	bl	8007090 <std>
 8007162:	2301      	movs	r3, #1
 8007164:	61a3      	str	r3, [r4, #24]
 8007166:	bd10      	pop	{r4, pc}
 8007168:	08008d78 	.word	0x08008d78
 800716c:	080070d9 	.word	0x080070d9

08007170 <__sfp>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <__sfp+0x70>)
 8007174:	681e      	ldr	r6, [r3, #0]
 8007176:	69b3      	ldr	r3, [r6, #24]
 8007178:	4607      	mov	r7, r0
 800717a:	b913      	cbnz	r3, 8007182 <__sfp+0x12>
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff ffc7 	bl	8007110 <__sinit>
 8007182:	3648      	adds	r6, #72	; 0x48
 8007184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007188:	3b01      	subs	r3, #1
 800718a:	d503      	bpl.n	8007194 <__sfp+0x24>
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	b133      	cbz	r3, 800719e <__sfp+0x2e>
 8007190:	6836      	ldr	r6, [r6, #0]
 8007192:	e7f7      	b.n	8007184 <__sfp+0x14>
 8007194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007198:	b16d      	cbz	r5, 80071b6 <__sfp+0x46>
 800719a:	3468      	adds	r4, #104	; 0x68
 800719c:	e7f4      	b.n	8007188 <__sfp+0x18>
 800719e:	2104      	movs	r1, #4
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7ff ff9f 	bl	80070e4 <__sfmoreglue>
 80071a6:	6030      	str	r0, [r6, #0]
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d1f1      	bne.n	8007190 <__sfp+0x20>
 80071ac:	230c      	movs	r3, #12
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	4604      	mov	r4, r0
 80071b2:	4620      	mov	r0, r4
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b6:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <__sfp+0x74>)
 80071b8:	6665      	str	r5, [r4, #100]	; 0x64
 80071ba:	e9c4 5500 	strd	r5, r5, [r4]
 80071be:	60a5      	str	r5, [r4, #8]
 80071c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80071c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80071c8:	2208      	movs	r2, #8
 80071ca:	4629      	mov	r1, r5
 80071cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071d0:	f7fd fa0f 	bl	80045f2 <memset>
 80071d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071dc:	e7e9      	b.n	80071b2 <__sfp+0x42>
 80071de:	bf00      	nop
 80071e0:	08008d78 	.word	0x08008d78
 80071e4:	ffff0001 	.word	0xffff0001

080071e8 <_fwalk_reent>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071f4:	2600      	movs	r6, #0
 80071f6:	b914      	cbnz	r4, 80071fe <_fwalk_reent+0x16>
 80071f8:	4630      	mov	r0, r6
 80071fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007202:	3f01      	subs	r7, #1
 8007204:	d501      	bpl.n	800720a <_fwalk_reent+0x22>
 8007206:	6824      	ldr	r4, [r4, #0]
 8007208:	e7f5      	b.n	80071f6 <_fwalk_reent+0xe>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d907      	bls.n	8007220 <_fwalk_reent+0x38>
 8007210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007214:	3301      	adds	r3, #1
 8007216:	d003      	beq.n	8007220 <_fwalk_reent+0x38>
 8007218:	4629      	mov	r1, r5
 800721a:	4640      	mov	r0, r8
 800721c:	47c8      	blx	r9
 800721e:	4306      	orrs	r6, r0
 8007220:	3568      	adds	r5, #104	; 0x68
 8007222:	e7ee      	b.n	8007202 <_fwalk_reent+0x1a>

08007224 <rshift>:
 8007224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007226:	6906      	ldr	r6, [r0, #16]
 8007228:	114b      	asrs	r3, r1, #5
 800722a:	429e      	cmp	r6, r3
 800722c:	f100 0414 	add.w	r4, r0, #20
 8007230:	dd30      	ble.n	8007294 <rshift+0x70>
 8007232:	f011 011f 	ands.w	r1, r1, #31
 8007236:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800723a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800723e:	d108      	bne.n	8007252 <rshift+0x2e>
 8007240:	4621      	mov	r1, r4
 8007242:	42b2      	cmp	r2, r6
 8007244:	460b      	mov	r3, r1
 8007246:	d211      	bcs.n	800726c <rshift+0x48>
 8007248:	f852 3b04 	ldr.w	r3, [r2], #4
 800724c:	f841 3b04 	str.w	r3, [r1], #4
 8007250:	e7f7      	b.n	8007242 <rshift+0x1e>
 8007252:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007256:	f1c1 0c20 	rsb	ip, r1, #32
 800725a:	40cd      	lsrs	r5, r1
 800725c:	3204      	adds	r2, #4
 800725e:	4623      	mov	r3, r4
 8007260:	42b2      	cmp	r2, r6
 8007262:	4617      	mov	r7, r2
 8007264:	d30c      	bcc.n	8007280 <rshift+0x5c>
 8007266:	601d      	str	r5, [r3, #0]
 8007268:	b105      	cbz	r5, 800726c <rshift+0x48>
 800726a:	3304      	adds	r3, #4
 800726c:	1b1a      	subs	r2, r3, r4
 800726e:	42a3      	cmp	r3, r4
 8007270:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007274:	bf08      	it	eq
 8007276:	2300      	moveq	r3, #0
 8007278:	6102      	str	r2, [r0, #16]
 800727a:	bf08      	it	eq
 800727c:	6143      	streq	r3, [r0, #20]
 800727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007280:	683f      	ldr	r7, [r7, #0]
 8007282:	fa07 f70c 	lsl.w	r7, r7, ip
 8007286:	433d      	orrs	r5, r7
 8007288:	f843 5b04 	str.w	r5, [r3], #4
 800728c:	f852 5b04 	ldr.w	r5, [r2], #4
 8007290:	40cd      	lsrs	r5, r1
 8007292:	e7e5      	b.n	8007260 <rshift+0x3c>
 8007294:	4623      	mov	r3, r4
 8007296:	e7e9      	b.n	800726c <rshift+0x48>

08007298 <__hexdig_fun>:
 8007298:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800729c:	2b09      	cmp	r3, #9
 800729e:	d802      	bhi.n	80072a6 <__hexdig_fun+0xe>
 80072a0:	3820      	subs	r0, #32
 80072a2:	b2c0      	uxtb	r0, r0
 80072a4:	4770      	bx	lr
 80072a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d801      	bhi.n	80072b2 <__hexdig_fun+0x1a>
 80072ae:	3847      	subs	r0, #71	; 0x47
 80072b0:	e7f7      	b.n	80072a2 <__hexdig_fun+0xa>
 80072b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d801      	bhi.n	80072be <__hexdig_fun+0x26>
 80072ba:	3827      	subs	r0, #39	; 0x27
 80072bc:	e7f1      	b.n	80072a2 <__hexdig_fun+0xa>
 80072be:	2000      	movs	r0, #0
 80072c0:	4770      	bx	lr

080072c2 <__gethex>:
 80072c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c6:	b08b      	sub	sp, #44	; 0x2c
 80072c8:	468a      	mov	sl, r1
 80072ca:	9002      	str	r0, [sp, #8]
 80072cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80072ce:	9306      	str	r3, [sp, #24]
 80072d0:	4690      	mov	r8, r2
 80072d2:	f000 fad0 	bl	8007876 <__localeconv_l>
 80072d6:	6803      	ldr	r3, [r0, #0]
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7f8 ff50 	bl	8000180 <strlen>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	9001      	str	r0, [sp, #4]
 80072e4:	4403      	add	r3, r0
 80072e6:	f04f 0b00 	mov.w	fp, #0
 80072ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	f8da 3000 	ldr.w	r3, [sl]
 80072f4:	3302      	adds	r3, #2
 80072f6:	461f      	mov	r7, r3
 80072f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80072fc:	2830      	cmp	r0, #48	; 0x30
 80072fe:	d06c      	beq.n	80073da <__gethex+0x118>
 8007300:	f7ff ffca 	bl	8007298 <__hexdig_fun>
 8007304:	4604      	mov	r4, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	d16a      	bne.n	80073e0 <__gethex+0x11e>
 800730a:	9a01      	ldr	r2, [sp, #4]
 800730c:	9903      	ldr	r1, [sp, #12]
 800730e:	4638      	mov	r0, r7
 8007310:	f001 fadb 	bl	80088ca <strncmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	d166      	bne.n	80073e6 <__gethex+0x124>
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	5cf8      	ldrb	r0, [r7, r3]
 800731c:	18fe      	adds	r6, r7, r3
 800731e:	f7ff ffbb 	bl	8007298 <__hexdig_fun>
 8007322:	2800      	cmp	r0, #0
 8007324:	d062      	beq.n	80073ec <__gethex+0x12a>
 8007326:	4633      	mov	r3, r6
 8007328:	7818      	ldrb	r0, [r3, #0]
 800732a:	2830      	cmp	r0, #48	; 0x30
 800732c:	461f      	mov	r7, r3
 800732e:	f103 0301 	add.w	r3, r3, #1
 8007332:	d0f9      	beq.n	8007328 <__gethex+0x66>
 8007334:	f7ff ffb0 	bl	8007298 <__hexdig_fun>
 8007338:	fab0 f580 	clz	r5, r0
 800733c:	096d      	lsrs	r5, r5, #5
 800733e:	4634      	mov	r4, r6
 8007340:	f04f 0b01 	mov.w	fp, #1
 8007344:	463a      	mov	r2, r7
 8007346:	4616      	mov	r6, r2
 8007348:	3201      	adds	r2, #1
 800734a:	7830      	ldrb	r0, [r6, #0]
 800734c:	f7ff ffa4 	bl	8007298 <__hexdig_fun>
 8007350:	2800      	cmp	r0, #0
 8007352:	d1f8      	bne.n	8007346 <__gethex+0x84>
 8007354:	9a01      	ldr	r2, [sp, #4]
 8007356:	9903      	ldr	r1, [sp, #12]
 8007358:	4630      	mov	r0, r6
 800735a:	f001 fab6 	bl	80088ca <strncmp>
 800735e:	b950      	cbnz	r0, 8007376 <__gethex+0xb4>
 8007360:	b954      	cbnz	r4, 8007378 <__gethex+0xb6>
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	18f4      	adds	r4, r6, r3
 8007366:	4622      	mov	r2, r4
 8007368:	4616      	mov	r6, r2
 800736a:	3201      	adds	r2, #1
 800736c:	7830      	ldrb	r0, [r6, #0]
 800736e:	f7ff ff93 	bl	8007298 <__hexdig_fun>
 8007372:	2800      	cmp	r0, #0
 8007374:	d1f8      	bne.n	8007368 <__gethex+0xa6>
 8007376:	b10c      	cbz	r4, 800737c <__gethex+0xba>
 8007378:	1ba4      	subs	r4, r4, r6
 800737a:	00a4      	lsls	r4, r4, #2
 800737c:	7833      	ldrb	r3, [r6, #0]
 800737e:	2b50      	cmp	r3, #80	; 0x50
 8007380:	d001      	beq.n	8007386 <__gethex+0xc4>
 8007382:	2b70      	cmp	r3, #112	; 0x70
 8007384:	d140      	bne.n	8007408 <__gethex+0x146>
 8007386:	7873      	ldrb	r3, [r6, #1]
 8007388:	2b2b      	cmp	r3, #43	; 0x2b
 800738a:	d031      	beq.n	80073f0 <__gethex+0x12e>
 800738c:	2b2d      	cmp	r3, #45	; 0x2d
 800738e:	d033      	beq.n	80073f8 <__gethex+0x136>
 8007390:	1c71      	adds	r1, r6, #1
 8007392:	f04f 0900 	mov.w	r9, #0
 8007396:	7808      	ldrb	r0, [r1, #0]
 8007398:	f7ff ff7e 	bl	8007298 <__hexdig_fun>
 800739c:	1e43      	subs	r3, r0, #1
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b18      	cmp	r3, #24
 80073a2:	d831      	bhi.n	8007408 <__gethex+0x146>
 80073a4:	f1a0 0210 	sub.w	r2, r0, #16
 80073a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073ac:	f7ff ff74 	bl	8007298 <__hexdig_fun>
 80073b0:	1e43      	subs	r3, r0, #1
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b18      	cmp	r3, #24
 80073b6:	d922      	bls.n	80073fe <__gethex+0x13c>
 80073b8:	f1b9 0f00 	cmp.w	r9, #0
 80073bc:	d000      	beq.n	80073c0 <__gethex+0xfe>
 80073be:	4252      	negs	r2, r2
 80073c0:	4414      	add	r4, r2
 80073c2:	f8ca 1000 	str.w	r1, [sl]
 80073c6:	b30d      	cbz	r5, 800740c <__gethex+0x14a>
 80073c8:	f1bb 0f00 	cmp.w	fp, #0
 80073cc:	bf0c      	ite	eq
 80073ce:	2706      	moveq	r7, #6
 80073d0:	2700      	movne	r7, #0
 80073d2:	4638      	mov	r0, r7
 80073d4:	b00b      	add	sp, #44	; 0x2c
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	f10b 0b01 	add.w	fp, fp, #1
 80073de:	e78a      	b.n	80072f6 <__gethex+0x34>
 80073e0:	2500      	movs	r5, #0
 80073e2:	462c      	mov	r4, r5
 80073e4:	e7ae      	b.n	8007344 <__gethex+0x82>
 80073e6:	463e      	mov	r6, r7
 80073e8:	2501      	movs	r5, #1
 80073ea:	e7c7      	b.n	800737c <__gethex+0xba>
 80073ec:	4604      	mov	r4, r0
 80073ee:	e7fb      	b.n	80073e8 <__gethex+0x126>
 80073f0:	f04f 0900 	mov.w	r9, #0
 80073f4:	1cb1      	adds	r1, r6, #2
 80073f6:	e7ce      	b.n	8007396 <__gethex+0xd4>
 80073f8:	f04f 0901 	mov.w	r9, #1
 80073fc:	e7fa      	b.n	80073f4 <__gethex+0x132>
 80073fe:	230a      	movs	r3, #10
 8007400:	fb03 0202 	mla	r2, r3, r2, r0
 8007404:	3a10      	subs	r2, #16
 8007406:	e7cf      	b.n	80073a8 <__gethex+0xe6>
 8007408:	4631      	mov	r1, r6
 800740a:	e7da      	b.n	80073c2 <__gethex+0x100>
 800740c:	1bf3      	subs	r3, r6, r7
 800740e:	3b01      	subs	r3, #1
 8007410:	4629      	mov	r1, r5
 8007412:	2b07      	cmp	r3, #7
 8007414:	dc49      	bgt.n	80074aa <__gethex+0x1e8>
 8007416:	9802      	ldr	r0, [sp, #8]
 8007418:	f000 fabc 	bl	8007994 <_Balloc>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	f100 0914 	add.w	r9, r0, #20
 8007422:	f04f 0b00 	mov.w	fp, #0
 8007426:	f1c3 0301 	rsb	r3, r3, #1
 800742a:	4605      	mov	r5, r0
 800742c:	f8cd 9010 	str.w	r9, [sp, #16]
 8007430:	46da      	mov	sl, fp
 8007432:	9308      	str	r3, [sp, #32]
 8007434:	42b7      	cmp	r7, r6
 8007436:	d33b      	bcc.n	80074b0 <__gethex+0x1ee>
 8007438:	9804      	ldr	r0, [sp, #16]
 800743a:	f840 ab04 	str.w	sl, [r0], #4
 800743e:	eba0 0009 	sub.w	r0, r0, r9
 8007442:	1080      	asrs	r0, r0, #2
 8007444:	6128      	str	r0, [r5, #16]
 8007446:	0147      	lsls	r7, r0, #5
 8007448:	4650      	mov	r0, sl
 800744a:	f000 fb67 	bl	8007b1c <__hi0bits>
 800744e:	f8d8 6000 	ldr.w	r6, [r8]
 8007452:	1a3f      	subs	r7, r7, r0
 8007454:	42b7      	cmp	r7, r6
 8007456:	dd64      	ble.n	8007522 <__gethex+0x260>
 8007458:	1bbf      	subs	r7, r7, r6
 800745a:	4639      	mov	r1, r7
 800745c:	4628      	mov	r0, r5
 800745e:	f000 fe77 	bl	8008150 <__any_on>
 8007462:	4682      	mov	sl, r0
 8007464:	b178      	cbz	r0, 8007486 <__gethex+0x1c4>
 8007466:	1e7b      	subs	r3, r7, #1
 8007468:	1159      	asrs	r1, r3, #5
 800746a:	f003 021f 	and.w	r2, r3, #31
 800746e:	f04f 0a01 	mov.w	sl, #1
 8007472:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007476:	fa0a f202 	lsl.w	r2, sl, r2
 800747a:	420a      	tst	r2, r1
 800747c:	d003      	beq.n	8007486 <__gethex+0x1c4>
 800747e:	4553      	cmp	r3, sl
 8007480:	dc46      	bgt.n	8007510 <__gethex+0x24e>
 8007482:	f04f 0a02 	mov.w	sl, #2
 8007486:	4639      	mov	r1, r7
 8007488:	4628      	mov	r0, r5
 800748a:	f7ff fecb 	bl	8007224 <rshift>
 800748e:	443c      	add	r4, r7
 8007490:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007494:	42a3      	cmp	r3, r4
 8007496:	da52      	bge.n	800753e <__gethex+0x27c>
 8007498:	4629      	mov	r1, r5
 800749a:	9802      	ldr	r0, [sp, #8]
 800749c:	f000 faae 	bl	80079fc <_Bfree>
 80074a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074a2:	2300      	movs	r3, #0
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	27a3      	movs	r7, #163	; 0xa3
 80074a8:	e793      	b.n	80073d2 <__gethex+0x110>
 80074aa:	3101      	adds	r1, #1
 80074ac:	105b      	asrs	r3, r3, #1
 80074ae:	e7b0      	b.n	8007412 <__gethex+0x150>
 80074b0:	1e73      	subs	r3, r6, #1
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	9a07      	ldr	r2, [sp, #28]
 80074b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d018      	beq.n	80074f0 <__gethex+0x22e>
 80074be:	f1bb 0f20 	cmp.w	fp, #32
 80074c2:	d107      	bne.n	80074d4 <__gethex+0x212>
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	f8c3 a000 	str.w	sl, [r3]
 80074ca:	3304      	adds	r3, #4
 80074cc:	f04f 0a00 	mov.w	sl, #0
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	46d3      	mov	fp, sl
 80074d4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80074d8:	f7ff fede 	bl	8007298 <__hexdig_fun>
 80074dc:	f000 000f 	and.w	r0, r0, #15
 80074e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80074e4:	ea4a 0a00 	orr.w	sl, sl, r0
 80074e8:	f10b 0b04 	add.w	fp, fp, #4
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	e00d      	b.n	800750c <__gethex+0x24a>
 80074f0:	9b05      	ldr	r3, [sp, #20]
 80074f2:	9a08      	ldr	r2, [sp, #32]
 80074f4:	4413      	add	r3, r2
 80074f6:	42bb      	cmp	r3, r7
 80074f8:	d3e1      	bcc.n	80074be <__gethex+0x1fc>
 80074fa:	4618      	mov	r0, r3
 80074fc:	9a01      	ldr	r2, [sp, #4]
 80074fe:	9903      	ldr	r1, [sp, #12]
 8007500:	9309      	str	r3, [sp, #36]	; 0x24
 8007502:	f001 f9e2 	bl	80088ca <strncmp>
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	2800      	cmp	r0, #0
 800750a:	d1d8      	bne.n	80074be <__gethex+0x1fc>
 800750c:	461e      	mov	r6, r3
 800750e:	e791      	b.n	8007434 <__gethex+0x172>
 8007510:	1eb9      	subs	r1, r7, #2
 8007512:	4628      	mov	r0, r5
 8007514:	f000 fe1c 	bl	8008150 <__any_on>
 8007518:	2800      	cmp	r0, #0
 800751a:	d0b2      	beq.n	8007482 <__gethex+0x1c0>
 800751c:	f04f 0a03 	mov.w	sl, #3
 8007520:	e7b1      	b.n	8007486 <__gethex+0x1c4>
 8007522:	da09      	bge.n	8007538 <__gethex+0x276>
 8007524:	1bf7      	subs	r7, r6, r7
 8007526:	4629      	mov	r1, r5
 8007528:	463a      	mov	r2, r7
 800752a:	9802      	ldr	r0, [sp, #8]
 800752c:	f000 fc32 	bl	8007d94 <__lshift>
 8007530:	1be4      	subs	r4, r4, r7
 8007532:	4605      	mov	r5, r0
 8007534:	f100 0914 	add.w	r9, r0, #20
 8007538:	f04f 0a00 	mov.w	sl, #0
 800753c:	e7a8      	b.n	8007490 <__gethex+0x1ce>
 800753e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007542:	42a0      	cmp	r0, r4
 8007544:	dd6a      	ble.n	800761c <__gethex+0x35a>
 8007546:	1b04      	subs	r4, r0, r4
 8007548:	42a6      	cmp	r6, r4
 800754a:	dc2e      	bgt.n	80075aa <__gethex+0x2e8>
 800754c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d022      	beq.n	800759a <__gethex+0x2d8>
 8007554:	2b03      	cmp	r3, #3
 8007556:	d024      	beq.n	80075a2 <__gethex+0x2e0>
 8007558:	2b01      	cmp	r3, #1
 800755a:	d115      	bne.n	8007588 <__gethex+0x2c6>
 800755c:	42a6      	cmp	r6, r4
 800755e:	d113      	bne.n	8007588 <__gethex+0x2c6>
 8007560:	2e01      	cmp	r6, #1
 8007562:	dc0b      	bgt.n	800757c <__gethex+0x2ba>
 8007564:	9a06      	ldr	r2, [sp, #24]
 8007566:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	2301      	movs	r3, #1
 800756e:	612b      	str	r3, [r5, #16]
 8007570:	f8c9 3000 	str.w	r3, [r9]
 8007574:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007576:	2762      	movs	r7, #98	; 0x62
 8007578:	601d      	str	r5, [r3, #0]
 800757a:	e72a      	b.n	80073d2 <__gethex+0x110>
 800757c:	1e71      	subs	r1, r6, #1
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fde6 	bl	8008150 <__any_on>
 8007584:	2800      	cmp	r0, #0
 8007586:	d1ed      	bne.n	8007564 <__gethex+0x2a2>
 8007588:	4629      	mov	r1, r5
 800758a:	9802      	ldr	r0, [sp, #8]
 800758c:	f000 fa36 	bl	80079fc <_Bfree>
 8007590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007592:	2300      	movs	r3, #0
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	2750      	movs	r7, #80	; 0x50
 8007598:	e71b      	b.n	80073d2 <__gethex+0x110>
 800759a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0e1      	beq.n	8007564 <__gethex+0x2a2>
 80075a0:	e7f2      	b.n	8007588 <__gethex+0x2c6>
 80075a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1dd      	bne.n	8007564 <__gethex+0x2a2>
 80075a8:	e7ee      	b.n	8007588 <__gethex+0x2c6>
 80075aa:	1e67      	subs	r7, r4, #1
 80075ac:	f1ba 0f00 	cmp.w	sl, #0
 80075b0:	d131      	bne.n	8007616 <__gethex+0x354>
 80075b2:	b127      	cbz	r7, 80075be <__gethex+0x2fc>
 80075b4:	4639      	mov	r1, r7
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fdca 	bl	8008150 <__any_on>
 80075bc:	4682      	mov	sl, r0
 80075be:	117a      	asrs	r2, r7, #5
 80075c0:	2301      	movs	r3, #1
 80075c2:	f007 071f 	and.w	r7, r7, #31
 80075c6:	fa03 f707 	lsl.w	r7, r3, r7
 80075ca:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80075ce:	4621      	mov	r1, r4
 80075d0:	421f      	tst	r7, r3
 80075d2:	4628      	mov	r0, r5
 80075d4:	bf18      	it	ne
 80075d6:	f04a 0a02 	orrne.w	sl, sl, #2
 80075da:	1b36      	subs	r6, r6, r4
 80075dc:	f7ff fe22 	bl	8007224 <rshift>
 80075e0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80075e4:	2702      	movs	r7, #2
 80075e6:	f1ba 0f00 	cmp.w	sl, #0
 80075ea:	d048      	beq.n	800767e <__gethex+0x3bc>
 80075ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d015      	beq.n	8007620 <__gethex+0x35e>
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d017      	beq.n	8007628 <__gethex+0x366>
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d109      	bne.n	8007610 <__gethex+0x34e>
 80075fc:	f01a 0f02 	tst.w	sl, #2
 8007600:	d006      	beq.n	8007610 <__gethex+0x34e>
 8007602:	f8d9 3000 	ldr.w	r3, [r9]
 8007606:	ea4a 0a03 	orr.w	sl, sl, r3
 800760a:	f01a 0f01 	tst.w	sl, #1
 800760e:	d10e      	bne.n	800762e <__gethex+0x36c>
 8007610:	f047 0710 	orr.w	r7, r7, #16
 8007614:	e033      	b.n	800767e <__gethex+0x3bc>
 8007616:	f04f 0a01 	mov.w	sl, #1
 800761a:	e7d0      	b.n	80075be <__gethex+0x2fc>
 800761c:	2701      	movs	r7, #1
 800761e:	e7e2      	b.n	80075e6 <__gethex+0x324>
 8007620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007622:	f1c3 0301 	rsb	r3, r3, #1
 8007626:	9315      	str	r3, [sp, #84]	; 0x54
 8007628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <__gethex+0x34e>
 800762e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007632:	f105 0314 	add.w	r3, r5, #20
 8007636:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800763a:	eb03 010a 	add.w	r1, r3, sl
 800763e:	f04f 0c00 	mov.w	ip, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f853 2b04 	ldr.w	r2, [r3], #4
 8007648:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800764c:	d01c      	beq.n	8007688 <__gethex+0x3c6>
 800764e:	3201      	adds	r2, #1
 8007650:	6002      	str	r2, [r0, #0]
 8007652:	2f02      	cmp	r7, #2
 8007654:	f105 0314 	add.w	r3, r5, #20
 8007658:	d138      	bne.n	80076cc <__gethex+0x40a>
 800765a:	f8d8 2000 	ldr.w	r2, [r8]
 800765e:	3a01      	subs	r2, #1
 8007660:	42b2      	cmp	r2, r6
 8007662:	d10a      	bne.n	800767a <__gethex+0x3b8>
 8007664:	1171      	asrs	r1, r6, #5
 8007666:	2201      	movs	r2, #1
 8007668:	f006 061f 	and.w	r6, r6, #31
 800766c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007670:	fa02 f606 	lsl.w	r6, r2, r6
 8007674:	421e      	tst	r6, r3
 8007676:	bf18      	it	ne
 8007678:	4617      	movne	r7, r2
 800767a:	f047 0720 	orr.w	r7, r7, #32
 800767e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007680:	601d      	str	r5, [r3, #0]
 8007682:	9b06      	ldr	r3, [sp, #24]
 8007684:	601c      	str	r4, [r3, #0]
 8007686:	e6a4      	b.n	80073d2 <__gethex+0x110>
 8007688:	4299      	cmp	r1, r3
 800768a:	f843 cc04 	str.w	ip, [r3, #-4]
 800768e:	d8d8      	bhi.n	8007642 <__gethex+0x380>
 8007690:	68ab      	ldr	r3, [r5, #8]
 8007692:	4599      	cmp	r9, r3
 8007694:	db12      	blt.n	80076bc <__gethex+0x3fa>
 8007696:	6869      	ldr	r1, [r5, #4]
 8007698:	9802      	ldr	r0, [sp, #8]
 800769a:	3101      	adds	r1, #1
 800769c:	f000 f97a 	bl	8007994 <_Balloc>
 80076a0:	692a      	ldr	r2, [r5, #16]
 80076a2:	3202      	adds	r2, #2
 80076a4:	f105 010c 	add.w	r1, r5, #12
 80076a8:	4683      	mov	fp, r0
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	300c      	adds	r0, #12
 80076ae:	f7fc ff95 	bl	80045dc <memcpy>
 80076b2:	4629      	mov	r1, r5
 80076b4:	9802      	ldr	r0, [sp, #8]
 80076b6:	f000 f9a1 	bl	80079fc <_Bfree>
 80076ba:	465d      	mov	r5, fp
 80076bc:	692b      	ldr	r3, [r5, #16]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80076c4:	612a      	str	r2, [r5, #16]
 80076c6:	2201      	movs	r2, #1
 80076c8:	615a      	str	r2, [r3, #20]
 80076ca:	e7c2      	b.n	8007652 <__gethex+0x390>
 80076cc:	692a      	ldr	r2, [r5, #16]
 80076ce:	454a      	cmp	r2, r9
 80076d0:	dd0b      	ble.n	80076ea <__gethex+0x428>
 80076d2:	2101      	movs	r1, #1
 80076d4:	4628      	mov	r0, r5
 80076d6:	f7ff fda5 	bl	8007224 <rshift>
 80076da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076de:	3401      	adds	r4, #1
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	f6ff aed9 	blt.w	8007498 <__gethex+0x1d6>
 80076e6:	2701      	movs	r7, #1
 80076e8:	e7c7      	b.n	800767a <__gethex+0x3b8>
 80076ea:	f016 061f 	ands.w	r6, r6, #31
 80076ee:	d0fa      	beq.n	80076e6 <__gethex+0x424>
 80076f0:	449a      	add	sl, r3
 80076f2:	f1c6 0620 	rsb	r6, r6, #32
 80076f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80076fa:	f000 fa0f 	bl	8007b1c <__hi0bits>
 80076fe:	42b0      	cmp	r0, r6
 8007700:	dbe7      	blt.n	80076d2 <__gethex+0x410>
 8007702:	e7f0      	b.n	80076e6 <__gethex+0x424>

08007704 <L_shift>:
 8007704:	f1c2 0208 	rsb	r2, r2, #8
 8007708:	0092      	lsls	r2, r2, #2
 800770a:	b570      	push	{r4, r5, r6, lr}
 800770c:	f1c2 0620 	rsb	r6, r2, #32
 8007710:	6843      	ldr	r3, [r0, #4]
 8007712:	6804      	ldr	r4, [r0, #0]
 8007714:	fa03 f506 	lsl.w	r5, r3, r6
 8007718:	432c      	orrs	r4, r5
 800771a:	40d3      	lsrs	r3, r2
 800771c:	6004      	str	r4, [r0, #0]
 800771e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007722:	4288      	cmp	r0, r1
 8007724:	d3f4      	bcc.n	8007710 <L_shift+0xc>
 8007726:	bd70      	pop	{r4, r5, r6, pc}

08007728 <__match>:
 8007728:	b530      	push	{r4, r5, lr}
 800772a:	6803      	ldr	r3, [r0, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	b914      	cbnz	r4, 800773a <__match+0x12>
 8007734:	6003      	str	r3, [r0, #0]
 8007736:	2001      	movs	r0, #1
 8007738:	bd30      	pop	{r4, r5, pc}
 800773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007742:	2d19      	cmp	r5, #25
 8007744:	bf98      	it	ls
 8007746:	3220      	addls	r2, #32
 8007748:	42a2      	cmp	r2, r4
 800774a:	d0f0      	beq.n	800772e <__match+0x6>
 800774c:	2000      	movs	r0, #0
 800774e:	e7f3      	b.n	8007738 <__match+0x10>

08007750 <__hexnan>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	680b      	ldr	r3, [r1, #0]
 8007756:	6801      	ldr	r1, [r0, #0]
 8007758:	115f      	asrs	r7, r3, #5
 800775a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800775e:	f013 031f 	ands.w	r3, r3, #31
 8007762:	b087      	sub	sp, #28
 8007764:	bf18      	it	ne
 8007766:	3704      	addne	r7, #4
 8007768:	2500      	movs	r5, #0
 800776a:	1f3e      	subs	r6, r7, #4
 800776c:	4682      	mov	sl, r0
 800776e:	4690      	mov	r8, r2
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	f847 5c04 	str.w	r5, [r7, #-4]
 8007776:	46b1      	mov	r9, r6
 8007778:	4634      	mov	r4, r6
 800777a:	9502      	str	r5, [sp, #8]
 800777c:	46ab      	mov	fp, r5
 800777e:	784a      	ldrb	r2, [r1, #1]
 8007780:	1c4b      	adds	r3, r1, #1
 8007782:	9303      	str	r3, [sp, #12]
 8007784:	b342      	cbz	r2, 80077d8 <__hexnan+0x88>
 8007786:	4610      	mov	r0, r2
 8007788:	9105      	str	r1, [sp, #20]
 800778a:	9204      	str	r2, [sp, #16]
 800778c:	f7ff fd84 	bl	8007298 <__hexdig_fun>
 8007790:	2800      	cmp	r0, #0
 8007792:	d143      	bne.n	800781c <__hexnan+0xcc>
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	9905      	ldr	r1, [sp, #20]
 8007798:	2a20      	cmp	r2, #32
 800779a:	d818      	bhi.n	80077ce <__hexnan+0x7e>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	459b      	cmp	fp, r3
 80077a0:	dd13      	ble.n	80077ca <__hexnan+0x7a>
 80077a2:	454c      	cmp	r4, r9
 80077a4:	d206      	bcs.n	80077b4 <__hexnan+0x64>
 80077a6:	2d07      	cmp	r5, #7
 80077a8:	dc04      	bgt.n	80077b4 <__hexnan+0x64>
 80077aa:	462a      	mov	r2, r5
 80077ac:	4649      	mov	r1, r9
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7ff ffa8 	bl	8007704 <L_shift>
 80077b4:	4544      	cmp	r4, r8
 80077b6:	d944      	bls.n	8007842 <__hexnan+0xf2>
 80077b8:	2300      	movs	r3, #0
 80077ba:	f1a4 0904 	sub.w	r9, r4, #4
 80077be:	f844 3c04 	str.w	r3, [r4, #-4]
 80077c2:	f8cd b008 	str.w	fp, [sp, #8]
 80077c6:	464c      	mov	r4, r9
 80077c8:	461d      	mov	r5, r3
 80077ca:	9903      	ldr	r1, [sp, #12]
 80077cc:	e7d7      	b.n	800777e <__hexnan+0x2e>
 80077ce:	2a29      	cmp	r2, #41	; 0x29
 80077d0:	d14a      	bne.n	8007868 <__hexnan+0x118>
 80077d2:	3102      	adds	r1, #2
 80077d4:	f8ca 1000 	str.w	r1, [sl]
 80077d8:	f1bb 0f00 	cmp.w	fp, #0
 80077dc:	d044      	beq.n	8007868 <__hexnan+0x118>
 80077de:	454c      	cmp	r4, r9
 80077e0:	d206      	bcs.n	80077f0 <__hexnan+0xa0>
 80077e2:	2d07      	cmp	r5, #7
 80077e4:	dc04      	bgt.n	80077f0 <__hexnan+0xa0>
 80077e6:	462a      	mov	r2, r5
 80077e8:	4649      	mov	r1, r9
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff ff8a 	bl	8007704 <L_shift>
 80077f0:	4544      	cmp	r4, r8
 80077f2:	d928      	bls.n	8007846 <__hexnan+0xf6>
 80077f4:	4643      	mov	r3, r8
 80077f6:	f854 2b04 	ldr.w	r2, [r4], #4
 80077fa:	f843 2b04 	str.w	r2, [r3], #4
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d2f9      	bcs.n	80077f6 <__hexnan+0xa6>
 8007802:	2200      	movs	r2, #0
 8007804:	f843 2b04 	str.w	r2, [r3], #4
 8007808:	429e      	cmp	r6, r3
 800780a:	d2fb      	bcs.n	8007804 <__hexnan+0xb4>
 800780c:	6833      	ldr	r3, [r6, #0]
 800780e:	b91b      	cbnz	r3, 8007818 <__hexnan+0xc8>
 8007810:	4546      	cmp	r6, r8
 8007812:	d127      	bne.n	8007864 <__hexnan+0x114>
 8007814:	2301      	movs	r3, #1
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	2005      	movs	r0, #5
 800781a:	e026      	b.n	800786a <__hexnan+0x11a>
 800781c:	3501      	adds	r5, #1
 800781e:	2d08      	cmp	r5, #8
 8007820:	f10b 0b01 	add.w	fp, fp, #1
 8007824:	dd06      	ble.n	8007834 <__hexnan+0xe4>
 8007826:	4544      	cmp	r4, r8
 8007828:	d9cf      	bls.n	80077ca <__hexnan+0x7a>
 800782a:	2300      	movs	r3, #0
 800782c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007830:	2501      	movs	r5, #1
 8007832:	3c04      	subs	r4, #4
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	f000 000f 	and.w	r0, r0, #15
 800783a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800783e:	6020      	str	r0, [r4, #0]
 8007840:	e7c3      	b.n	80077ca <__hexnan+0x7a>
 8007842:	2508      	movs	r5, #8
 8007844:	e7c1      	b.n	80077ca <__hexnan+0x7a>
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0df      	beq.n	800780c <__hexnan+0xbc>
 800784c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007850:	f1c3 0320 	rsb	r3, r3, #32
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800785c:	401a      	ands	r2, r3
 800785e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007862:	e7d3      	b.n	800780c <__hexnan+0xbc>
 8007864:	3e04      	subs	r6, #4
 8007866:	e7d1      	b.n	800780c <__hexnan+0xbc>
 8007868:	2004      	movs	r0, #4
 800786a:	b007      	add	sp, #28
 800786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007870 <__locale_ctype_ptr_l>:
 8007870:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007874:	4770      	bx	lr

08007876 <__localeconv_l>:
 8007876:	30f0      	adds	r0, #240	; 0xf0
 8007878:	4770      	bx	lr
	...

0800787c <_localeconv_r>:
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <_localeconv_r+0x14>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a18      	ldr	r0, [r3, #32]
 8007882:	4b04      	ldr	r3, [pc, #16]	; (8007894 <_localeconv_r+0x18>)
 8007884:	2800      	cmp	r0, #0
 8007886:	bf08      	it	eq
 8007888:	4618      	moveq	r0, r3
 800788a:	30f0      	adds	r0, #240	; 0xf0
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	2000001c 	.word	0x2000001c
 8007894:	20000080 	.word	0x20000080

08007898 <__swhatbuf_r>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	460e      	mov	r6, r1
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	b096      	sub	sp, #88	; 0x58
 80078a4:	4614      	mov	r4, r2
 80078a6:	461d      	mov	r5, r3
 80078a8:	da07      	bge.n	80078ba <__swhatbuf_r+0x22>
 80078aa:	2300      	movs	r3, #0
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	89b3      	ldrh	r3, [r6, #12]
 80078b0:	061a      	lsls	r2, r3, #24
 80078b2:	d410      	bmi.n	80078d6 <__swhatbuf_r+0x3e>
 80078b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b8:	e00e      	b.n	80078d8 <__swhatbuf_r+0x40>
 80078ba:	466a      	mov	r2, sp
 80078bc:	f001 f846 	bl	800894c <_fstat_r>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	dbf2      	blt.n	80078aa <__swhatbuf_r+0x12>
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078ce:	425a      	negs	r2, r3
 80078d0:	415a      	adcs	r2, r3
 80078d2:	602a      	str	r2, [r5, #0]
 80078d4:	e7ee      	b.n	80078b4 <__swhatbuf_r+0x1c>
 80078d6:	2340      	movs	r3, #64	; 0x40
 80078d8:	2000      	movs	r0, #0
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	b016      	add	sp, #88	; 0x58
 80078de:	bd70      	pop	{r4, r5, r6, pc}

080078e0 <__smakebuf_r>:
 80078e0:	898b      	ldrh	r3, [r1, #12]
 80078e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078e4:	079d      	lsls	r5, r3, #30
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	d507      	bpl.n	80078fc <__smakebuf_r+0x1c>
 80078ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2301      	movs	r3, #1
 80078f6:	6163      	str	r3, [r4, #20]
 80078f8:	b002      	add	sp, #8
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	ab01      	add	r3, sp, #4
 80078fe:	466a      	mov	r2, sp
 8007900:	f7ff ffca 	bl	8007898 <__swhatbuf_r>
 8007904:	9900      	ldr	r1, [sp, #0]
 8007906:	4605      	mov	r5, r0
 8007908:	4630      	mov	r0, r6
 800790a:	f000 fc9f 	bl	800824c <_malloc_r>
 800790e:	b948      	cbnz	r0, 8007924 <__smakebuf_r+0x44>
 8007910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007914:	059a      	lsls	r2, r3, #22
 8007916:	d4ef      	bmi.n	80078f8 <__smakebuf_r+0x18>
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	f043 0302 	orr.w	r3, r3, #2
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	e7e3      	b.n	80078ec <__smakebuf_r+0xc>
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <__smakebuf_r+0x7c>)
 8007926:	62b3      	str	r3, [r6, #40]	; 0x28
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	6020      	str	r0, [r4, #0]
 800792c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	9b00      	ldr	r3, [sp, #0]
 8007934:	6163      	str	r3, [r4, #20]
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	6120      	str	r0, [r4, #16]
 800793a:	b15b      	cbz	r3, 8007954 <__smakebuf_r+0x74>
 800793c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007940:	4630      	mov	r0, r6
 8007942:	f001 f815 	bl	8008970 <_isatty_r>
 8007946:	b128      	cbz	r0, 8007954 <__smakebuf_r+0x74>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	431d      	orrs	r5, r3
 8007958:	81a5      	strh	r5, [r4, #12]
 800795a:	e7cd      	b.n	80078f8 <__smakebuf_r+0x18>
 800795c:	080070d9 	.word	0x080070d9

08007960 <malloc>:
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <malloc+0xc>)
 8007962:	4601      	mov	r1, r0
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f000 bc71 	b.w	800824c <_malloc_r>
 800796a:	bf00      	nop
 800796c:	2000001c 	.word	0x2000001c

08007970 <__ascii_mbtowc>:
 8007970:	b082      	sub	sp, #8
 8007972:	b901      	cbnz	r1, 8007976 <__ascii_mbtowc+0x6>
 8007974:	a901      	add	r1, sp, #4
 8007976:	b142      	cbz	r2, 800798a <__ascii_mbtowc+0x1a>
 8007978:	b14b      	cbz	r3, 800798e <__ascii_mbtowc+0x1e>
 800797a:	7813      	ldrb	r3, [r2, #0]
 800797c:	600b      	str	r3, [r1, #0]
 800797e:	7812      	ldrb	r2, [r2, #0]
 8007980:	1c10      	adds	r0, r2, #0
 8007982:	bf18      	it	ne
 8007984:	2001      	movne	r0, #1
 8007986:	b002      	add	sp, #8
 8007988:	4770      	bx	lr
 800798a:	4610      	mov	r0, r2
 800798c:	e7fb      	b.n	8007986 <__ascii_mbtowc+0x16>
 800798e:	f06f 0001 	mvn.w	r0, #1
 8007992:	e7f8      	b.n	8007986 <__ascii_mbtowc+0x16>

08007994 <_Balloc>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007998:	4604      	mov	r4, r0
 800799a:	460e      	mov	r6, r1
 800799c:	b93d      	cbnz	r5, 80079ae <_Balloc+0x1a>
 800799e:	2010      	movs	r0, #16
 80079a0:	f7ff ffde 	bl	8007960 <malloc>
 80079a4:	6260      	str	r0, [r4, #36]	; 0x24
 80079a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079aa:	6005      	str	r5, [r0, #0]
 80079ac:	60c5      	str	r5, [r0, #12]
 80079ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80079b0:	68eb      	ldr	r3, [r5, #12]
 80079b2:	b183      	cbz	r3, 80079d6 <_Balloc+0x42>
 80079b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079bc:	b9b8      	cbnz	r0, 80079ee <_Balloc+0x5a>
 80079be:	2101      	movs	r1, #1
 80079c0:	fa01 f506 	lsl.w	r5, r1, r6
 80079c4:	1d6a      	adds	r2, r5, #5
 80079c6:	0092      	lsls	r2, r2, #2
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fbe2 	bl	8008192 <_calloc_r>
 80079ce:	b160      	cbz	r0, 80079ea <_Balloc+0x56>
 80079d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80079d4:	e00e      	b.n	80079f4 <_Balloc+0x60>
 80079d6:	2221      	movs	r2, #33	; 0x21
 80079d8:	2104      	movs	r1, #4
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fbd9 	bl	8008192 <_calloc_r>
 80079e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e2:	60e8      	str	r0, [r5, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e4      	bne.n	80079b4 <_Balloc+0x20>
 80079ea:	2000      	movs	r0, #0
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
 80079ee:	6802      	ldr	r2, [r0, #0]
 80079f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80079f4:	2300      	movs	r3, #0
 80079f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079fa:	e7f7      	b.n	80079ec <_Balloc+0x58>

080079fc <_Bfree>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a00:	4606      	mov	r6, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	b93c      	cbnz	r4, 8007a16 <_Bfree+0x1a>
 8007a06:	2010      	movs	r0, #16
 8007a08:	f7ff ffaa 	bl	8007960 <malloc>
 8007a0c:	6270      	str	r0, [r6, #36]	; 0x24
 8007a0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a12:	6004      	str	r4, [r0, #0]
 8007a14:	60c4      	str	r4, [r0, #12]
 8007a16:	b13d      	cbz	r5, 8007a28 <_Bfree+0x2c>
 8007a18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a1a:	686a      	ldr	r2, [r5, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a22:	6029      	str	r1, [r5, #0]
 8007a24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a28:	bd70      	pop	{r4, r5, r6, pc}

08007a2a <__multadd>:
 8007a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	690d      	ldr	r5, [r1, #16]
 8007a30:	461f      	mov	r7, r3
 8007a32:	4606      	mov	r6, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	f101 0c14 	add.w	ip, r1, #20
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f8dc 0000 	ldr.w	r0, [ip]
 8007a40:	b281      	uxth	r1, r0
 8007a42:	fb02 7101 	mla	r1, r2, r1, r7
 8007a46:	0c0f      	lsrs	r7, r1, #16
 8007a48:	0c00      	lsrs	r0, r0, #16
 8007a4a:	fb02 7000 	mla	r0, r2, r0, r7
 8007a4e:	b289      	uxth	r1, r1
 8007a50:	3301      	adds	r3, #1
 8007a52:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007a56:	429d      	cmp	r5, r3
 8007a58:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007a5c:	f84c 1b04 	str.w	r1, [ip], #4
 8007a60:	dcec      	bgt.n	8007a3c <__multadd+0x12>
 8007a62:	b1d7      	cbz	r7, 8007a9a <__multadd+0x70>
 8007a64:	68a3      	ldr	r3, [r4, #8]
 8007a66:	42ab      	cmp	r3, r5
 8007a68:	dc12      	bgt.n	8007a90 <__multadd+0x66>
 8007a6a:	6861      	ldr	r1, [r4, #4]
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	3101      	adds	r1, #1
 8007a70:	f7ff ff90 	bl	8007994 <_Balloc>
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	3202      	adds	r2, #2
 8007a78:	f104 010c 	add.w	r1, r4, #12
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	0092      	lsls	r2, r2, #2
 8007a80:	300c      	adds	r0, #12
 8007a82:	f7fc fdab 	bl	80045dc <memcpy>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ffb7 	bl	80079fc <_Bfree>
 8007a8e:	4644      	mov	r4, r8
 8007a90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a94:	3501      	adds	r5, #1
 8007a96:	615f      	str	r7, [r3, #20]
 8007a98:	6125      	str	r5, [r4, #16]
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007aa0 <__s2b>:
 8007aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	4615      	mov	r5, r2
 8007aa8:	461f      	mov	r7, r3
 8007aaa:	2209      	movs	r2, #9
 8007aac:	3308      	adds	r3, #8
 8007aae:	4606      	mov	r6, r0
 8007ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	db20      	blt.n	8007afe <__s2b+0x5e>
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ff69 	bl	8007994 <_Balloc>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	6143      	str	r3, [r0, #20]
 8007ac6:	2d09      	cmp	r5, #9
 8007ac8:	f04f 0301 	mov.w	r3, #1
 8007acc:	6103      	str	r3, [r0, #16]
 8007ace:	dd19      	ble.n	8007b04 <__s2b+0x64>
 8007ad0:	f104 0809 	add.w	r8, r4, #9
 8007ad4:	46c1      	mov	r9, r8
 8007ad6:	442c      	add	r4, r5
 8007ad8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007adc:	4601      	mov	r1, r0
 8007ade:	3b30      	subs	r3, #48	; 0x30
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff ffa1 	bl	8007a2a <__multadd>
 8007ae8:	45a1      	cmp	r9, r4
 8007aea:	d1f5      	bne.n	8007ad8 <__s2b+0x38>
 8007aec:	eb08 0405 	add.w	r4, r8, r5
 8007af0:	3c08      	subs	r4, #8
 8007af2:	1b2d      	subs	r5, r5, r4
 8007af4:	1963      	adds	r3, r4, r5
 8007af6:	42bb      	cmp	r3, r7
 8007af8:	db07      	blt.n	8007b0a <__s2b+0x6a>
 8007afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afe:	0052      	lsls	r2, r2, #1
 8007b00:	3101      	adds	r1, #1
 8007b02:	e7d9      	b.n	8007ab8 <__s2b+0x18>
 8007b04:	340a      	adds	r4, #10
 8007b06:	2509      	movs	r5, #9
 8007b08:	e7f3      	b.n	8007af2 <__s2b+0x52>
 8007b0a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b0e:	4601      	mov	r1, r0
 8007b10:	3b30      	subs	r3, #48	; 0x30
 8007b12:	220a      	movs	r2, #10
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7ff ff88 	bl	8007a2a <__multadd>
 8007b1a:	e7eb      	b.n	8007af4 <__s2b+0x54>

08007b1c <__hi0bits>:
 8007b1c:	0c02      	lsrs	r2, r0, #16
 8007b1e:	0412      	lsls	r2, r2, #16
 8007b20:	4603      	mov	r3, r0
 8007b22:	b9b2      	cbnz	r2, 8007b52 <__hi0bits+0x36>
 8007b24:	0403      	lsls	r3, r0, #16
 8007b26:	2010      	movs	r0, #16
 8007b28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b2c:	bf04      	itt	eq
 8007b2e:	021b      	lsleq	r3, r3, #8
 8007b30:	3008      	addeq	r0, #8
 8007b32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b36:	bf04      	itt	eq
 8007b38:	011b      	lsleq	r3, r3, #4
 8007b3a:	3004      	addeq	r0, #4
 8007b3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b40:	bf04      	itt	eq
 8007b42:	009b      	lsleq	r3, r3, #2
 8007b44:	3002      	addeq	r0, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	db06      	blt.n	8007b58 <__hi0bits+0x3c>
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	d503      	bpl.n	8007b56 <__hi0bits+0x3a>
 8007b4e:	3001      	adds	r0, #1
 8007b50:	4770      	bx	lr
 8007b52:	2000      	movs	r0, #0
 8007b54:	e7e8      	b.n	8007b28 <__hi0bits+0xc>
 8007b56:	2020      	movs	r0, #32
 8007b58:	4770      	bx	lr

08007b5a <__lo0bits>:
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	f013 0207 	ands.w	r2, r3, #7
 8007b60:	4601      	mov	r1, r0
 8007b62:	d00b      	beq.n	8007b7c <__lo0bits+0x22>
 8007b64:	07da      	lsls	r2, r3, #31
 8007b66:	d423      	bmi.n	8007bb0 <__lo0bits+0x56>
 8007b68:	0798      	lsls	r0, r3, #30
 8007b6a:	bf49      	itett	mi
 8007b6c:	085b      	lsrmi	r3, r3, #1
 8007b6e:	089b      	lsrpl	r3, r3, #2
 8007b70:	2001      	movmi	r0, #1
 8007b72:	600b      	strmi	r3, [r1, #0]
 8007b74:	bf5c      	itt	pl
 8007b76:	600b      	strpl	r3, [r1, #0]
 8007b78:	2002      	movpl	r0, #2
 8007b7a:	4770      	bx	lr
 8007b7c:	b298      	uxth	r0, r3
 8007b7e:	b9a8      	cbnz	r0, 8007bac <__lo0bits+0x52>
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	2010      	movs	r0, #16
 8007b84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b88:	bf04      	itt	eq
 8007b8a:	0a1b      	lsreq	r3, r3, #8
 8007b8c:	3008      	addeq	r0, #8
 8007b8e:	071a      	lsls	r2, r3, #28
 8007b90:	bf04      	itt	eq
 8007b92:	091b      	lsreq	r3, r3, #4
 8007b94:	3004      	addeq	r0, #4
 8007b96:	079a      	lsls	r2, r3, #30
 8007b98:	bf04      	itt	eq
 8007b9a:	089b      	lsreq	r3, r3, #2
 8007b9c:	3002      	addeq	r0, #2
 8007b9e:	07da      	lsls	r2, r3, #31
 8007ba0:	d402      	bmi.n	8007ba8 <__lo0bits+0x4e>
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	d006      	beq.n	8007bb4 <__lo0bits+0x5a>
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	600b      	str	r3, [r1, #0]
 8007baa:	4770      	bx	lr
 8007bac:	4610      	mov	r0, r2
 8007bae:	e7e9      	b.n	8007b84 <__lo0bits+0x2a>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	4770      	bx	lr
 8007bb4:	2020      	movs	r0, #32
 8007bb6:	4770      	bx	lr

08007bb8 <__i2b>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	460c      	mov	r4, r1
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	f7ff fee9 	bl	8007994 <_Balloc>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	6144      	str	r4, [r0, #20]
 8007bc6:	6102      	str	r2, [r0, #16]
 8007bc8:	bd10      	pop	{r4, pc}

08007bca <__multiply>:
 8007bca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bce:	4614      	mov	r4, r2
 8007bd0:	690a      	ldr	r2, [r1, #16]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	bfb8      	it	lt
 8007bd8:	460b      	movlt	r3, r1
 8007bda:	4688      	mov	r8, r1
 8007bdc:	bfbc      	itt	lt
 8007bde:	46a0      	movlt	r8, r4
 8007be0:	461c      	movlt	r4, r3
 8007be2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007be6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007bea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bf2:	eb07 0609 	add.w	r6, r7, r9
 8007bf6:	42b3      	cmp	r3, r6
 8007bf8:	bfb8      	it	lt
 8007bfa:	3101      	addlt	r1, #1
 8007bfc:	f7ff feca 	bl	8007994 <_Balloc>
 8007c00:	f100 0514 	add.w	r5, r0, #20
 8007c04:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007c08:	462b      	mov	r3, r5
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4573      	cmp	r3, lr
 8007c0e:	d316      	bcc.n	8007c3e <__multiply+0x74>
 8007c10:	f104 0214 	add.w	r2, r4, #20
 8007c14:	f108 0114 	add.w	r1, r8, #20
 8007c18:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007c1c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	9201      	str	r2, [sp, #4]
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d80c      	bhi.n	8007c44 <__multiply+0x7a>
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	dd03      	ble.n	8007c36 <__multiply+0x6c>
 8007c2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d05d      	beq.n	8007cf2 <__multiply+0x128>
 8007c36:	6106      	str	r6, [r0, #16]
 8007c38:	b003      	add	sp, #12
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	f843 2b04 	str.w	r2, [r3], #4
 8007c42:	e7e3      	b.n	8007c0c <__multiply+0x42>
 8007c44:	f8b2 b000 	ldrh.w	fp, [r2]
 8007c48:	f1bb 0f00 	cmp.w	fp, #0
 8007c4c:	d023      	beq.n	8007c96 <__multiply+0xcc>
 8007c4e:	4689      	mov	r9, r1
 8007c50:	46ac      	mov	ip, r5
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	f859 4b04 	ldr.w	r4, [r9], #4
 8007c5a:	f8dc a000 	ldr.w	sl, [ip]
 8007c5e:	b2a3      	uxth	r3, r4
 8007c60:	fa1f fa8a 	uxth.w	sl, sl
 8007c64:	fb0b a303 	mla	r3, fp, r3, sl
 8007c68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c6c:	f8dc 4000 	ldr.w	r4, [ip]
 8007c70:	4443      	add	r3, r8
 8007c72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c76:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c7e:	46e2      	mov	sl, ip
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c86:	454f      	cmp	r7, r9
 8007c88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c8c:	f84a 3b04 	str.w	r3, [sl], #4
 8007c90:	d82b      	bhi.n	8007cea <__multiply+0x120>
 8007c92:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c96:	9b01      	ldr	r3, [sp, #4]
 8007c98:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c9c:	3204      	adds	r2, #4
 8007c9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ca2:	d020      	beq.n	8007ce6 <__multiply+0x11c>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	4689      	mov	r9, r1
 8007ca8:	46a8      	mov	r8, r5
 8007caa:	f04f 0b00 	mov.w	fp, #0
 8007cae:	f8b9 c000 	ldrh.w	ip, [r9]
 8007cb2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007cb6:	fb0a 440c 	mla	r4, sl, ip, r4
 8007cba:	445c      	add	r4, fp
 8007cbc:	46c4      	mov	ip, r8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007cc4:	f84c 3b04 	str.w	r3, [ip], #4
 8007cc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ccc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	fb0a b303 	mla	r3, sl, r3, fp
 8007cd6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007cda:	454f      	cmp	r7, r9
 8007cdc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007ce0:	d805      	bhi.n	8007cee <__multiply+0x124>
 8007ce2:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ce6:	3504      	adds	r5, #4
 8007ce8:	e79b      	b.n	8007c22 <__multiply+0x58>
 8007cea:	46d4      	mov	ip, sl
 8007cec:	e7b3      	b.n	8007c56 <__multiply+0x8c>
 8007cee:	46e0      	mov	r8, ip
 8007cf0:	e7dd      	b.n	8007cae <__multiply+0xe4>
 8007cf2:	3e01      	subs	r6, #1
 8007cf4:	e799      	b.n	8007c2a <__multiply+0x60>
	...

08007cf8 <__pow5mult>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4615      	mov	r5, r2
 8007cfe:	f012 0203 	ands.w	r2, r2, #3
 8007d02:	4606      	mov	r6, r0
 8007d04:	460f      	mov	r7, r1
 8007d06:	d007      	beq.n	8007d18 <__pow5mult+0x20>
 8007d08:	3a01      	subs	r2, #1
 8007d0a:	4c21      	ldr	r4, [pc, #132]	; (8007d90 <__pow5mult+0x98>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d12:	f7ff fe8a 	bl	8007a2a <__multadd>
 8007d16:	4607      	mov	r7, r0
 8007d18:	10ad      	asrs	r5, r5, #2
 8007d1a:	d035      	beq.n	8007d88 <__pow5mult+0x90>
 8007d1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d1e:	b93c      	cbnz	r4, 8007d30 <__pow5mult+0x38>
 8007d20:	2010      	movs	r0, #16
 8007d22:	f7ff fe1d 	bl	8007960 <malloc>
 8007d26:	6270      	str	r0, [r6, #36]	; 0x24
 8007d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d2c:	6004      	str	r4, [r0, #0]
 8007d2e:	60c4      	str	r4, [r0, #12]
 8007d30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d38:	b94c      	cbnz	r4, 8007d4e <__pow5mult+0x56>
 8007d3a:	f240 2171 	movw	r1, #625	; 0x271
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff3a 	bl	8007bb8 <__i2b>
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	07eb      	lsls	r3, r5, #31
 8007d54:	d50a      	bpl.n	8007d6c <__pow5mult+0x74>
 8007d56:	4639      	mov	r1, r7
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff35 	bl	8007bca <__multiply>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4681      	mov	r9, r0
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff fe49 	bl	80079fc <_Bfree>
 8007d6a:	464f      	mov	r7, r9
 8007d6c:	106d      	asrs	r5, r5, #1
 8007d6e:	d00b      	beq.n	8007d88 <__pow5mult+0x90>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	b938      	cbnz	r0, 8007d84 <__pow5mult+0x8c>
 8007d74:	4622      	mov	r2, r4
 8007d76:	4621      	mov	r1, r4
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7ff ff26 	bl	8007bca <__multiply>
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f8c0 8000 	str.w	r8, [r0]
 8007d84:	4604      	mov	r4, r0
 8007d86:	e7e4      	b.n	8007d52 <__pow5mult+0x5a>
 8007d88:	4638      	mov	r0, r7
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8e:	bf00      	nop
 8007d90:	08008f78 	.word	0x08008f78

08007d94 <__lshift>:
 8007d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d98:	460c      	mov	r4, r1
 8007d9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	6849      	ldr	r1, [r1, #4]
 8007da2:	eb0a 0903 	add.w	r9, sl, r3
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	4607      	mov	r7, r0
 8007daa:	4616      	mov	r6, r2
 8007dac:	f109 0501 	add.w	r5, r9, #1
 8007db0:	42ab      	cmp	r3, r5
 8007db2:	db32      	blt.n	8007e1a <__lshift+0x86>
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff fded 	bl	8007994 <_Balloc>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	f100 0114 	add.w	r1, r0, #20
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4553      	cmp	r3, sl
 8007dc6:	db2b      	blt.n	8007e20 <__lshift+0x8c>
 8007dc8:	6920      	ldr	r0, [r4, #16]
 8007dca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dce:	f104 0314 	add.w	r3, r4, #20
 8007dd2:	f016 021f 	ands.w	r2, r6, #31
 8007dd6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dda:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dde:	d025      	beq.n	8007e2c <__lshift+0x98>
 8007de0:	f1c2 0e20 	rsb	lr, r2, #32
 8007de4:	2000      	movs	r0, #0
 8007de6:	681e      	ldr	r6, [r3, #0]
 8007de8:	468a      	mov	sl, r1
 8007dea:	4096      	lsls	r6, r2
 8007dec:	4330      	orrs	r0, r6
 8007dee:	f84a 0b04 	str.w	r0, [sl], #4
 8007df2:	f853 0b04 	ldr.w	r0, [r3], #4
 8007df6:	459c      	cmp	ip, r3
 8007df8:	fa20 f00e 	lsr.w	r0, r0, lr
 8007dfc:	d814      	bhi.n	8007e28 <__lshift+0x94>
 8007dfe:	6048      	str	r0, [r1, #4]
 8007e00:	b108      	cbz	r0, 8007e06 <__lshift+0x72>
 8007e02:	f109 0502 	add.w	r5, r9, #2
 8007e06:	3d01      	subs	r5, #1
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007e0e:	4621      	mov	r1, r4
 8007e10:	f7ff fdf4 	bl	80079fc <_Bfree>
 8007e14:	4640      	mov	r0, r8
 8007e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1a:	3101      	adds	r1, #1
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	e7c7      	b.n	8007db0 <__lshift+0x1c>
 8007e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e24:	3301      	adds	r3, #1
 8007e26:	e7cd      	b.n	8007dc4 <__lshift+0x30>
 8007e28:	4651      	mov	r1, sl
 8007e2a:	e7dc      	b.n	8007de6 <__lshift+0x52>
 8007e2c:	3904      	subs	r1, #4
 8007e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e32:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e36:	459c      	cmp	ip, r3
 8007e38:	d8f9      	bhi.n	8007e2e <__lshift+0x9a>
 8007e3a:	e7e4      	b.n	8007e06 <__lshift+0x72>

08007e3c <__mcmp>:
 8007e3c:	6903      	ldr	r3, [r0, #16]
 8007e3e:	690a      	ldr	r2, [r1, #16]
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	b530      	push	{r4, r5, lr}
 8007e44:	d10c      	bne.n	8007e60 <__mcmp+0x24>
 8007e46:	0092      	lsls	r2, r2, #2
 8007e48:	3014      	adds	r0, #20
 8007e4a:	3114      	adds	r1, #20
 8007e4c:	1884      	adds	r4, r0, r2
 8007e4e:	4411      	add	r1, r2
 8007e50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e58:	4295      	cmp	r5, r2
 8007e5a:	d003      	beq.n	8007e64 <__mcmp+0x28>
 8007e5c:	d305      	bcc.n	8007e6a <__mcmp+0x2e>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4618      	mov	r0, r3
 8007e62:	bd30      	pop	{r4, r5, pc}
 8007e64:	42a0      	cmp	r0, r4
 8007e66:	d3f3      	bcc.n	8007e50 <__mcmp+0x14>
 8007e68:	e7fa      	b.n	8007e60 <__mcmp+0x24>
 8007e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e6e:	e7f7      	b.n	8007e60 <__mcmp+0x24>

08007e70 <__mdiff>:
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	460d      	mov	r5, r1
 8007e76:	4607      	mov	r7, r0
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	f7ff ffdd 	bl	8007e3c <__mcmp>
 8007e82:	1e06      	subs	r6, r0, #0
 8007e84:	d108      	bne.n	8007e98 <__mdiff+0x28>
 8007e86:	4631      	mov	r1, r6
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff fd83 	bl	8007994 <_Balloc>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e98:	bfa4      	itt	ge
 8007e9a:	4623      	movge	r3, r4
 8007e9c:	462c      	movge	r4, r5
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	6861      	ldr	r1, [r4, #4]
 8007ea2:	bfa6      	itte	ge
 8007ea4:	461d      	movge	r5, r3
 8007ea6:	2600      	movge	r6, #0
 8007ea8:	2601      	movlt	r6, #1
 8007eaa:	f7ff fd73 	bl	8007994 <_Balloc>
 8007eae:	692b      	ldr	r3, [r5, #16]
 8007eb0:	60c6      	str	r6, [r0, #12]
 8007eb2:	6926      	ldr	r6, [r4, #16]
 8007eb4:	f105 0914 	add.w	r9, r5, #20
 8007eb8:	f104 0214 	add.w	r2, r4, #20
 8007ebc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007ec0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ec4:	f100 0514 	add.w	r5, r0, #20
 8007ec8:	f04f 0e00 	mov.w	lr, #0
 8007ecc:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ed0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ed4:	fa1e f18a 	uxtah	r1, lr, sl
 8007ed8:	b2a3      	uxth	r3, r4
 8007eda:	1ac9      	subs	r1, r1, r3
 8007edc:	0c23      	lsrs	r3, r4, #16
 8007ede:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007ee2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ee6:	b289      	uxth	r1, r1
 8007ee8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007eec:	45c8      	cmp	r8, r9
 8007eee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007ef2:	4694      	mov	ip, r2
 8007ef4:	f845 3b04 	str.w	r3, [r5], #4
 8007ef8:	d8e8      	bhi.n	8007ecc <__mdiff+0x5c>
 8007efa:	45bc      	cmp	ip, r7
 8007efc:	d304      	bcc.n	8007f08 <__mdiff+0x98>
 8007efe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007f02:	b183      	cbz	r3, 8007f26 <__mdiff+0xb6>
 8007f04:	6106      	str	r6, [r0, #16]
 8007f06:	e7c5      	b.n	8007e94 <__mdiff+0x24>
 8007f08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007f0c:	fa1e f381 	uxtah	r3, lr, r1
 8007f10:	141a      	asrs	r2, r3, #16
 8007f12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f1c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007f20:	f845 3b04 	str.w	r3, [r5], #4
 8007f24:	e7e9      	b.n	8007efa <__mdiff+0x8a>
 8007f26:	3e01      	subs	r6, #1
 8007f28:	e7e9      	b.n	8007efe <__mdiff+0x8e>
	...

08007f2c <__ulp>:
 8007f2c:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <__ulp+0x4c>)
 8007f2e:	ee10 2a90 	vmov	r2, s1
 8007f32:	401a      	ands	r2, r3
 8007f34:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dd04      	ble.n	8007f46 <__ulp+0x1a>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4619      	mov	r1, r3
 8007f40:	ec41 0b10 	vmov	d0, r0, r1
 8007f44:	4770      	bx	lr
 8007f46:	425b      	negs	r3, r3
 8007f48:	151b      	asrs	r3, r3, #20
 8007f4a:	2b13      	cmp	r3, #19
 8007f4c:	f04f 0000 	mov.w	r0, #0
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	dc04      	bgt.n	8007f60 <__ulp+0x34>
 8007f56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007f5a:	fa42 f103 	asr.w	r1, r2, r3
 8007f5e:	e7ef      	b.n	8007f40 <__ulp+0x14>
 8007f60:	3b14      	subs	r3, #20
 8007f62:	2b1e      	cmp	r3, #30
 8007f64:	f04f 0201 	mov.w	r2, #1
 8007f68:	bfda      	itte	le
 8007f6a:	f1c3 031f 	rsble	r3, r3, #31
 8007f6e:	fa02 f303 	lslle.w	r3, r2, r3
 8007f72:	4613      	movgt	r3, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	e7e3      	b.n	8007f40 <__ulp+0x14>
 8007f78:	7ff00000 	.word	0x7ff00000

08007f7c <__b2d>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	6905      	ldr	r5, [r0, #16]
 8007f80:	f100 0714 	add.w	r7, r0, #20
 8007f84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f88:	1f2e      	subs	r6, r5, #4
 8007f8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f7ff fdc4 	bl	8007b1c <__hi0bits>
 8007f94:	f1c0 0320 	rsb	r3, r0, #32
 8007f98:	280a      	cmp	r0, #10
 8007f9a:	600b      	str	r3, [r1, #0]
 8007f9c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008014 <__b2d+0x98>
 8007fa0:	dc14      	bgt.n	8007fcc <__b2d+0x50>
 8007fa2:	f1c0 0e0b 	rsb	lr, r0, #11
 8007fa6:	fa24 f10e 	lsr.w	r1, r4, lr
 8007faa:	42b7      	cmp	r7, r6
 8007fac:	ea41 030c 	orr.w	r3, r1, ip
 8007fb0:	bf34      	ite	cc
 8007fb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fb6:	2100      	movcs	r1, #0
 8007fb8:	3015      	adds	r0, #21
 8007fba:	fa04 f000 	lsl.w	r0, r4, r0
 8007fbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8007fc2:	ea40 0201 	orr.w	r2, r0, r1
 8007fc6:	ec43 2b10 	vmov	d0, r2, r3
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fcc:	42b7      	cmp	r7, r6
 8007fce:	bf3a      	itte	cc
 8007fd0:	f1a5 0608 	subcc.w	r6, r5, #8
 8007fd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fd8:	2100      	movcs	r1, #0
 8007fda:	380b      	subs	r0, #11
 8007fdc:	d015      	beq.n	800800a <__b2d+0x8e>
 8007fde:	4084      	lsls	r4, r0
 8007fe0:	f1c0 0520 	rsb	r5, r0, #32
 8007fe4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007fe8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007fec:	42be      	cmp	r6, r7
 8007fee:	fa21 fc05 	lsr.w	ip, r1, r5
 8007ff2:	ea44 030c 	orr.w	r3, r4, ip
 8007ff6:	bf8c      	ite	hi
 8007ff8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007ffc:	2400      	movls	r4, #0
 8007ffe:	fa01 f000 	lsl.w	r0, r1, r0
 8008002:	40ec      	lsrs	r4, r5
 8008004:	ea40 0204 	orr.w	r2, r0, r4
 8008008:	e7dd      	b.n	8007fc6 <__b2d+0x4a>
 800800a:	ea44 030c 	orr.w	r3, r4, ip
 800800e:	460a      	mov	r2, r1
 8008010:	e7d9      	b.n	8007fc6 <__b2d+0x4a>
 8008012:	bf00      	nop
 8008014:	3ff00000 	.word	0x3ff00000

08008018 <__d2b>:
 8008018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800801c:	460e      	mov	r6, r1
 800801e:	2101      	movs	r1, #1
 8008020:	ec59 8b10 	vmov	r8, r9, d0
 8008024:	4615      	mov	r5, r2
 8008026:	f7ff fcb5 	bl	8007994 <_Balloc>
 800802a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800802e:	4607      	mov	r7, r0
 8008030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008034:	bb34      	cbnz	r4, 8008084 <__d2b+0x6c>
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f1b8 0300 	subs.w	r3, r8, #0
 800803c:	d027      	beq.n	800808e <__d2b+0x76>
 800803e:	a802      	add	r0, sp, #8
 8008040:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008044:	f7ff fd89 	bl	8007b5a <__lo0bits>
 8008048:	9900      	ldr	r1, [sp, #0]
 800804a:	b1f0      	cbz	r0, 800808a <__d2b+0x72>
 800804c:	9a01      	ldr	r2, [sp, #4]
 800804e:	f1c0 0320 	rsb	r3, r0, #32
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	430b      	orrs	r3, r1
 8008058:	40c2      	lsrs	r2, r0
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	bf14      	ite	ne
 8008066:	2102      	movne	r1, #2
 8008068:	2101      	moveq	r1, #1
 800806a:	6139      	str	r1, [r7, #16]
 800806c:	b1c4      	cbz	r4, 80080a0 <__d2b+0x88>
 800806e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008072:	4404      	add	r4, r0
 8008074:	6034      	str	r4, [r6, #0]
 8008076:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800807a:	6028      	str	r0, [r5, #0]
 800807c:	4638      	mov	r0, r7
 800807e:	b003      	add	sp, #12
 8008080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008088:	e7d5      	b.n	8008036 <__d2b+0x1e>
 800808a:	6179      	str	r1, [r7, #20]
 800808c:	e7e7      	b.n	800805e <__d2b+0x46>
 800808e:	a801      	add	r0, sp, #4
 8008090:	f7ff fd63 	bl	8007b5a <__lo0bits>
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	2101      	movs	r1, #1
 800809a:	6139      	str	r1, [r7, #16]
 800809c:	3020      	adds	r0, #32
 800809e:	e7e5      	b.n	800806c <__d2b+0x54>
 80080a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080a8:	6030      	str	r0, [r6, #0]
 80080aa:	6918      	ldr	r0, [r3, #16]
 80080ac:	f7ff fd36 	bl	8007b1c <__hi0bits>
 80080b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080b4:	e7e1      	b.n	800807a <__d2b+0x62>

080080b6 <__ratio>:
 80080b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	4688      	mov	r8, r1
 80080bc:	4669      	mov	r1, sp
 80080be:	4681      	mov	r9, r0
 80080c0:	f7ff ff5c 	bl	8007f7c <__b2d>
 80080c4:	a901      	add	r1, sp, #4
 80080c6:	4640      	mov	r0, r8
 80080c8:	ec57 6b10 	vmov	r6, r7, d0
 80080cc:	f7ff ff56 	bl	8007f7c <__b2d>
 80080d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080d8:	eba3 0c02 	sub.w	ip, r3, r2
 80080dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80080e6:	ec5b ab10 	vmov	sl, fp, d0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	bfce      	itee	gt
 80080ee:	463a      	movgt	r2, r7
 80080f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080f4:	465a      	movle	r2, fp
 80080f6:	4659      	mov	r1, fp
 80080f8:	463d      	mov	r5, r7
 80080fa:	bfd4      	ite	le
 80080fc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008100:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008104:	4630      	mov	r0, r6
 8008106:	ee10 2a10 	vmov	r2, s0
 800810a:	460b      	mov	r3, r1
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 fb75 	bl	80007fc <__aeabi_ddiv>
 8008112:	ec41 0b10 	vmov	d0, r0, r1
 8008116:	b003      	add	sp, #12
 8008118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800811c <__copybits>:
 800811c:	3901      	subs	r1, #1
 800811e:	b510      	push	{r4, lr}
 8008120:	1149      	asrs	r1, r1, #5
 8008122:	6914      	ldr	r4, [r2, #16]
 8008124:	3101      	adds	r1, #1
 8008126:	f102 0314 	add.w	r3, r2, #20
 800812a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800812e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008132:	42a3      	cmp	r3, r4
 8008134:	4602      	mov	r2, r0
 8008136:	d303      	bcc.n	8008140 <__copybits+0x24>
 8008138:	2300      	movs	r3, #0
 800813a:	428a      	cmp	r2, r1
 800813c:	d305      	bcc.n	800814a <__copybits+0x2e>
 800813e:	bd10      	pop	{r4, pc}
 8008140:	f853 2b04 	ldr.w	r2, [r3], #4
 8008144:	f840 2b04 	str.w	r2, [r0], #4
 8008148:	e7f3      	b.n	8008132 <__copybits+0x16>
 800814a:	f842 3b04 	str.w	r3, [r2], #4
 800814e:	e7f4      	b.n	800813a <__copybits+0x1e>

08008150 <__any_on>:
 8008150:	f100 0214 	add.w	r2, r0, #20
 8008154:	6900      	ldr	r0, [r0, #16]
 8008156:	114b      	asrs	r3, r1, #5
 8008158:	4298      	cmp	r0, r3
 800815a:	b510      	push	{r4, lr}
 800815c:	db11      	blt.n	8008182 <__any_on+0x32>
 800815e:	dd0a      	ble.n	8008176 <__any_on+0x26>
 8008160:	f011 011f 	ands.w	r1, r1, #31
 8008164:	d007      	beq.n	8008176 <__any_on+0x26>
 8008166:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800816a:	fa24 f001 	lsr.w	r0, r4, r1
 800816e:	fa00 f101 	lsl.w	r1, r0, r1
 8008172:	428c      	cmp	r4, r1
 8008174:	d10b      	bne.n	800818e <__any_on+0x3e>
 8008176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800817a:	4293      	cmp	r3, r2
 800817c:	d803      	bhi.n	8008186 <__any_on+0x36>
 800817e:	2000      	movs	r0, #0
 8008180:	bd10      	pop	{r4, pc}
 8008182:	4603      	mov	r3, r0
 8008184:	e7f7      	b.n	8008176 <__any_on+0x26>
 8008186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800818a:	2900      	cmp	r1, #0
 800818c:	d0f5      	beq.n	800817a <__any_on+0x2a>
 800818e:	2001      	movs	r0, #1
 8008190:	e7f6      	b.n	8008180 <__any_on+0x30>

08008192 <_calloc_r>:
 8008192:	b538      	push	{r3, r4, r5, lr}
 8008194:	fb02 f401 	mul.w	r4, r2, r1
 8008198:	4621      	mov	r1, r4
 800819a:	f000 f857 	bl	800824c <_malloc_r>
 800819e:	4605      	mov	r5, r0
 80081a0:	b118      	cbz	r0, 80081aa <_calloc_r+0x18>
 80081a2:	4622      	mov	r2, r4
 80081a4:	2100      	movs	r1, #0
 80081a6:	f7fc fa24 	bl	80045f2 <memset>
 80081aa:	4628      	mov	r0, r5
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080081b0 <_free_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4605      	mov	r5, r0
 80081b4:	2900      	cmp	r1, #0
 80081b6:	d045      	beq.n	8008244 <_free_r+0x94>
 80081b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081bc:	1f0c      	subs	r4, r1, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bfb8      	it	lt
 80081c2:	18e4      	addlt	r4, r4, r3
 80081c4:	f000 fc0f 	bl	80089e6 <__malloc_lock>
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <_free_r+0x98>)
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	4610      	mov	r0, r2
 80081ce:	b933      	cbnz	r3, 80081de <_free_r+0x2e>
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6014      	str	r4, [r2, #0]
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f000 bc05 	b.w	80089e8 <__malloc_unlock>
 80081de:	42a3      	cmp	r3, r4
 80081e0:	d90c      	bls.n	80081fc <_free_r+0x4c>
 80081e2:	6821      	ldr	r1, [r4, #0]
 80081e4:	1862      	adds	r2, r4, r1
 80081e6:	4293      	cmp	r3, r2
 80081e8:	bf04      	itt	eq
 80081ea:	681a      	ldreq	r2, [r3, #0]
 80081ec:	685b      	ldreq	r3, [r3, #4]
 80081ee:	6063      	str	r3, [r4, #4]
 80081f0:	bf04      	itt	eq
 80081f2:	1852      	addeq	r2, r2, r1
 80081f4:	6022      	streq	r2, [r4, #0]
 80081f6:	6004      	str	r4, [r0, #0]
 80081f8:	e7ec      	b.n	80081d4 <_free_r+0x24>
 80081fa:	4613      	mov	r3, r2
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	b10a      	cbz	r2, 8008204 <_free_r+0x54>
 8008200:	42a2      	cmp	r2, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x4a>
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	1858      	adds	r0, r3, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x74>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1858      	adds	r0, r3, r1
 8008212:	4282      	cmp	r2, r0
 8008214:	6019      	str	r1, [r3, #0]
 8008216:	d1dd      	bne.n	80081d4 <_free_r+0x24>
 8008218:	6810      	ldr	r0, [r2, #0]
 800821a:	6852      	ldr	r2, [r2, #4]
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	4401      	add	r1, r0
 8008220:	6019      	str	r1, [r3, #0]
 8008222:	e7d7      	b.n	80081d4 <_free_r+0x24>
 8008224:	d902      	bls.n	800822c <_free_r+0x7c>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d3      	b.n	80081d4 <_free_r+0x24>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428a      	cmp	r2, r1
 8008232:	bf04      	itt	eq
 8008234:	6811      	ldreq	r1, [r2, #0]
 8008236:	6852      	ldreq	r2, [r2, #4]
 8008238:	6062      	str	r2, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	605c      	str	r4, [r3, #4]
 8008242:	e7c7      	b.n	80081d4 <_free_r+0x24>
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	bf00      	nop
 8008248:	2000020c 	.word	0x2000020c

0800824c <_malloc_r>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	1ccd      	adds	r5, r1, #3
 8008250:	f025 0503 	bic.w	r5, r5, #3
 8008254:	3508      	adds	r5, #8
 8008256:	2d0c      	cmp	r5, #12
 8008258:	bf38      	it	cc
 800825a:	250c      	movcc	r5, #12
 800825c:	2d00      	cmp	r5, #0
 800825e:	4606      	mov	r6, r0
 8008260:	db01      	blt.n	8008266 <_malloc_r+0x1a>
 8008262:	42a9      	cmp	r1, r5
 8008264:	d903      	bls.n	800826e <_malloc_r+0x22>
 8008266:	230c      	movs	r3, #12
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	2000      	movs	r0, #0
 800826c:	bd70      	pop	{r4, r5, r6, pc}
 800826e:	f000 fbba 	bl	80089e6 <__malloc_lock>
 8008272:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <_malloc_r+0xac>)
 8008274:	6814      	ldr	r4, [r2, #0]
 8008276:	4621      	mov	r1, r4
 8008278:	b991      	cbnz	r1, 80082a0 <_malloc_r+0x54>
 800827a:	4c20      	ldr	r4, [pc, #128]	; (80082fc <_malloc_r+0xb0>)
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	b91b      	cbnz	r3, 8008288 <_malloc_r+0x3c>
 8008280:	4630      	mov	r0, r6
 8008282:	f000 facf 	bl	8008824 <_sbrk_r>
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	4629      	mov	r1, r5
 800828a:	4630      	mov	r0, r6
 800828c:	f000 faca 	bl	8008824 <_sbrk_r>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d124      	bne.n	80082de <_malloc_r+0x92>
 8008294:	230c      	movs	r3, #12
 8008296:	6033      	str	r3, [r6, #0]
 8008298:	4630      	mov	r0, r6
 800829a:	f000 fba5 	bl	80089e8 <__malloc_unlock>
 800829e:	e7e4      	b.n	800826a <_malloc_r+0x1e>
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	1b5b      	subs	r3, r3, r5
 80082a4:	d418      	bmi.n	80082d8 <_malloc_r+0x8c>
 80082a6:	2b0b      	cmp	r3, #11
 80082a8:	d90f      	bls.n	80082ca <_malloc_r+0x7e>
 80082aa:	600b      	str	r3, [r1, #0]
 80082ac:	50cd      	str	r5, [r1, r3]
 80082ae:	18cc      	adds	r4, r1, r3
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 fb99 	bl	80089e8 <__malloc_unlock>
 80082b6:	f104 000b 	add.w	r0, r4, #11
 80082ba:	1d23      	adds	r3, r4, #4
 80082bc:	f020 0007 	bic.w	r0, r0, #7
 80082c0:	1ac3      	subs	r3, r0, r3
 80082c2:	d0d3      	beq.n	800826c <_malloc_r+0x20>
 80082c4:	425a      	negs	r2, r3
 80082c6:	50e2      	str	r2, [r4, r3]
 80082c8:	e7d0      	b.n	800826c <_malloc_r+0x20>
 80082ca:	428c      	cmp	r4, r1
 80082cc:	684b      	ldr	r3, [r1, #4]
 80082ce:	bf16      	itet	ne
 80082d0:	6063      	strne	r3, [r4, #4]
 80082d2:	6013      	streq	r3, [r2, #0]
 80082d4:	460c      	movne	r4, r1
 80082d6:	e7eb      	b.n	80082b0 <_malloc_r+0x64>
 80082d8:	460c      	mov	r4, r1
 80082da:	6849      	ldr	r1, [r1, #4]
 80082dc:	e7cc      	b.n	8008278 <_malloc_r+0x2c>
 80082de:	1cc4      	adds	r4, r0, #3
 80082e0:	f024 0403 	bic.w	r4, r4, #3
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d005      	beq.n	80082f4 <_malloc_r+0xa8>
 80082e8:	1a21      	subs	r1, r4, r0
 80082ea:	4630      	mov	r0, r6
 80082ec:	f000 fa9a 	bl	8008824 <_sbrk_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d0cf      	beq.n	8008294 <_malloc_r+0x48>
 80082f4:	6025      	str	r5, [r4, #0]
 80082f6:	e7db      	b.n	80082b0 <_malloc_r+0x64>
 80082f8:	2000020c 	.word	0x2000020c
 80082fc:	20000210 	.word	0x20000210

08008300 <__ssputs_r>:
 8008300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	688e      	ldr	r6, [r1, #8]
 8008306:	429e      	cmp	r6, r3
 8008308:	4682      	mov	sl, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4690      	mov	r8, r2
 800830e:	4699      	mov	r9, r3
 8008310:	d837      	bhi.n	8008382 <__ssputs_r+0x82>
 8008312:	898a      	ldrh	r2, [r1, #12]
 8008314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008318:	d031      	beq.n	800837e <__ssputs_r+0x7e>
 800831a:	6825      	ldr	r5, [r4, #0]
 800831c:	6909      	ldr	r1, [r1, #16]
 800831e:	1a6f      	subs	r7, r5, r1
 8008320:	6965      	ldr	r5, [r4, #20]
 8008322:	2302      	movs	r3, #2
 8008324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008328:	fb95 f5f3 	sdiv	r5, r5, r3
 800832c:	f109 0301 	add.w	r3, r9, #1
 8008330:	443b      	add	r3, r7
 8008332:	429d      	cmp	r5, r3
 8008334:	bf38      	it	cc
 8008336:	461d      	movcc	r5, r3
 8008338:	0553      	lsls	r3, r2, #21
 800833a:	d530      	bpl.n	800839e <__ssputs_r+0x9e>
 800833c:	4629      	mov	r1, r5
 800833e:	f7ff ff85 	bl	800824c <_malloc_r>
 8008342:	4606      	mov	r6, r0
 8008344:	b950      	cbnz	r0, 800835c <__ssputs_r+0x5c>
 8008346:	230c      	movs	r3, #12
 8008348:	f8ca 3000 	str.w	r3, [sl]
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	463a      	mov	r2, r7
 800835e:	6921      	ldr	r1, [r4, #16]
 8008360:	f7fc f93c 	bl	80045dc <memcpy>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	6126      	str	r6, [r4, #16]
 8008372:	6165      	str	r5, [r4, #20]
 8008374:	443e      	add	r6, r7
 8008376:	1bed      	subs	r5, r5, r7
 8008378:	6026      	str	r6, [r4, #0]
 800837a:	60a5      	str	r5, [r4, #8]
 800837c:	464e      	mov	r6, r9
 800837e:	454e      	cmp	r6, r9
 8008380:	d900      	bls.n	8008384 <__ssputs_r+0x84>
 8008382:	464e      	mov	r6, r9
 8008384:	4632      	mov	r2, r6
 8008386:	4641      	mov	r1, r8
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	f000 fb13 	bl	80089b4 <memmove>
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	1b9b      	subs	r3, r3, r6
 8008392:	60a3      	str	r3, [r4, #8]
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	441e      	add	r6, r3
 8008398:	6026      	str	r6, [r4, #0]
 800839a:	2000      	movs	r0, #0
 800839c:	e7dc      	b.n	8008358 <__ssputs_r+0x58>
 800839e:	462a      	mov	r2, r5
 80083a0:	f000 fb23 	bl	80089ea <_realloc_r>
 80083a4:	4606      	mov	r6, r0
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d1e2      	bne.n	8008370 <__ssputs_r+0x70>
 80083aa:	6921      	ldr	r1, [r4, #16]
 80083ac:	4650      	mov	r0, sl
 80083ae:	f7ff feff 	bl	80081b0 <_free_r>
 80083b2:	e7c8      	b.n	8008346 <__ssputs_r+0x46>

080083b4 <_svfiprintf_r>:
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	461d      	mov	r5, r3
 80083ba:	898b      	ldrh	r3, [r1, #12]
 80083bc:	061f      	lsls	r7, r3, #24
 80083be:	b09d      	sub	sp, #116	; 0x74
 80083c0:	4680      	mov	r8, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	4616      	mov	r6, r2
 80083c6:	d50f      	bpl.n	80083e8 <_svfiprintf_r+0x34>
 80083c8:	690b      	ldr	r3, [r1, #16]
 80083ca:	b96b      	cbnz	r3, 80083e8 <_svfiprintf_r+0x34>
 80083cc:	2140      	movs	r1, #64	; 0x40
 80083ce:	f7ff ff3d 	bl	800824c <_malloc_r>
 80083d2:	6020      	str	r0, [r4, #0]
 80083d4:	6120      	str	r0, [r4, #16]
 80083d6:	b928      	cbnz	r0, 80083e4 <_svfiprintf_r+0x30>
 80083d8:	230c      	movs	r3, #12
 80083da:	f8c8 3000 	str.w	r3, [r8]
 80083de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e2:	e0c8      	b.n	8008576 <_svfiprintf_r+0x1c2>
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	6163      	str	r3, [r4, #20]
 80083e8:	2300      	movs	r3, #0
 80083ea:	9309      	str	r3, [sp, #36]	; 0x24
 80083ec:	2320      	movs	r3, #32
 80083ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083f2:	2330      	movs	r3, #48	; 0x30
 80083f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083f8:	9503      	str	r5, [sp, #12]
 80083fa:	f04f 0b01 	mov.w	fp, #1
 80083fe:	4637      	mov	r7, r6
 8008400:	463d      	mov	r5, r7
 8008402:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008406:	b10b      	cbz	r3, 800840c <_svfiprintf_r+0x58>
 8008408:	2b25      	cmp	r3, #37	; 0x25
 800840a:	d13e      	bne.n	800848a <_svfiprintf_r+0xd6>
 800840c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008410:	d00b      	beq.n	800842a <_svfiprintf_r+0x76>
 8008412:	4653      	mov	r3, sl
 8008414:	4632      	mov	r2, r6
 8008416:	4621      	mov	r1, r4
 8008418:	4640      	mov	r0, r8
 800841a:	f7ff ff71 	bl	8008300 <__ssputs_r>
 800841e:	3001      	adds	r0, #1
 8008420:	f000 80a4 	beq.w	800856c <_svfiprintf_r+0x1b8>
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	4453      	add	r3, sl
 8008428:	9309      	str	r3, [sp, #36]	; 0x24
 800842a:	783b      	ldrb	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 809d 	beq.w	800856c <_svfiprintf_r+0x1b8>
 8008432:	2300      	movs	r3, #0
 8008434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008444:	931a      	str	r3, [sp, #104]	; 0x68
 8008446:	462f      	mov	r7, r5
 8008448:	2205      	movs	r2, #5
 800844a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800844e:	4850      	ldr	r0, [pc, #320]	; (8008590 <_svfiprintf_r+0x1dc>)
 8008450:	f7f7 fe9e 	bl	8000190 <memchr>
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	b9d0      	cbnz	r0, 800848e <_svfiprintf_r+0xda>
 8008458:	06d9      	lsls	r1, r3, #27
 800845a:	bf44      	itt	mi
 800845c:	2220      	movmi	r2, #32
 800845e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008462:	071a      	lsls	r2, r3, #28
 8008464:	bf44      	itt	mi
 8008466:	222b      	movmi	r2, #43	; 0x2b
 8008468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800846c:	782a      	ldrb	r2, [r5, #0]
 800846e:	2a2a      	cmp	r2, #42	; 0x2a
 8008470:	d015      	beq.n	800849e <_svfiprintf_r+0xea>
 8008472:	9a07      	ldr	r2, [sp, #28]
 8008474:	462f      	mov	r7, r5
 8008476:	2000      	movs	r0, #0
 8008478:	250a      	movs	r5, #10
 800847a:	4639      	mov	r1, r7
 800847c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008480:	3b30      	subs	r3, #48	; 0x30
 8008482:	2b09      	cmp	r3, #9
 8008484:	d94d      	bls.n	8008522 <_svfiprintf_r+0x16e>
 8008486:	b1b8      	cbz	r0, 80084b8 <_svfiprintf_r+0x104>
 8008488:	e00f      	b.n	80084aa <_svfiprintf_r+0xf6>
 800848a:	462f      	mov	r7, r5
 800848c:	e7b8      	b.n	8008400 <_svfiprintf_r+0x4c>
 800848e:	4a40      	ldr	r2, [pc, #256]	; (8008590 <_svfiprintf_r+0x1dc>)
 8008490:	1a80      	subs	r0, r0, r2
 8008492:	fa0b f000 	lsl.w	r0, fp, r0
 8008496:	4318      	orrs	r0, r3
 8008498:	9004      	str	r0, [sp, #16]
 800849a:	463d      	mov	r5, r7
 800849c:	e7d3      	b.n	8008446 <_svfiprintf_r+0x92>
 800849e:	9a03      	ldr	r2, [sp, #12]
 80084a0:	1d11      	adds	r1, r2, #4
 80084a2:	6812      	ldr	r2, [r2, #0]
 80084a4:	9103      	str	r1, [sp, #12]
 80084a6:	2a00      	cmp	r2, #0
 80084a8:	db01      	blt.n	80084ae <_svfiprintf_r+0xfa>
 80084aa:	9207      	str	r2, [sp, #28]
 80084ac:	e004      	b.n	80084b8 <_svfiprintf_r+0x104>
 80084ae:	4252      	negs	r2, r2
 80084b0:	f043 0302 	orr.w	r3, r3, #2
 80084b4:	9207      	str	r2, [sp, #28]
 80084b6:	9304      	str	r3, [sp, #16]
 80084b8:	783b      	ldrb	r3, [r7, #0]
 80084ba:	2b2e      	cmp	r3, #46	; 0x2e
 80084bc:	d10c      	bne.n	80084d8 <_svfiprintf_r+0x124>
 80084be:	787b      	ldrb	r3, [r7, #1]
 80084c0:	2b2a      	cmp	r3, #42	; 0x2a
 80084c2:	d133      	bne.n	800852c <_svfiprintf_r+0x178>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	1d1a      	adds	r2, r3, #4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	9203      	str	r2, [sp, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfb8      	it	lt
 80084d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084d4:	3702      	adds	r7, #2
 80084d6:	9305      	str	r3, [sp, #20]
 80084d8:	4d2e      	ldr	r5, [pc, #184]	; (8008594 <_svfiprintf_r+0x1e0>)
 80084da:	7839      	ldrb	r1, [r7, #0]
 80084dc:	2203      	movs	r2, #3
 80084de:	4628      	mov	r0, r5
 80084e0:	f7f7 fe56 	bl	8000190 <memchr>
 80084e4:	b138      	cbz	r0, 80084f6 <_svfiprintf_r+0x142>
 80084e6:	2340      	movs	r3, #64	; 0x40
 80084e8:	1b40      	subs	r0, r0, r5
 80084ea:	fa03 f000 	lsl.w	r0, r3, r0
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	4303      	orrs	r3, r0
 80084f2:	3701      	adds	r7, #1
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	7839      	ldrb	r1, [r7, #0]
 80084f8:	4827      	ldr	r0, [pc, #156]	; (8008598 <_svfiprintf_r+0x1e4>)
 80084fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084fe:	2206      	movs	r2, #6
 8008500:	1c7e      	adds	r6, r7, #1
 8008502:	f7f7 fe45 	bl	8000190 <memchr>
 8008506:	2800      	cmp	r0, #0
 8008508:	d038      	beq.n	800857c <_svfiprintf_r+0x1c8>
 800850a:	4b24      	ldr	r3, [pc, #144]	; (800859c <_svfiprintf_r+0x1e8>)
 800850c:	bb13      	cbnz	r3, 8008554 <_svfiprintf_r+0x1a0>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	f023 0307 	bic.w	r3, r3, #7
 8008516:	3308      	adds	r3, #8
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851c:	444b      	add	r3, r9
 800851e:	9309      	str	r3, [sp, #36]	; 0x24
 8008520:	e76d      	b.n	80083fe <_svfiprintf_r+0x4a>
 8008522:	fb05 3202 	mla	r2, r5, r2, r3
 8008526:	2001      	movs	r0, #1
 8008528:	460f      	mov	r7, r1
 800852a:	e7a6      	b.n	800847a <_svfiprintf_r+0xc6>
 800852c:	2300      	movs	r3, #0
 800852e:	3701      	adds	r7, #1
 8008530:	9305      	str	r3, [sp, #20]
 8008532:	4619      	mov	r1, r3
 8008534:	250a      	movs	r5, #10
 8008536:	4638      	mov	r0, r7
 8008538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800853c:	3a30      	subs	r2, #48	; 0x30
 800853e:	2a09      	cmp	r2, #9
 8008540:	d903      	bls.n	800854a <_svfiprintf_r+0x196>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0c8      	beq.n	80084d8 <_svfiprintf_r+0x124>
 8008546:	9105      	str	r1, [sp, #20]
 8008548:	e7c6      	b.n	80084d8 <_svfiprintf_r+0x124>
 800854a:	fb05 2101 	mla	r1, r5, r1, r2
 800854e:	2301      	movs	r3, #1
 8008550:	4607      	mov	r7, r0
 8008552:	e7f0      	b.n	8008536 <_svfiprintf_r+0x182>
 8008554:	ab03      	add	r3, sp, #12
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4622      	mov	r2, r4
 800855a:	4b11      	ldr	r3, [pc, #68]	; (80085a0 <_svfiprintf_r+0x1ec>)
 800855c:	a904      	add	r1, sp, #16
 800855e:	4640      	mov	r0, r8
 8008560:	f7fc f8e4 	bl	800472c <_printf_float>
 8008564:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008568:	4681      	mov	r9, r0
 800856a:	d1d6      	bne.n	800851a <_svfiprintf_r+0x166>
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	065b      	lsls	r3, r3, #25
 8008570:	f53f af35 	bmi.w	80083de <_svfiprintf_r+0x2a>
 8008574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008576:	b01d      	add	sp, #116	; 0x74
 8008578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857c:	ab03      	add	r3, sp, #12
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4622      	mov	r2, r4
 8008582:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <_svfiprintf_r+0x1ec>)
 8008584:	a904      	add	r1, sp, #16
 8008586:	4640      	mov	r0, r8
 8008588:	f7fc fb86 	bl	8004c98 <_printf_i>
 800858c:	e7ea      	b.n	8008564 <_svfiprintf_r+0x1b0>
 800858e:	bf00      	nop
 8008590:	08008f84 	.word	0x08008f84
 8008594:	08008f8a 	.word	0x08008f8a
 8008598:	08008f8e 	.word	0x08008f8e
 800859c:	0800472d 	.word	0x0800472d
 80085a0:	08008301 	.word	0x08008301

080085a4 <__sfputc_r>:
 80085a4:	6893      	ldr	r3, [r2, #8]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	b410      	push	{r4}
 80085ac:	6093      	str	r3, [r2, #8]
 80085ae:	da08      	bge.n	80085c2 <__sfputc_r+0x1e>
 80085b0:	6994      	ldr	r4, [r2, #24]
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	db01      	blt.n	80085ba <__sfputc_r+0x16>
 80085b6:	290a      	cmp	r1, #10
 80085b8:	d103      	bne.n	80085c2 <__sfputc_r+0x1e>
 80085ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085be:	f7fd bdb1 	b.w	8006124 <__swbuf_r>
 80085c2:	6813      	ldr	r3, [r2, #0]
 80085c4:	1c58      	adds	r0, r3, #1
 80085c6:	6010      	str	r0, [r2, #0]
 80085c8:	7019      	strb	r1, [r3, #0]
 80085ca:	4608      	mov	r0, r1
 80085cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <__sfputs_r>:
 80085d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d4:	4606      	mov	r6, r0
 80085d6:	460f      	mov	r7, r1
 80085d8:	4614      	mov	r4, r2
 80085da:	18d5      	adds	r5, r2, r3
 80085dc:	42ac      	cmp	r4, r5
 80085de:	d101      	bne.n	80085e4 <__sfputs_r+0x12>
 80085e0:	2000      	movs	r0, #0
 80085e2:	e007      	b.n	80085f4 <__sfputs_r+0x22>
 80085e4:	463a      	mov	r2, r7
 80085e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ffda 	bl	80085a4 <__sfputc_r>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d1f3      	bne.n	80085dc <__sfputs_r+0xa>
 80085f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085f8 <_vfiprintf_r>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	460c      	mov	r4, r1
 80085fe:	b09d      	sub	sp, #116	; 0x74
 8008600:	4617      	mov	r7, r2
 8008602:	461d      	mov	r5, r3
 8008604:	4606      	mov	r6, r0
 8008606:	b118      	cbz	r0, 8008610 <_vfiprintf_r+0x18>
 8008608:	6983      	ldr	r3, [r0, #24]
 800860a:	b90b      	cbnz	r3, 8008610 <_vfiprintf_r+0x18>
 800860c:	f7fe fd80 	bl	8007110 <__sinit>
 8008610:	4b7c      	ldr	r3, [pc, #496]	; (8008804 <_vfiprintf_r+0x20c>)
 8008612:	429c      	cmp	r4, r3
 8008614:	d158      	bne.n	80086c8 <_vfiprintf_r+0xd0>
 8008616:	6874      	ldr	r4, [r6, #4]
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	0718      	lsls	r0, r3, #28
 800861c:	d55e      	bpl.n	80086dc <_vfiprintf_r+0xe4>
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d05b      	beq.n	80086dc <_vfiprintf_r+0xe4>
 8008624:	2300      	movs	r3, #0
 8008626:	9309      	str	r3, [sp, #36]	; 0x24
 8008628:	2320      	movs	r3, #32
 800862a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800862e:	2330      	movs	r3, #48	; 0x30
 8008630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008634:	9503      	str	r5, [sp, #12]
 8008636:	f04f 0b01 	mov.w	fp, #1
 800863a:	46b8      	mov	r8, r7
 800863c:	4645      	mov	r5, r8
 800863e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008642:	b10b      	cbz	r3, 8008648 <_vfiprintf_r+0x50>
 8008644:	2b25      	cmp	r3, #37	; 0x25
 8008646:	d154      	bne.n	80086f2 <_vfiprintf_r+0xfa>
 8008648:	ebb8 0a07 	subs.w	sl, r8, r7
 800864c:	d00b      	beq.n	8008666 <_vfiprintf_r+0x6e>
 800864e:	4653      	mov	r3, sl
 8008650:	463a      	mov	r2, r7
 8008652:	4621      	mov	r1, r4
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff ffbc 	bl	80085d2 <__sfputs_r>
 800865a:	3001      	adds	r0, #1
 800865c:	f000 80c2 	beq.w	80087e4 <_vfiprintf_r+0x1ec>
 8008660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008662:	4453      	add	r3, sl
 8008664:	9309      	str	r3, [sp, #36]	; 0x24
 8008666:	f898 3000 	ldrb.w	r3, [r8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 80ba 	beq.w	80087e4 <_vfiprintf_r+0x1ec>
 8008670:	2300      	movs	r3, #0
 8008672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867a:	9304      	str	r3, [sp, #16]
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008682:	931a      	str	r3, [sp, #104]	; 0x68
 8008684:	46a8      	mov	r8, r5
 8008686:	2205      	movs	r2, #5
 8008688:	f818 1b01 	ldrb.w	r1, [r8], #1
 800868c:	485e      	ldr	r0, [pc, #376]	; (8008808 <_vfiprintf_r+0x210>)
 800868e:	f7f7 fd7f 	bl	8000190 <memchr>
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	bb78      	cbnz	r0, 80086f6 <_vfiprintf_r+0xfe>
 8008696:	06d9      	lsls	r1, r3, #27
 8008698:	bf44      	itt	mi
 800869a:	2220      	movmi	r2, #32
 800869c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086a0:	071a      	lsls	r2, r3, #28
 80086a2:	bf44      	itt	mi
 80086a4:	222b      	movmi	r2, #43	; 0x2b
 80086a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086aa:	782a      	ldrb	r2, [r5, #0]
 80086ac:	2a2a      	cmp	r2, #42	; 0x2a
 80086ae:	d02a      	beq.n	8008706 <_vfiprintf_r+0x10e>
 80086b0:	9a07      	ldr	r2, [sp, #28]
 80086b2:	46a8      	mov	r8, r5
 80086b4:	2000      	movs	r0, #0
 80086b6:	250a      	movs	r5, #10
 80086b8:	4641      	mov	r1, r8
 80086ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086be:	3b30      	subs	r3, #48	; 0x30
 80086c0:	2b09      	cmp	r3, #9
 80086c2:	d969      	bls.n	8008798 <_vfiprintf_r+0x1a0>
 80086c4:	b360      	cbz	r0, 8008720 <_vfiprintf_r+0x128>
 80086c6:	e024      	b.n	8008712 <_vfiprintf_r+0x11a>
 80086c8:	4b50      	ldr	r3, [pc, #320]	; (800880c <_vfiprintf_r+0x214>)
 80086ca:	429c      	cmp	r4, r3
 80086cc:	d101      	bne.n	80086d2 <_vfiprintf_r+0xda>
 80086ce:	68b4      	ldr	r4, [r6, #8]
 80086d0:	e7a2      	b.n	8008618 <_vfiprintf_r+0x20>
 80086d2:	4b4f      	ldr	r3, [pc, #316]	; (8008810 <_vfiprintf_r+0x218>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	bf08      	it	eq
 80086d8:	68f4      	ldreq	r4, [r6, #12]
 80086da:	e79d      	b.n	8008618 <_vfiprintf_r+0x20>
 80086dc:	4621      	mov	r1, r4
 80086de:	4630      	mov	r0, r6
 80086e0:	f7fd fd72 	bl	80061c8 <__swsetup_r>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d09d      	beq.n	8008624 <_vfiprintf_r+0x2c>
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ec:	b01d      	add	sp, #116	; 0x74
 80086ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f2:	46a8      	mov	r8, r5
 80086f4:	e7a2      	b.n	800863c <_vfiprintf_r+0x44>
 80086f6:	4a44      	ldr	r2, [pc, #272]	; (8008808 <_vfiprintf_r+0x210>)
 80086f8:	1a80      	subs	r0, r0, r2
 80086fa:	fa0b f000 	lsl.w	r0, fp, r0
 80086fe:	4318      	orrs	r0, r3
 8008700:	9004      	str	r0, [sp, #16]
 8008702:	4645      	mov	r5, r8
 8008704:	e7be      	b.n	8008684 <_vfiprintf_r+0x8c>
 8008706:	9a03      	ldr	r2, [sp, #12]
 8008708:	1d11      	adds	r1, r2, #4
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	9103      	str	r1, [sp, #12]
 800870e:	2a00      	cmp	r2, #0
 8008710:	db01      	blt.n	8008716 <_vfiprintf_r+0x11e>
 8008712:	9207      	str	r2, [sp, #28]
 8008714:	e004      	b.n	8008720 <_vfiprintf_r+0x128>
 8008716:	4252      	negs	r2, r2
 8008718:	f043 0302 	orr.w	r3, r3, #2
 800871c:	9207      	str	r2, [sp, #28]
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	f898 3000 	ldrb.w	r3, [r8]
 8008724:	2b2e      	cmp	r3, #46	; 0x2e
 8008726:	d10e      	bne.n	8008746 <_vfiprintf_r+0x14e>
 8008728:	f898 3001 	ldrb.w	r3, [r8, #1]
 800872c:	2b2a      	cmp	r3, #42	; 0x2a
 800872e:	d138      	bne.n	80087a2 <_vfiprintf_r+0x1aa>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9203      	str	r2, [sp, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfb8      	it	lt
 800873c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008740:	f108 0802 	add.w	r8, r8, #2
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	4d33      	ldr	r5, [pc, #204]	; (8008814 <_vfiprintf_r+0x21c>)
 8008748:	f898 1000 	ldrb.w	r1, [r8]
 800874c:	2203      	movs	r2, #3
 800874e:	4628      	mov	r0, r5
 8008750:	f7f7 fd1e 	bl	8000190 <memchr>
 8008754:	b140      	cbz	r0, 8008768 <_vfiprintf_r+0x170>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	1b40      	subs	r0, r0, r5
 800875a:	fa03 f000 	lsl.w	r0, r3, r0
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	4303      	orrs	r3, r0
 8008762:	f108 0801 	add.w	r8, r8, #1
 8008766:	9304      	str	r3, [sp, #16]
 8008768:	f898 1000 	ldrb.w	r1, [r8]
 800876c:	482a      	ldr	r0, [pc, #168]	; (8008818 <_vfiprintf_r+0x220>)
 800876e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008772:	2206      	movs	r2, #6
 8008774:	f108 0701 	add.w	r7, r8, #1
 8008778:	f7f7 fd0a 	bl	8000190 <memchr>
 800877c:	2800      	cmp	r0, #0
 800877e:	d037      	beq.n	80087f0 <_vfiprintf_r+0x1f8>
 8008780:	4b26      	ldr	r3, [pc, #152]	; (800881c <_vfiprintf_r+0x224>)
 8008782:	bb1b      	cbnz	r3, 80087cc <_vfiprintf_r+0x1d4>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	3307      	adds	r3, #7
 8008788:	f023 0307 	bic.w	r3, r3, #7
 800878c:	3308      	adds	r3, #8
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008792:	444b      	add	r3, r9
 8008794:	9309      	str	r3, [sp, #36]	; 0x24
 8008796:	e750      	b.n	800863a <_vfiprintf_r+0x42>
 8008798:	fb05 3202 	mla	r2, r5, r2, r3
 800879c:	2001      	movs	r0, #1
 800879e:	4688      	mov	r8, r1
 80087a0:	e78a      	b.n	80086b8 <_vfiprintf_r+0xc0>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f108 0801 	add.w	r8, r8, #1
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	4619      	mov	r1, r3
 80087ac:	250a      	movs	r5, #10
 80087ae:	4640      	mov	r0, r8
 80087b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b4:	3a30      	subs	r2, #48	; 0x30
 80087b6:	2a09      	cmp	r2, #9
 80087b8:	d903      	bls.n	80087c2 <_vfiprintf_r+0x1ca>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0c3      	beq.n	8008746 <_vfiprintf_r+0x14e>
 80087be:	9105      	str	r1, [sp, #20]
 80087c0:	e7c1      	b.n	8008746 <_vfiprintf_r+0x14e>
 80087c2:	fb05 2101 	mla	r1, r5, r1, r2
 80087c6:	2301      	movs	r3, #1
 80087c8:	4680      	mov	r8, r0
 80087ca:	e7f0      	b.n	80087ae <_vfiprintf_r+0x1b6>
 80087cc:	ab03      	add	r3, sp, #12
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4622      	mov	r2, r4
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <_vfiprintf_r+0x228>)
 80087d4:	a904      	add	r1, sp, #16
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7fb ffa8 	bl	800472c <_printf_float>
 80087dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80087e0:	4681      	mov	r9, r0
 80087e2:	d1d5      	bne.n	8008790 <_vfiprintf_r+0x198>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	065b      	lsls	r3, r3, #25
 80087e8:	f53f af7e 	bmi.w	80086e8 <_vfiprintf_r+0xf0>
 80087ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ee:	e77d      	b.n	80086ec <_vfiprintf_r+0xf4>
 80087f0:	ab03      	add	r3, sp, #12
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4622      	mov	r2, r4
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <_vfiprintf_r+0x228>)
 80087f8:	a904      	add	r1, sp, #16
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7fc fa4c 	bl	8004c98 <_printf_i>
 8008800:	e7ec      	b.n	80087dc <_vfiprintf_r+0x1e4>
 8008802:	bf00      	nop
 8008804:	08008e38 	.word	0x08008e38
 8008808:	08008f84 	.word	0x08008f84
 800880c:	08008e58 	.word	0x08008e58
 8008810:	08008e18 	.word	0x08008e18
 8008814:	08008f8a 	.word	0x08008f8a
 8008818:	08008f8e 	.word	0x08008f8e
 800881c:	0800472d 	.word	0x0800472d
 8008820:	080085d3 	.word	0x080085d3

08008824 <_sbrk_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4c06      	ldr	r4, [pc, #24]	; (8008840 <_sbrk_r+0x1c>)
 8008828:	2300      	movs	r3, #0
 800882a:	4605      	mov	r5, r0
 800882c:	4608      	mov	r0, r1
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	f7f9 f808 	bl	8001844 <_sbrk>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d102      	bne.n	800883e <_sbrk_r+0x1a>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	b103      	cbz	r3, 800883e <_sbrk_r+0x1a>
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	20000268 	.word	0x20000268

08008844 <__sread>:
 8008844:	b510      	push	{r4, lr}
 8008846:	460c      	mov	r4, r1
 8008848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884c:	f000 f8f4 	bl	8008a38 <_read_r>
 8008850:	2800      	cmp	r0, #0
 8008852:	bfab      	itete	ge
 8008854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008856:	89a3      	ldrhlt	r3, [r4, #12]
 8008858:	181b      	addge	r3, r3, r0
 800885a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800885e:	bfac      	ite	ge
 8008860:	6563      	strge	r3, [r4, #84]	; 0x54
 8008862:	81a3      	strhlt	r3, [r4, #12]
 8008864:	bd10      	pop	{r4, pc}

08008866 <__swrite>:
 8008866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	461f      	mov	r7, r3
 800886c:	898b      	ldrh	r3, [r1, #12]
 800886e:	05db      	lsls	r3, r3, #23
 8008870:	4605      	mov	r5, r0
 8008872:	460c      	mov	r4, r1
 8008874:	4616      	mov	r6, r2
 8008876:	d505      	bpl.n	8008884 <__swrite+0x1e>
 8008878:	2302      	movs	r3, #2
 800887a:	2200      	movs	r2, #0
 800887c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008880:	f000 f886 	bl	8008990 <_lseek_r>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800888a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	4632      	mov	r2, r6
 8008892:	463b      	mov	r3, r7
 8008894:	4628      	mov	r0, r5
 8008896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800889a:	f000 b835 	b.w	8008908 <_write_r>

0800889e <__sseek>:
 800889e:	b510      	push	{r4, lr}
 80088a0:	460c      	mov	r4, r1
 80088a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a6:	f000 f873 	bl	8008990 <_lseek_r>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	bf15      	itete	ne
 80088b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ba:	81a3      	strheq	r3, [r4, #12]
 80088bc:	bf18      	it	ne
 80088be:	81a3      	strhne	r3, [r4, #12]
 80088c0:	bd10      	pop	{r4, pc}

080088c2 <__sclose>:
 80088c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c6:	f000 b831 	b.w	800892c <_close_r>

080088ca <strncmp>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	b16a      	cbz	r2, 80088ea <strncmp+0x20>
 80088ce:	3901      	subs	r1, #1
 80088d0:	1884      	adds	r4, r0, r2
 80088d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80088d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80088da:	4293      	cmp	r3, r2
 80088dc:	d103      	bne.n	80088e6 <strncmp+0x1c>
 80088de:	42a0      	cmp	r0, r4
 80088e0:	d001      	beq.n	80088e6 <strncmp+0x1c>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f5      	bne.n	80088d2 <strncmp+0x8>
 80088e6:	1a98      	subs	r0, r3, r2
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	4610      	mov	r0, r2
 80088ec:	e7fc      	b.n	80088e8 <strncmp+0x1e>

080088ee <__ascii_wctomb>:
 80088ee:	b149      	cbz	r1, 8008904 <__ascii_wctomb+0x16>
 80088f0:	2aff      	cmp	r2, #255	; 0xff
 80088f2:	bf85      	ittet	hi
 80088f4:	238a      	movhi	r3, #138	; 0x8a
 80088f6:	6003      	strhi	r3, [r0, #0]
 80088f8:	700a      	strbls	r2, [r1, #0]
 80088fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80088fe:	bf98      	it	ls
 8008900:	2001      	movls	r0, #1
 8008902:	4770      	bx	lr
 8008904:	4608      	mov	r0, r1
 8008906:	4770      	bx	lr

08008908 <_write_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4c07      	ldr	r4, [pc, #28]	; (8008928 <_write_r+0x20>)
 800890c:	4605      	mov	r5, r0
 800890e:	4608      	mov	r0, r1
 8008910:	4611      	mov	r1, r2
 8008912:	2200      	movs	r2, #0
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f7f8 ff43 	bl	80017a2 <_write>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_write_r+0x1e>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	b103      	cbz	r3, 8008926 <_write_r+0x1e>
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	20000268 	.word	0x20000268

0800892c <_close_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4c06      	ldr	r4, [pc, #24]	; (8008948 <_close_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4605      	mov	r5, r0
 8008934:	4608      	mov	r0, r1
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	f7f8 ff4f 	bl	80017da <_close>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_close_r+0x1a>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	b103      	cbz	r3, 8008946 <_close_r+0x1a>
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20000268 	.word	0x20000268

0800894c <_fstat_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4c07      	ldr	r4, [pc, #28]	; (800896c <_fstat_r+0x20>)
 8008950:	2300      	movs	r3, #0
 8008952:	4605      	mov	r5, r0
 8008954:	4608      	mov	r0, r1
 8008956:	4611      	mov	r1, r2
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	f7f8 ff4a 	bl	80017f2 <_fstat>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	d102      	bne.n	8008968 <_fstat_r+0x1c>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	b103      	cbz	r3, 8008968 <_fstat_r+0x1c>
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	bd38      	pop	{r3, r4, r5, pc}
 800896a:	bf00      	nop
 800896c:	20000268 	.word	0x20000268

08008970 <_isatty_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4c06      	ldr	r4, [pc, #24]	; (800898c <_isatty_r+0x1c>)
 8008974:	2300      	movs	r3, #0
 8008976:	4605      	mov	r5, r0
 8008978:	4608      	mov	r0, r1
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	f7f8 ff49 	bl	8001812 <_isatty>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_isatty_r+0x1a>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	b103      	cbz	r3, 800898a <_isatty_r+0x1a>
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20000268 	.word	0x20000268

08008990 <_lseek_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4c07      	ldr	r4, [pc, #28]	; (80089b0 <_lseek_r+0x20>)
 8008994:	4605      	mov	r5, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7f8 ff42 	bl	8001828 <_lseek>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_lseek_r+0x1e>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_lseek_r+0x1e>
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000268 	.word	0x20000268

080089b4 <memmove>:
 80089b4:	4288      	cmp	r0, r1
 80089b6:	b510      	push	{r4, lr}
 80089b8:	eb01 0302 	add.w	r3, r1, r2
 80089bc:	d807      	bhi.n	80089ce <memmove+0x1a>
 80089be:	1e42      	subs	r2, r0, #1
 80089c0:	4299      	cmp	r1, r3
 80089c2:	d00a      	beq.n	80089da <memmove+0x26>
 80089c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089cc:	e7f8      	b.n	80089c0 <memmove+0xc>
 80089ce:	4283      	cmp	r3, r0
 80089d0:	d9f5      	bls.n	80089be <memmove+0xa>
 80089d2:	1881      	adds	r1, r0, r2
 80089d4:	1ad2      	subs	r2, r2, r3
 80089d6:	42d3      	cmn	r3, r2
 80089d8:	d100      	bne.n	80089dc <memmove+0x28>
 80089da:	bd10      	pop	{r4, pc}
 80089dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80089e4:	e7f7      	b.n	80089d6 <memmove+0x22>

080089e6 <__malloc_lock>:
 80089e6:	4770      	bx	lr

080089e8 <__malloc_unlock>:
 80089e8:	4770      	bx	lr

080089ea <_realloc_r>:
 80089ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ec:	4607      	mov	r7, r0
 80089ee:	4614      	mov	r4, r2
 80089f0:	460e      	mov	r6, r1
 80089f2:	b921      	cbnz	r1, 80089fe <_realloc_r+0x14>
 80089f4:	4611      	mov	r1, r2
 80089f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089fa:	f7ff bc27 	b.w	800824c <_malloc_r>
 80089fe:	b922      	cbnz	r2, 8008a0a <_realloc_r+0x20>
 8008a00:	f7ff fbd6 	bl	80081b0 <_free_r>
 8008a04:	4625      	mov	r5, r4
 8008a06:	4628      	mov	r0, r5
 8008a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0a:	f000 f827 	bl	8008a5c <_malloc_usable_size_r>
 8008a0e:	42a0      	cmp	r0, r4
 8008a10:	d20f      	bcs.n	8008a32 <_realloc_r+0x48>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff fc19 	bl	800824c <_malloc_r>
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d0f2      	beq.n	8008a06 <_realloc_r+0x1c>
 8008a20:	4631      	mov	r1, r6
 8008a22:	4622      	mov	r2, r4
 8008a24:	f7fb fdda 	bl	80045dc <memcpy>
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7ff fbc0 	bl	80081b0 <_free_r>
 8008a30:	e7e9      	b.n	8008a06 <_realloc_r+0x1c>
 8008a32:	4635      	mov	r5, r6
 8008a34:	e7e7      	b.n	8008a06 <_realloc_r+0x1c>
	...

08008a38 <_read_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4c07      	ldr	r4, [pc, #28]	; (8008a58 <_read_r+0x20>)
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	4608      	mov	r0, r1
 8008a40:	4611      	mov	r1, r2
 8008a42:	2200      	movs	r2, #0
 8008a44:	6022      	str	r2, [r4, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f7f8 fe8e 	bl	8001768 <_read>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_read_r+0x1e>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_read_r+0x1e>
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	20000268 	.word	0x20000268

08008a5c <_malloc_usable_size_r>:
 8008a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a60:	1f18      	subs	r0, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfbc      	itt	lt
 8008a66:	580b      	ldrlt	r3, [r1, r0]
 8008a68:	18c0      	addlt	r0, r0, r3
 8008a6a:	4770      	bx	lr

08008a6c <_init>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr

08008a78 <_fini>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr
